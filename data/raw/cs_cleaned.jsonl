{"diff": "a / src / Jackett . Common / Indexers / TransmitheNet . cs \n  b / src / Jackett . Common / Indexers / TransmitheNet . cs \n protected override async Task < IEnumerable < ReleaseInfo > > PerformQuery ( TorznabQuer \n await DoLogin ( ) ; \n } \n \n - string Url ; \n - if ( string . IsNullOrEmpty ( query . GetQueryString ( ) ) ) \n - Url = SearchUrl ; \n - else \n - { \n - Url = $ \" { SearchUrl } & searchtext = { WebUtility . UrlEncode ( query . GetQueryString ( ) ) } \" ; \n - } \n + / / # 6413 \n + / / string Url ; \n + / / if ( string . IsNullOrEmpty ( query . GetQueryString ( ) ) ) \n + / / Url = SearchUrl ; \n + / / else \n + / / { \n + string Url = $ \" { SearchUrl } & searchtext = { WebUtility . UrlEncode ( query . GetQueryString ( ) ) } \" ; \n + / / } \n \n var response = await RequestStringWithCookiesAndRetry ( Url ) ; \n List < ReleaseInfo > releases = ParseResponse ( response . Content ) ;", "msg": "transmitthenet : Add daily show support for NEB . Resolves\n"}
{"diff": "a / src / installer / DependencyContextTests . cs \n  b / src / installer / DependencyContextTests . cs \n private DependencyContext BuildTestContext ( ) \n new RuntimeFallbacks ( \" win8 - x64 \" , \" win8 \" , \" win7 - x64 \" , \" win7 \" , \" win - x64 \" , \" win \" , \" any \" , \" base \" ) , \n new RuntimeFallbacks ( \" win7 - x64 \" , \" win7 \" , \" win - x64 \" , \" win \" , \" any \" , \" base \" ) , \n new RuntimeFallbacks ( \" ubuntu - x64 \" , \" ubuntu \" , \" linux - x64 \" , \" linux \" , \" unix \" , \" any \" , \" base \" ) , \n + new RuntimeFallbacks ( \" ubuntu . 16 . 04 - x64 \" , \" ubuntu \" , \" linux - x64 \" , \" linux \" , \" unix \" , \" any \" , \" base \" ) , \n new RuntimeFallbacks ( \" rhel - x64 \" , \" rhel \" , \" linux - x64 \" , \" linux \" , \" unix \" , \" any \" , \" base \" ) , \n new RuntimeFallbacks ( \" osx - x64 \" , \" osx \" , \" unix \" , \" any \" , \" base \" ) , \n } ) ;", "msg": "Adding docker files , modifying scripts and code to handle ubuntu 16 . 04\n"}
{"diff": "a / src / Shared / BenchmarkRunner / DefaultCoreConfig . cs \n  b / src / Shared / BenchmarkRunner / DefaultCoreConfig . cs \n public DefaultCoreConfig ( ) \n Add ( Job . Core \n # if NETCOREAPP2_1 \n . With ( CsProjCoreToolchain . From ( NetCoreAppSettings . NetCoreApp21 ) ) \n - # else \n + # elif NETCOREAPP3_0 \n . With ( CsProjCoreToolchain . From ( new NetCoreAppSettings ( \" netcoreapp3 . 0 \" , null , \" . NET Core 3 . 0 \" ) ) ) \n + # elif NETCOREAPP5_0 \n + . With ( CsProjCoreToolchain . From ( new NetCoreAppSettings ( \" netcoreapp5 . 0 \" , null , \" . NET Core 5 . 0 \" ) ) ) \n + # else \n + # error Target frameworks need to be updated . \n # endif \n . With ( new GcMode { Server = true } ) \n . With ( RunStrategy . Throughput ) ) ;", "msg": "Add support for netcoreapp5 . 0 to micro benchmarks ( dotnet / extensions )\n"}
{"diff": "a / MonoGame . Framework / Input / Touch / TouchPanelCapabilities . cs \n  b / MonoGame . Framework / Input / Touch / TouchPanelCapabilities . cs \n internal void Initialize ( ) \n \n # if WINDOWS_STOREAPP \n / / Is a touch device present ? \n - var caps = new Windows . Devices . Input . TouchCapabilities ( ) ; \n - isConnected = caps . TouchPresent ! = 0 ; \n - \n / / Iterate through all pointer devices and find the maximum number of concurrent touches possible \n maximumTouchCount = 0 ; \n var pointerDevices = Windows . Devices . Input . PointerDevice . GetPointerDevices ( ) ; \n foreach ( var pointerDevice in pointerDevices ) \n + { \n maximumTouchCount = Math . Max ( maximumTouchCount , ( int ) pointerDevice . MaxContacts ) ; \n + \n + if ( pointerDevice . PointerDeviceType = = Windows . Devices . Input . PointerDeviceType . Touch ) \n + isConnected = true ; \n + } \n # elif WINDOWS \n maximumTouchCount = GetSystemMetrics ( SM_MAXIMUMTOUCHES ) ; \n isConnected = ( maximumTouchCount > 0 ) ;", "msg": "Fixed touch capability on Windows 8 when multiple input devices are present\n"}
{"diff": "a / ReactiveUI . Cocoa / KVOObservableForProperty . cs \n  b / ReactiveUI . Cocoa / KVOObservableForProperty . cs \n \n using System . Reactive . Linq ; \n using System . Reflection ; \n using ReactiveUI ; \n + using System . Runtime . InteropServices ; \n \n # if UIKIT \n using MonoTouch . UIKit ; \n public int GetAffinityForObject ( Type type , bool beforeChanged = false ) \n var bobs = new BlockObserveValueDelegate ( ( key , s , _ ) = > { \n subj . OnNext ( new ObservedChange < object , object > ( ) { Sender = s , PropertyName = propertyName } ) ; \n } ) ; \n + var pin = GCHandle . Alloc ( bobs ) ; \n \n obj . AddObserver ( bobs , ( NSString ) findCocoaNameFromNetName ( sender . GetType ( ) , propertyName ) , beforeChanged ? NSKeyValueObservingOptions . Old : NSKeyValueObservingOptions . New , IntPtr . Zero ) ; \n return Disposable . Create ( ( ) = > { \n obj . RemoveObserver ( bobs , ( NSString ) propertyName ) ; \n + pin . Free ( ) ; \n } ) ; \n } ) ; \n }", "msg": "Retain handles on KVO callback so the GC doesn ' t take it back\n"}
{"diff": "a / src / MusicStore / Controllers / StoreManagerController . cs \n  b / src / MusicStore / Controllers / StoreManagerController . cs \n public IActionResult Edit ( Album album ) \n / / \n / / GET : / StoreManager / Delete / 5 \n \n + [ HttpGet ] \n public IActionResult Delete ( int id = 0 ) \n { \n Album album = db . Albums . Single ( a = > a . AlbumId = = id ) ;", "msg": "Adding a [ HttpGet ] attribute to enable the Delete album from the store functionality .\n"}
{"diff": "a / Xamarin . Forms . Core . UITests . Shared / UITestCategories . cs \n  b / Xamarin . Forms . Core . UITests . Shared / UITestCategories . cs \n internal static class UITestCategories \n public const string Gestures = \" Gestures \" ; \n public const string Navigation = \" Navigation \" ; \n public const string Effects = \" Effects \" ; \n - public const string Animation = \" Animation \" ; \n \n public const string ManualReview = \" ManualReview \" ; \n public const string Performance = \" Performance \" ;", "msg": "[ Build ] Fix merge , remove category Aniamtion\n"}
{"diff": "a / ServiceDescriptor . cs \n  b / ServiceDescriptor . cs \n private string AppendTags ( string tagName ) \n \n foreach ( XmlNode argument in dom . SelectNodes ( \" / / \" + tagName ) ) \n { \n - string token = argument . InnerText ; \n + string token = Environment . ExpandEnvironmentVariables ( argument . InnerText ) ; \n \n if ( token . StartsWith ( \" \\ \" \" ) & & token . EndsWith ( \" \\ \" \" ) ) \n { \n private string AppendTags ( string tagName ) \n arguments + = \" \" + token ; \n } \n \n - return Environment . ExpandEnvironmentVariables ( arguments ) ; \n + return arguments ; \n } \n }", "msg": "env variable expansion needs to happen first if we want to really detect\n"}
{"diff": "a / Src / Compilers / CSharp / Test / Emit / Emit / EditAndContinue / EditAndContinueTests . cs \n  b / Src / Compilers / CSharp / Test / Emit / Emit / EditAndContinue / EditAndContinueTests . cs \n . maxstack 1 \n / / / Reuse existing anonymous types . \n / / / < / summary > \n [ WorkItem ( 825903 , \" DevDiv \" ) ] \n - [ Fact ] \n + [ Fact ( Skip = \" 1008057 \" ) ] \n public void AnonymousTypes ( ) \n { \n var source0 =", "msg": "exclude broken test . bug filed . ( changeset 1318072 )\n"}
{"diff": "a / src / libraries / System . Collections / src / System / Collections / Generic / Queue . cs \n  b / src / libraries / System . Collections / src / System / Collections / Generic / Queue . cs \n IEnumerator IEnumerable . GetEnumerator ( ) \n } \n \n / / Removes the object at the head of the queue and returns it . If the queue \n - / / is empty , this method simply returns null . \n + / / is empty , this method throws an \n + / / InvalidOperationException . \n / / / < include file = ' doc \\ Queue . uex ' path = ' docs / doc [ @ for = \" Queue . Dequeue \" ] / * ' / > \n public T Dequeue ( ) \n {", "msg": "Changing Dequeue method commend to reflect method behaviour . Dequeue throws InvalidOperationException when queue is empty\n"}
{"diff": "a / StackExchange . Redis . Tests / TestBase . cs \n  b / StackExchange . Redis . Tests / TestBase . cs \n protected IServer GetServer ( ConnectionMultiplexer muxer ) \n bool checkConnect = true , bool pause = true , string failMessage = null , \n string channelPrefix = null , bool useSharedSocketManager = true , Proxy ? proxy = null ) \n { \n - if ( pause ) Thread . Sleep ( 500 ) ; / / get a lot of glitches when hammering new socket creations etc ; pace it out a bit \n + if ( pause ) Thread . Sleep ( 250 ) ; / / get a lot of glitches when hammering new socket creations etc ; pace it out a bit \n string configuration = GetConfiguration ( ) ; \n var config = ConfigurationOptions . Parse ( configuration ) ; \n if ( disabledCommands ! = null & & disabledCommands . Length ! = 0 )", "msg": "Shorten test durations quite a bit , half the pause\n"}
{"diff": "a / OpenRA . Mods . Common / Traits / Render / WithSpriteTurret . cs \n  b / OpenRA . Mods . Common / Traits / Render / WithSpriteTurret . cs \n public WithSpriteTurret ( Actor self , WithSpriteTurretInfo info ) \n t . QuantizedFacings = DefaultAnimation . CurrentSequence . Facings ; \n } \n \n - WVec TurretOffset ( Actor self ) \n + protected virtual WVec TurretOffset ( Actor self ) \n { \n if ( ! Info . Recoils ) \n return t . Position ( self ) ;", "msg": "Made WithSpriteTurret . TurretOffset protected virtual to be overridden by mod traits .\n"}
{"diff": "a / osu . Game . Tests / Visual / TestCaseChatLink . cs \n  b / osu . Game . Tests / Visual / TestCaseChatLink . cs \n private void load ( OsuColour colours ) \n var chatManager = new ChannelManager ( ) ; \n chatManager . AvailableChannels . Add ( new Channel { Name = \" # english \" } ) ; \n chatManager . AvailableChannels . Add ( new Channel { Name = \" # japanese \" } ) ; \n - dependencies . Cache ( chatManager ) ; \n + Dependencies . Cache ( chatManager ) ; \n \n - dependencies . Cache ( new ChatOverlay ( ) ) ; \n + Dependencies . Cache ( new ChatOverlay ( ) ) ; \n \n testLinksGeneral ( ) ; \n testEcho ( ) ;", "msg": "Cache the dependencies using the static method of the class Dependencies .\n"}
{"diff": "a / osu . Game / Overlays / Comments / CommentsContainer . cs \n  b / osu . Game / Overlays / Comments / CommentsContainer . cs \n public void ShowComments ( CommentableType type , long id ) \n { \n this . type = type ; \n this . id = id ; \n - Sort . TriggerChange ( ) ; \n + refetchComments ( ) ; \n } \n \n private void refetchComments ( )", "msg": "Call the method directly rather that trigger a bindable\n"}
{"diff": "a / src / Microsoft . AspNetCore . Mvc . Localization / Internal / MvcLocalizationServices . cs \n  b / src / Microsoft . AspNetCore . Mvc . Localization / Internal / MvcLocalizationServices . cs \n public static class MvcLocalizationServices \n Action < LocalizationOptions > setupAction ) \n { \n AddMvcLocalizationServices ( services , format , setupAction ) ; \n - \n - services . AddLocalization ( setupAction ) ; \n + \n + if ( setupAction = = null ) \n + { \n + services . AddLocalization ( ) ; \n + } \n + else \n + { \n + services . AddLocalization ( setupAction ) ; \n + } \n } \n \n / / To enable unit testing only ' MVC ' specific services", "msg": "[ Fixes ] React to changes in Localization .\n"}
{"diff": "a / OpenRA . Mods . Common / Widgets / Logic / Installation / DownloadPackageLogic . cs \n  b / OpenRA . Mods . Common / Widgets / Logic / Installation / DownloadPackageLogic . cs \n void ShowDownloadDialog ( ) \n \n if ( i . TotalBytesToReceive < 0 ) \n { \n - dataTotal = float . NaN ; \n - dataReceived = i . BytesReceived ; \n - dataSuffix = SizeSuffixes [ 0 ] ; \n + mag = ( int ) Math . Log ( i . BytesReceived , 1024 ) ; \n + dataReceived = i . BytesReceived / ( float ) ( 1L < < ( mag * 10 ) ) ; \n + dataSuffix = SizeSuffixes [ mag ] ; \n \n - getStatusText = ( ) = > \" Downloading from { 2 } { 0 : 0 . 00 } { 1 } ( unknown size ) \" . F ( dataReceived , \n + getStatusText = ( ) = > \" Downloading from { 2 } { 0 : 0 . 00 } { 1 } \" . F ( dataReceived , \n dataSuffix , \n downloadHost ? ? \" unknown host \" ) ; \n progressBar . Indeterminate = true ;", "msg": "Improve status line display for unknown - size downloads .\n"}
{"diff": "a / MediaBrowser . Server . Implementations / Sorting / AlbumArtistComparer . cs \n  b / MediaBrowser . Server . Implementations / Sorting / AlbumArtistComparer . cs \n \n - \ufeff using MediaBrowser . Controller . Entities ; \n + \ufeff using System . Linq ; \n + using MediaBrowser . Controller . Entities ; \n using MediaBrowser . Controller . Entities . Audio ; \n using MediaBrowser . Controller . Sorting ; \n using MediaBrowser . Model . Querying ; \n private string GetValue ( BaseItem x ) \n { \n var audio = x as Audio ; \n \n - return audio = = null ? string . Empty : audio . AlbumArtist ; \n + if ( audio ! = null ) \n + { \n + return audio . AlbumArtist ; \n + } \n + \n + var album = x as MusicAlbum ; \n + \n + if ( album ! = null ) \n + { \n + var song = album . RecursiveChildren \n + . OfType < Audio > ( ) \n + . FirstOrDefault ( i = > ! string . IsNullOrEmpty ( i . AlbumArtist ) ) ; \n + \n + if ( song ! = null ) \n + { \n + return song . AlbumArtist ; \n + } \n + } \n + \n + return null ; \n } \n \n / / / < summary >", "msg": "fixes - Add more sort orders to web client album page\n"}
{"diff": "a / ShareX / WorkerTask . cs \n  b / ShareX / WorkerTask . cs \n public static WorkerTask CreateDownloadUploadTask ( string url , TaskSettings taskS \n filename = URLHelpers . GetFileName ( filename ) ; \n filename = Helpers . GetValidFileName ( filename ) ; \n \n + if ( task . Info . TaskSettings . UploadSettings . FileUploadUseNamePattern ) \n + { \n + string ext = Path . GetExtension ( filename ) ; \n + filename = TaskHelpers . GetFilename ( task . Info . TaskSettings , ext ) ; \n + } \n + \n if ( string . IsNullOrEmpty ( filename ) ) \n { \n return null ;", "msg": "fixed : Use name pattern in url download & upload\n"}
{"diff": "a / src / NzbDrone . Console / ConsoleApp . cs \n  b / src / NzbDrone . Console / ConsoleApp . cs \n public static void Main ( string [ ] args ) \n try \n { \n var startupArgs = new StartupContext ( args ) ; \n - NzbDroneLogger . Register ( startupArgs , false , true ) ; \n + try \n + { \n + NzbDroneLogger . Register ( startupArgs , false , true ) ; \n + } \n + catch ( Exception ex ) \n + { \n + System . Console . WriteLine ( \" NLog Exception : \" + ex . ToString ( ) ) ; \n + throw ; \n + } \n Bootstrap . Start ( startupArgs , new ConsoleAlerts ( ) ) ; \n } \n catch ( SonarrStartupException ex )", "msg": "Added console logging in case NLog fails to initialize .\n"}
{"diff": "a / src / Features / Core / Portable / Diagnostics / EngineV2 / DiagnosticIncrementalAnalyzer . StateManager . cs \n  b / src / Features / Core / Portable / Diagnostics / EngineV2 / DiagnosticIncrementalAnalyzer . StateManager . cs \n public StateSet GetOrCreateStateSet ( Project project , DiagnosticAnalyzer analyzer \n / / / < / summary > \n public ImmutableArray < StateSet > CreateBuildOnlyProjectStateSet ( Project project ) \n { \n + if ( ! project . SupportsCompilation ) \n + { \n + / / languages which don ' t use our compilation model but diagnostic framework , \n + / / all their analyzer should be host analyzers . return all host analyzers \n + / / for the language \n + return _hostStates . GetOrCreateStateSets ( project . Language ) . ToImmutableArray ( ) ; \n + } \n + \n / / create project analyzer reference identity map \n var referenceIdentities = project . AnalyzerReferences . Select ( r = > _analyzerManager . GetAnalyzerReferenceIdentity ( r ) ) . ToSet ( ) ;", "msg": "tweak how we merge build and live errors for language such as F #\n"}
{"diff": "a / GitUI / FormRemotes . cs \n  b / GitUI / FormRemotes . cs \n private void LoadSshKeyClick ( object sender , EventArgs e ) \n } \n \n private void TestConnectionClick ( object sender , EventArgs e ) \n - { \n + { \n + System . Uri uri = new System . Uri ( Url . Text ) ; \n + string sshURL = \" \" ; \n + if ( uri . Scheme = = \" ssh \" ) \n + { \n + if ( ! string . IsNullOrEmpty ( uri . UserInfo ) ) \n + sshURL = uri . UserInfo + \" @ \" ; \n + sshURL + = uri . Host + \" : \" + uri . LocalPath . Substring ( 1 ) ; \n + } \n + else \n + sshURL = Url . Text ; \n Settings . Module . RunRealCmdDetached ( \n - \" cmd . exe \" , \n - string . Format ( \" / k \\ \" \\ \" { 0 } \\ \" - T \\ \" { 1 } \\ \" \\ \" \" , Settings . Plink , Url . Text ) ) ; \n + \" cmd . exe \" , \n + string . Format ( \" / k \\ \" \\ \" { 0 } \\ \" - T \\ \" { 1 } \\ \" \\ \" \" , Settings . Plink , sshURL ) ) ; \n } \n \n private void PruneClick ( object sender , EventArgs e )", "msg": "Fixed the Test Connection functionality of the Manage Remotes UI .\n"}
{"diff": "a / src / Compilers / Core / Portable / Operations / OperationKind . cs \n  b / src / Compilers / Core / Portable / Operations / OperationKind . cs \n public enum OperationKind \n AddressOfExpression = 0x203 , \n / / / < summary > Indicates an < see cref = \" IPointerIndirectionReferenceExpression \" / > . < / summary > \n PointerIndirectionReferenceExpression = 0x204 , \n + / / 0x205 is open for future use . \n / / / < summary > Indicates an < see cref = \" IIncrementExpression \" / > . < / summary > \n IncrementExpression = 0x206 ,", "msg": "Added comment that operationkind 0x205 is open for future usage .\n"}
{"diff": "a / SparkleShare / SparkleController . cs \n  b / SparkleShare / SparkleController . cs \n public void GenerateKeyPair ( ) \n process . StartInfo . UseShellExecute = false ; \n process . StartInfo . RedirectStandardOutput = true ; \n process . StartInfo . FileName = \" ssh - keygen \" ; \n - \n + \n / / - t is the crypto type \n / / - P is the password ( none ) \n / / - f is the file name to store the private key in \n process . StartInfo . Arguments = \" - t rsa - P \\ \" \\ \" - f \" + key_file_name ; \n - process . Start ( ) ; \n \n process . Exited + = delegate { \n SparkleHelpers . DebugInfo ( \" Config \" , \" Created private key ' \" + key_file_name + \" ' \" ) ; \n public void GenerateKeyPair ( ) \n File . Copy ( key_file_path + \" . pub \" , \n Path . Combine ( SparklePath , UserName + \" ' s key . txt \" ) ) ; \n } ; \n + \n + process . Start ( ) ; \n + process . WaitForExit ( ) ; \n } \n }", "msg": "controller : block on GenerateKeyPair . eliminates race condition on first setup\n"}
{"diff": "a / MonoGame . Framework . Content . Pipeline / Graphics / BitmapContent . cs \n  b / MonoGame . Framework . Content . Pipeline / Graphics / BitmapContent . cs \n public int Height \n { \n return height ; \n } \n - set \n + protected set \n { \n if ( value < = 0 ) \n throw new ArgumentOutOfRangeException ( \" height \" ) ; \n public int Width \n { \n return width ; \n } \n - set \n + protected set \n { \n if ( value < = 0 ) \n throw new ArgumentOutOfRangeException ( \" width \" ) ;", "msg": "Make BitmapContent Width and Height setters protected . Fixes .\n"}
{"diff": "a / src / EditorFeatures / CSharp / CompleteStatement / CompleteStatementCommandHandler . cs \n  b / src / EditorFeatures / CSharp / CompleteStatement / CompleteStatementCommandHandler . cs \n private static bool SemiColonIsMissing ( SyntaxNode currentNode ) \n case SyntaxKind . AddAccessorDeclaration : \n return ( ( AccessorDeclarationSyntax ) currentNode ) . SemicolonToken . IsMissing ; \n default : \n + / / At this point , the node should be empty or its children should not end with a semicolon . \n + Debug . Assert ( ! currentNode . ChildNodesAndTokens ( ) . Any ( ) \n + | | ! currentNode . ChildNodesAndTokens ( ) . Last ( ) . IsKind ( SyntaxKind . SemicolonToken ) ) ; \n return false ; \n } \n }", "msg": "Add an assertion that SemiColonIsMissing explicitly lists all cases\n"}
{"diff": "a / SparkleLib / SparkleHelpers . cs \n  b / SparkleLib / SparkleHelpers . cs \n \n \n using System ; \n using System . IO ; \n + using System . Text . RegularExpressions ; \n \n namespace SparkleLib { \n \n public static DateTime UnixTimestampToDateTime ( int timestamp ) \n DateTime unix_epoch = new DateTime ( 1970 , 1 , 1 , 0 , 0 , 0 , 0 ) ; \n return unix_epoch . AddSeconds ( timestamp ) ; \n } \n + \n + / / Gets the relative path of two hirarchical absolute paths \n + public static string DiffPaths ( string target , string source ) { \n + return target . Replace ( source + Path . DirectorySeparatorChar , \" \" ) ; \n + } \n } \n }", "msg": "Added a new helper function for getting a relative - to - repostory path\n"}
{"diff": "a / mRemoteV1 / UI / Window / ConnectionTreeWindow . cs \n  b / mRemoteV1 / UI / Window / ConnectionTreeWindow . cs \n private void SetModelUpdateHandlers ( ) \n { \n _puttySessionsManager . PuttySessionsCollectionChanged + = ( sender , args ) = > RefreshTreeObjects ( GetRootPuttyNodes ( ) . ToList ( ) ) ; \n ConnectionTreeModel . CollectionChanged + = HandleCollectionChanged ; \n + ConnectionTreeModel . PropertyChanged + = HandleCollectionPropertyChanged ; \n + } \n + \n + private void HandleCollectionPropertyChanged ( object sender , PropertyChangedEventArgs propertyChangedEventArgs ) \n + { \n + if ( propertyChangedEventArgs . PropertyName ! = \" Name \" ) return ; \n + var senderAsConnectionInfo = sender as ConnectionInfo ; \n + if ( senderAsConnectionInfo ! = null ) \n + RefreshTreeObject ( senderAsConnectionInfo ) ; \n } \n \n private void PopulateTreeView ( )", "msg": "Added property changed event handler to the connection tree . Model property updates will now be immediately reflected by the tree view\n"}
{"diff": "a / osu . Game / Screens / Play / HUDOverlay . cs \n  b / osu . Game / Screens / Play / HUDOverlay . cs \n protected override void Update ( ) \n { \n base . Update ( ) ; \n \n - / / for now align with the accuracy counter . eventually this will be user customisable . \n + / / HACK : for now align with the accuracy counter . \n + / / this is done for the sake of hacky legacy skins which extend the health bar to take up the full screen area . \n + / / it only works with the default skin due to padding offsetting it * just enough * to coexist . \n topRightElements . Y = ToLocalSpace ( AccuracyCounter . Drawable . ScreenSpaceDrawQuad . BottomRight ) . Y ; \n \n bottomRightElements . Y = - Progress . Height ;", "msg": "Update comment to make it clear this is a hack\n"}
{"diff": "a / src / Avalonia . Controls / Application . cs \n  b / src / Avalonia . Controls / Application . cs \n public class Application : AvaloniaObject , IDataContextProvider , IGlobalDataTemp \n / / / Defines the < see cref = \" DataContext \" / > property . \n / / / < / summary > \n public static readonly StyledProperty < object > DataContextProperty = \n - AvaloniaProperty . Register < Application , object > ( \n - nameof ( DataContext ) ) ; \n + StyledElement . DataContextProperty . AddOwner < Application > ( ) ; \n \n / / / < inheritdoc / > \n public event EventHandler < ResourcesChangedEventArgs > ResourcesChanged ;", "msg": "Application class uses AddOwner instead of making its own version of datacontext property .\n"}
{"diff": "a / osu . Game / Online / API / APIDownloadRequest . cs \n  b / osu . Game / Online / API / APIDownloadRequest . cs \n public abstract class APIDownloadRequest : APIRequest \n { \n private string filename ; \n \n + / / / < summary > \n + / / / Sets the extension of the file outputted by this request . \n + / / / < / summary > \n + protected virtual string FileExtension { get ; } = @ \" . tmp \" ; \n + \n protected override WebRequest CreateWebRequest ( ) \n { \n - var request = new FileWebRequest ( filename = Path . GetTempFileName ( ) , Uri ) ; \n + var file = Path . GetTempFileName ( ) ; \n + \n + File . Move ( file , filename = Path . ChangeExtension ( file , FileExtension ) ) ; \n + \n + var request = new FileWebRequest ( filename , Uri ) ; \n request . DownloadProgress + = request_Progress ; \n return request ; \n }", "msg": "Add ability to change the flie extension of API download requests\n"}
{"diff": "a / src / Workspaces / CoreTest / SolutionTests / SolutionTests . cs \n  b / src / Workspaces / CoreTest / SolutionTests / SolutionTests . cs \n public void TestRecoverableSyntaxTreeCSharp ( ) \n } \n \n [ MethodImpl ( MethodImplOptions . NoInlining ) ] \n - [ Fact , Trait ( Traits . Feature , Traits . Features . Workspace ) ] \n + [ Fact ( Skip = \" https : / / github . com / dotnet / roslyn / issues / 13433 \" ) , Trait ( Traits . Feature , Traits . Features . Workspace ) ] \n public void TestRecoverableSyntaxTreeVisualBasic ( ) \n { \n var pid = ProjectId . CreateNewId ( ) ;", "msg": "Skip flaky SolutionTests . TestRecoverableSyntaxTreeVisualBasic until is resolved .\n"}
{"diff": "a / OpenRA . Game / Network / Order . cs \n  b / OpenRA . Game / Network / Order . cs \n public static bool HasField ( this OrderFields of , OrderFields f ) \n } \n } \n \n + public sealed class _Order \n + { \n + public string OrderString ; \n + public Actor Subject ; \n + public Actor TargetActor ; \n + public int2 TargetLocation ; \n + public string TargetString ; \n + public bool Queued ; \n + public int2 ExtraLocation ; \n + \n + public static implicit operator Order ( _Order o ) \n + { \n + return new Order ( o . OrderString , \n + o . Subject , \n + o . TargetActor , \n + o . TargetLocation , \n + o . TargetString , \n + o . Queued , \n + o . ExtraLocation ) ; \n + } \n + } \n + \n public sealed class Order \n { \n public readonly string OrderString ;", "msg": "experiment - - _Order is a mutable builder - object for Order , implicitly convertible\n"}
{"diff": "a / SignalR . AspNet / AspNetResponse . cs \n  b / SignalR . AspNet / AspNetResponse . cs \n public string ContentType \n \n public Task WriteAsync ( string data ) \n { \n - _context . Response . Write ( data ) ; \n - return TaskAsyncHelper . Empty ; \n + return TaskAsyncHelper . FromMethod ( ( response , value ) = > response . Write ( value ) , _context . Response , data ) ; \n } \n \n public Task EndAsync ( string data )", "msg": "Instead of returning an empty Task from the AspNetResponse . WriteAsync method , return a task that represents the sync write operation .\n"}
{"diff": "a / src / ServiceStack . Common / ReflectionExtensions . cs \n  b / src / ServiceStack . Common / ReflectionExtensions . cs \n \n using System ; \n + using System . Diagnostics ; \n + using System . Linq ; \n using System . Reflection ; \n using ServiceStack . Common . Utils ; \n \n public static bool IsDynamic ( this Assembly assembly ) \n # endif \n } \n \n + public static bool IsDebugBuild ( this Assembly assembly ) \n + { \n + return assembly . GetCustomAttributes ( false ) \n + . OfType < DebuggableAttribute > ( ) \n + . Select ( attr = > attr . IsJITTrackingEnabled ) \n + . FirstOrDefault ( ) ; \n + } \n } \n }", "msg": "Automatically set Config . DebugMode based on debug build of AppHost assembly .\n"}
{"diff": "a / GitUI / FormCommit . cs \n  b / GitUI / FormCommit . cs \n private void CommitMessageToolStripMenuItemDropDownOpening ( object sender , EventA \n AddCommitMessageToMenu ( Module . GetPreviousCommitMessage ( 1 ) ) ; \n AddCommitMessageToMenu ( Module . GetPreviousCommitMessage ( 2 ) ) ; \n AddCommitMessageToMenu ( Module . GetPreviousCommitMessage ( 3 ) ) ; \n + \n + commitMessageToolStripMenuItem . DropDownItems . AddRange ( new ToolStripItem [ ] { \n + toolStripMenuItem1 , \n + generateListOfChangesInSubmodulesChangesToolStripMenuItem } ) ; \n } \n \n private void AddCommitMessageToMenu ( string commitMessage )", "msg": "Menu item \" Generate list of changes in submodules \" fixed\n"}
{"diff": "a / src / Microsoft . AspNet . Mvc . Core / Rendering / Html / HtmlHelper . cs \n  b / src / Microsoft . AspNet . Mvc . Core / Rendering / Html / HtmlHelper . cs \n protected virtual HtmlString GenerateDisplayText ( ModelMetadata metadata ) \n / / parameters . Also reachable in the even - more - unusual case that user called another BeginForm ( ) \n / / overload with default argument values . \n var request = ViewContext . HttpContext . Request ; \n - formAction = request . PathBase . Add ( request . Path ) . Add ( request . QueryString ) ; \n + formAction = request . PathBase + request . Path + request . QueryString ; \n } \n else \n {", "msg": "Use ` + ` rather than explicit ` PathString . Add ( ) ` overloads\n"}
{"diff": "a / osu . Game . Rulesets . Mania / UI / ManiaPlayfield . cs \n  b / osu . Game . Rulesets . Mania / UI / ManiaPlayfield . cs \n \n using osu . Framework . Graphics . Containers ; \n using System ; \n using System . Collections . Generic ; \n + using System . Linq ; \n using osu . Game . Rulesets . Mania . Beatmaps ; \n using osu . Game . Rulesets . Mania . Objects ; \n using osu . Game . Rulesets . Objects . Drawables ; \n public class ManiaPlayfield : ScrollingPlayfield \n { \n private readonly List < ManiaStage > stages = new List < ManiaStage > ( ) ; \n \n + public override bool ReceivePositionalInputAt ( Vector2 screenSpacePos ) = > stages . Any ( s = > s . ReceivePositionalInputAt ( screenSpacePos ) ) ; \n + \n public ManiaPlayfield ( List < StageDefinition > stageDefinitions ) \n { \n if ( stageDefinitions = = null )", "msg": "Fix mania placement blueprints appearing outside valid stage placement area\n"}
{"diff": "a / src / Nancy / StaticConfiguration . cs \n  b / src / Nancy / StaticConfiguration . cs \n var assembliesInDebug \n [ Description ( \" Enable request tracing . \" ) ] \n public static bool EnableRequestTracing { get ; set ; } \n \n + / / / < summary > \n + / / / Gets or sets a value indicating whether or not to disable request stream switching \n + / / / < / summary > \n + public static bool ? DisableRequestStreamSwitching { get ; set ; } \n + \n public static class Caching \n { \n private static bool ? enableRuntimeViewDiscovery ;", "msg": "ADDED : property to StaticConfiguration that allows request stream switching configuration\n"}
{"diff": "a / ICSharpCode . Decompiler / IL / ControlFlow / SwitchAnalysis . cs \n  b / ICSharpCode . Decompiler / IL / ControlFlow / SwitchAnalysis . cs \n bool AnalyzeBlock ( Block block , LongSet inputValues , bool tailOnly = false ) \n if ( ! ( tailOnly | | block . Instructions . Count = = 2 ) ) \n return false ; \n trueValues = trueValues . IntersectWith ( inputValues ) ; \n + if ( trueValues . SetEquals ( inputValues ) | | trueValues . IsEmpty ) \n + return false ; \n Block trueBlock ; \n if ( trueInst . MatchBranch ( out trueBlock ) & & AnalyzeBlock ( trueBlock , trueValues ) ) { \n / / OK , true block was further analyzed .", "msg": "Abort SwitchAnalysis on duplicate condition ( redundant code )\n"}
{"diff": "a / Src / Compilers / Core / Source / Serialization / ConcurrentRecordingObjectBinder . cs \n  b / Src / Compilers / Core / Source / Serialization / ConcurrentRecordingObjectBinder . cs \n public override void Record ( object instance ) \n { \n if ( HasConstructor ( type ) ) \n { \n - Debug . Assert ( this . typeMap . ContainsKey ( new TypeKey ( type . GetTypeInfo ( ) . Assembly . FullName , type . FullName ) ) ) ; \n return ; \n }", "msg": "removed assert since there is a chance where entry in the typemap might not be there yet in concurrent case\n"}
{"diff": "a / src / System . Management . Automation / DscSupport / CimDSCParser . cs \n  b / src / System . Management . Automation / DscSupport / CimDSCParser . cs \n public static void Initialize ( Collection < Exception > errors , List < string > moduleP \n var dscConfigurationDirectory = Environment . GetEnvironmentVariable ( \" DSC_HOME \" ) ? ? \n \" / etc / opt / omi / conf / dsc / configuration \" ; \n \n - Debug . Assert ( Directory . Exists ( dscConfigurationDirectory ) , dscConfigurationDirectory + \" does not exist . \" ) ; \n + if ( ! Directory . Exists ( dscConfigurationDirectory ) ) \n + { \n + throw new DirectoryNotFoundException ( \" Unable to find DSC schema store at \" + dscConfigurationDirectory + \" . Please ensure PS DSC for Linux is installed . \" ) ; \n + } \n \n var resourceBaseFile = Path . Combine ( dscConfigurationDirectory , \" baseregistration / baseresource . schema . mof \" ) ; \n ImportClasses ( resourceBaseFile , s_defaultModuleInfoForResource , errors ) ;", "msg": "Adding error message letting the user know they need to install PSDSC for Linux\n"}
{"diff": "a / GitUI / UserControls / RevisionGrid . Designer . cs \n  b / GitUI / UserControls / RevisionGrid . Designer . cs \n private void InitializeComponent ( ) \n / / copyToClipboardToolStripMenuItem \n / / \n this . copyToClipboardToolStripMenuItem . DropDownItems . AddRange ( new System . Windows . Forms . ToolStripItem [ ] { \n + this . hashToolStripMenuItem , \n this . messageToolStripMenuItem , \n this . authorToolStripMenuItem , \n this . dateToolStripMenuItem , \n - this . hashToolStripMenuItem , \n this . toolStripSeparator6 , \n this . branchNameToolStripMenuItem , \n this . tagToolStripMenuItem } ) ;", "msg": "revision grid context menu : copy to clipboard : move \" Commit hash \" to top\n"}
{"diff": "a / src / Libraries / Nop . Services / Catalog / ProductService . cs \n  b / src / Libraries / Nop . Services / Catalog / ProductService . cs \n public virtual IList < TierPrice > GetTierPrices ( Product product , Customer customer \n return GetTierPricesByProduct ( product . Id ) \n . OrderBy ( price = > price . Quantity ) \n . FilterByStore ( storeId ) \n - . FilterByCustomerRole ( _catalogSettings . IgnoreAcl ? Array . Empty < int > ( ) : _customerService . GetCustomerRoleIds ( customer ) ) \n + . FilterByCustomerRole ( _customerService . GetCustomerRoleIds ( customer ) ) \n . FilterByDate ( ) \n . RemoveDuplicatedQuantities ( ) \n . ToList ( ) ;", "msg": ", Fixed problem on filtering by customer roles in tier prices\n"}
{"diff": "a / src / IdentityServer4 / src / Endpoints / Results / ConsentPageResult . cs \n  b / src / IdentityServer4 / src / Endpoints / Results / ConsentPageResult . cs \n public Task ExecuteAsync ( HttpContext context ) \n { \n / / this converts the relative redirect path to an absolute one if we ' re \n / / redirecting to a different server \n - returnUrl = context . GetIdentityServerBaseUrl ( ) . EnsureTrailingSlash ( ) + returnUrl . RemoveLeadingSlash ( ) ; \n + returnUrl = context . GetIdentityServerHost ( ) . EnsureTrailingSlash ( ) + returnUrl . RemoveLeadingSlash ( ) ; \n } \n \n var url = consentUrl . AddQueryString ( _options . UserInteraction . ConsentReturnUrlParameter , returnUrl ) ;", "msg": "ids4 configured to use external ConsentUrl duplicates path in ReturnUrl\n"}
{"diff": "a / GitUI / FormSettings . cs \n  b / GitUI / FormSettings . cs \n private bool CheckGitExtensionsInstall ( ) \n \n private static IEnumerable < string > GetWindowsCommandLocations ( ) \n { \n + yield return @ \" C : \\ cygwin \\ bin \\ git . exe \" ; \n yield return @ \" C : \\ cygwin \\ bin \\ git \" ; \n yield return GetRegistryValue ( Registry . LocalMachine , \" SOFTWARE \\ \\ Microsoft \\ \\ Windows \\ \\ CurrentVersion \\ \\ Uninstall \\ \\ Git_is1 \" , \" InstallLocation \" ) + \" bin \\ \\ git . exe \" ; \n yield return @ \" c : \\ Program Files ( x86 ) \\ Git \\ bin \\ git . exe \" ; \n private static IEnumerable < string > GetWindowsCommandLocations ( ) \n yield return @ \" c : \\ Program Files \\ Git \\ cmd \\ git . cmd \" ; \n yield return \" git \" ; \n yield return \" git . cmd \" ; \n + yield return @ \" C : \\ msysgit \\ bin \\ git . exe \" ; \n + yield return @ \" C : \\ msysgit \\ cmd \\ git . cmd \" ; \n } \n \n private static bool SolveGitCommand ( )", "msg": "Added several common paths to searchpath for git . exe .\n"}
{"diff": "a / src / NzbDrone . Core / DecisionEngine / DownloadDecisionMaker . cs \n  b / src / NzbDrone . Core / DecisionEngine / DownloadDecisionMaker . cs \n private IEnumerable < DownloadDecision > GetDecisions ( List < ReleaseInfo > reports , Se \n \n if ( remoteEpisode . Series ! = null ) \n { \n - remoteEpisode . DownloadAllowed = true ; \n + remoteEpisode . DownloadAllowed = remoteEpisode . Episodes . Any ( ) ; \n decision = GetDecisionForReport ( remoteEpisode , searchCriteria ) ; \n } \n else", "msg": "Manual search no longer permits downloading releases for which we can ' t find an episode until we can fix the association logic .\n"}
{"diff": "a / src / ServiceStack / Host / Handlers / StaticFileHandler . cs \n  b / src / ServiceStack / Host / Handlers / StaticFileHandler . cs \n public override void ProcessRequest ( HttpContextBase context ) \n private DateTime DefaultFileModified { get ; set ; } \n private string DefaultFilePath { get ; set ; } \n private byte [ ] DefaultFileContents { get ; set ; } \n + public IVirtualNode VirtualNode { get ; set ; } \n \n / / / < summary > \n / / / Keep default file contents in - memory \n public override void ProcessRequest ( IRequest request , IResponse response , string \n \n response . EndHttpHandlerRequest ( skipClose : true , afterHeaders : r = > \n { \n - var node = request . GetVirtualNode ( ) ; \n + var node = this . VirtualNode ? ? request . GetVirtualNode ( ) ; \n var file = node as IVirtualFile ; \n if ( file = = null ) \n {", "msg": "Allow StaticFileHandler to be reusable by specifying VirtualNode to upload\n"}
{"diff": "a / NzbDrone . Core / Providers / RootDirProvider . cs \n  b / NzbDrone . Core / Providers / RootDirProvider . cs \n public virtual RootDir Add ( RootDir rootDir ) \n var id = _database . Insert ( rootDir ) ; \n rootDir . Id = Convert . ToInt32 ( id ) ; \n rootDir . FreeSpace = _diskProvider . FreeDiskSpace ( new DirectoryInfo ( rootDir . Path ) ) ; \n + rootDir . UnmappedFolders = GetUnmappedFolders ( rootDir . Path ) ; \n \n return rootDir ; \n }", "msg": "add root dir now returns list of unmapped folders .\n"}
{"diff": "a / samples / ControlCatalog / Pages / DataGridPage . xaml . cs \n  b / samples / ControlCatalog / Pages / DataGridPage . xaml . cs \n public DataGridPage ( ) \n this . InitializeComponent ( ) ; \n \n var dataGridSortDescription = DataGridSortDescription . FromPath ( nameof ( Country . Region ) , ListSortDirection . Ascending , new ReversedStringComparer ( ) ) ; \n - var colelctionView1 = new DataGridCollectionView ( Countries . All ) ; \n + var collectionView1 = new DataGridCollectionView ( Countries . All ) ; \n colelctionView1 . SortDescriptions . Add ( dataGridSortDescription ) ; \n var dg1 = this . FindControl < DataGrid > ( \" dataGrid1 \" ) ; \n dg1 . IsReadOnly = true ;", "msg": "Update samples / ControlCatalog / Pages / DataGridPage . xaml . cs\n"}
{"diff": "a / osu . Game . Rulesets . Taiko / Mods / TaikoModEasy . cs \n  b / osu . Game . Rulesets . Taiko / Mods / TaikoModEasy . cs \n namespace osu . Game . Rulesets . Taiko . Mods \n { \n public class TaikoModEasy : ModEasy \n { \n - public override string Description = > @ \" Beats move slower , less accuracy required ! \" ; \n + public override string Description = > @ \" Beats move slower , and less accuracy required ! \" ; \n } \n }", "msg": "Reword taiko easy mod description to fit others better\n"}
{"diff": "a / CefSharp . WinForms / ChromiumWebBrowser . cs \n  b / CefSharp . WinForms / ChromiumWebBrowser . cs \n protected override void OnHandleCreated ( EventArgs e ) \n } \n \n protected override void OnHandleDestroyed ( EventArgs e ) \n + { \n + if ( ! designMode ) \n + { \n + / / NOTE : Had to move the code out of this function otherwise the designer would crash \n + OnHandleDestroyedInternal ( ) ; \n + } \n + \n + base . OnHandleDestroyed ( e ) ; \n + } \n + \n + [ MethodImpl ( MethodImplOptions . NoInlining ) ] \n + private void OnHandleDestroyedInternal ( ) \n { \n / / When the Control is being Recreated then we ' ll park \n / / the browser ( set to a temp parent ) and assign to \n protected override void OnHandleDestroyed ( EventArgs e ) \n \n NativeMethodWrapper . SetWindowParent ( hwnd , parkingControl . Handle ) ; \n } \n - \n - base . OnHandleDestroyed ( e ) ; \n } \n \n / / / < summary >", "msg": "WinForms - OnHandleDestroyed directly references CefSharp . Core crashing Designer\n"}
{"diff": "a / Duplicati / Library / Main / Operation / ListChangesHandler . cs \n  b / Duplicati / Library / Main / Operation / ListChangesHandler . cs \n public void Run ( string baseVersion , string compareVersion , IEnumerable < string > f \n var filter = Library . Utility . JoinedFilterExpression . Join ( new Library . Utility . FilterExpression ( filterstrings ) , compositefilter ) ; \n \n var useLocalDb = ! m_options . NoLocalDb & & System . IO . File . Exists ( m_options . Dbpath ) ; \n - baseVersion = string . IsNullOrEmpty ( baseVersion ) ? \" 0 \" : baseVersion ; \n - compareVersion = string . IsNullOrEmpty ( compareVersion ) ? \" 1 \" : compareVersion ; \n + baseVersion = string . IsNullOrEmpty ( baseVersion ) ? \" 1 \" : baseVersion ; \n + compareVersion = string . IsNullOrEmpty ( compareVersion ) ? \" 0 \" : compareVersion ; \n \n long baseVersionIndex = - 1 ; \n long compareVersionIndex = - 1 ;", "msg": "Swapped default compare entries so the output looks more like that from a backup operation\n"}
{"diff": "a / Plugins / BuildServerIntegration / VstsAndTfsIntegration / TfsApiHelper . cs \n  b / Plugins / BuildServerIntegration / VstsAndTfsIntegration / TfsApiHelper . cs \n private async Task < IEnumerable < BuildDefinition > > GetBuildDefinitionsAsync ( string \n { \n var buildDefs = new List < BuildDefinition > ( ) ; \n \n - using ( var response = await _httpClient . GetAsync ( $ \" _apis / build / definitions \" ) ) \n + using ( var response = await _httpClient . GetAsync ( $ \" _apis / build / definitions ? api - version = 2 . 0 \" ) ) \n { \n response . EnsureSuccessStatusCode ( ) ; \n string json = await response . Content . ReadAsStringAsync ( ) ;", "msg": "VstsAndTfsIntegration : Explicitly request a REST API version .\n"}
{"diff": "a / src / BenchmarkDotNet / Extensions / ReflectionExtensions . cs \n  b / src / BenchmarkDotNet / Extensions / ReflectionExtensions . cs \n internal static class ReflectionExtensions \n / / / < / summary > \n internal static string GetCorrectCSharpTypeName ( this Type type , bool includeNamespace = true , bool includeGenericArgumentsNamespace = true ) \n { \n - while ( ! ( type . IsPublic | | type . IsNestedPublic ) ) \n - type = type . BaseType ; \n + if ( ! type . Name . EndsWith ( \" & \" ) ) \n + while ( ! ( type . IsPublic | | type . IsNestedPublic ) & & type . BaseType ! = null ) \n + type = type . BaseType ; \n \n / / the reflection is missing information about types passed by ref ( ie ref ValuTuple < int > is reported as NON generic type ) \n if ( type . IsByRef & & ! type . IsGenericType & & type . Name . Contains ( ' ` ' ) )", "msg": "Handle private types in GetCorrectCSharpTypeName ( part 2 ) , fixes\n"}
{"diff": "a / src / Skia / Avalonia . Skia / SkiaOptions . cs \n  b / src / Skia / Avalonia . Skia / SkiaOptions . cs \n public class SkiaOptions \n / / / < summary > \n / / / The maximum number of bytes for video memory to store textures and resources . \n / / / < / summary > \n - public long ? MaxGpuResourceSizeBytes { get ; set ; } \n + public long ? MaxGpuResourceSizeBytes { get ; set ; } = 1024 * 600 * 4 * 12 ; / / ~ 28mb 12x 1024 x 600 textures . \n } \n }", "msg": "set a sensible cache size for skia . . based on what flutter uses .\n"}
{"diff": "a / osu . Game / Overlays / Notifications / ProgressNotification . cs \n  b / osu . Game / Overlays / Notifications / ProgressNotification . cs \n public string Text \n } \n } \n \n + public string CompletionText { get ; set ; } = \" Task has completed ! \" ; \n + \n public float Progress \n { \n get { return progressBar . Progress ; } \n public virtual ProgressNotificationState State \n protected virtual Notification CreateCompletionNotification ( ) = > new ProgressCompletionNotification \n { \n Activated = CompletionClickAction , \n - Text = \" Task has completed ! \" \n + Text = CompletionText \n } ; \n \n protected virtual void Completed ( )", "msg": "Add the ability to change what text is displayed when a ProgressNotification finishes its task .\n"}
{"diff": "a / src / Nancy . Testing / BrowserContext . cs \n  b / src / Nancy . Testing / BrowserContext . cs \n public void Body ( string body ) \n / / / < / summary > \n / / / < param name = \" body \" > A stream that should be used as the HTTP request body . < / param > \n / / / < param name = \" contentType \" > Content type of the HTTP request body . Defaults to ' application / octet - stream ' < / param > \n - public void Body ( Stream body , string contentType = \" application / octet - stream \" ) \n + public void Body ( Stream body , string contentType = null ) \n { \n this . Values . Body = body ; \n - this . Header ( \" Content - Type \" , contentType ) ; \n + this . Header ( \" Content - Type \" , contentType ? ? \" application / octet - stream \" ) ; \n } \n \n / / / < summary >", "msg": "Changing body method to use optional parameter set to null , added back null check\n"}
{"diff": "a / Duplicati / Library / Utility / TempFile . cs \n  b / Duplicati / Library / Utility / TempFile . cs \n public static TempFile CreateWritePrefix ( string prefix ) \n return new TempFile ( System . IO . Path . Combine ( TempFolder . SystemTempPath , prefix + GenerateUniqueName ( ) ) ) ; \n } \n \n - # region IDisposable Members \n - \n - public void Dispose ( ) \n + protected void Dispose ( bool disposing ) \n { \n + if ( disposing ) \n + GC . SuppressFinalize ( this ) ; \n + \n try \n { \n if ( ! m_protect & & m_path ! = null & & System . IO . File . Exists ( m_path ) ) \n public void Dispose ( ) \n { \n } \n } \n + \n + # region IDisposable Members \n + \n + public void Dispose ( ) \n + { \n + Dispose ( true ) ; \n + } \n \n # endregion \n + \n + ~ TempFile ( ) \n + { \n + Dispose ( false ) ; \n + } \n \n / / / < summary > \n / / / Swaps two instances of temporary files , equivalent to renaming the files but requires no IO", "msg": "Added correct usage of temporary files for disposing without having a using directive\n"}
{"diff": "a / src / ServiceStack / Auth / FacebookAuthProvider . cs \n  b / src / ServiceStack / Auth / FacebookAuthProvider . cs \n public override object Authenticate ( IServiceBase authService , IAuthSession sessi \n var tokens = Init ( authService , ref session , request ) ; \n var httpRequest = authService . Request ; \n \n - var error = httpRequest . QueryString [ \" error \" ] ; \n + var error = httpRequest . QueryString [ \" error_code \" ] ; \n var hasError = ! error . IsNullOrEmpty ( ) ; \n if ( hasError ) \n { \n Log . Error ( \" Facebook error callback . { 0 } \" . Fmt ( httpRequest . QueryString ) ) ; \n return authService . Redirect ( session . ReferrerUrl ) ; \n - } \n - \n + } \n + \n var code = httpRequest . QueryString [ \" code \" ] ; \n var isPreAuthCallback = ! code . IsNullOrEmpty ( ) ; \n if ( ! isPreAuthCallback )", "msg": "updated query string parameter name for error handler in FacebookAuthProvider\n"}
{"diff": "a / mcs / class / System . Drawing / System . Drawing / ColorTranslator . cs \n  b / mcs / class / System . Drawing / System . Drawing / ColorTranslator . cs \n private ColorTranslator ( ) \n public static Color FromHtml ( string htmlColor ) \n { \n if ( ( htmlColor = = null ) | | ( htmlColor . Length = = 0 ) ) \n - return Color . FromArgb ( 0 , 0 , 0 , 0 ) ; \n + return Color . Empty ; \n \n switch ( htmlColor . ToLower ( ) ) { \n case \" buttonface \" :", "msg": "ColorTranslator . cs : Use ColorEmpty instead of creating a new Color instance .\n"}
{"diff": "a / src / mono / mono / tests / pinvoke3 . cs \n  b / src / mono / mono / tests / pinvoke3 . cs \n class Derived : Base { \n var m = typeof ( Marshal ) . GetMethod ( \" PtrToStringAnsi \" , new Type [ ] { typeof ( IntPtr ) } ) ; \n \n return mono_test_marshal_icall_delegate ( ( IcallDelegate ) Delegate . CreateDelegate ( typeof ( IcallDelegate ) , m ) ) ; \n - Console . WriteLine ( m ) ; \n - return 0 ; \n } \n }", "msg": "[ runtime ] Remove some dead test code added by mono / mono @ c736aba5c94c20e6faad6b736f8e3a834e26d95f .\n"}
{"diff": "a / MonoGame . Framework / iOS / iOSGameView . cs \n  b / MonoGame . Framework / iOS / iOSGameView . cs \n private void CreateFramebuffer ( ) \n / / to go away someday . \n gds . GraphicsDevice . glFramebuffer = _framebuffer ; \n } \n + \n + Threading . BackgroundContext = new MonoTouch . OpenGLES . EAGLContext ( ctx . EAGLContext . API , ctx . EAGLContext . ShareGroup ) ; \n } \n \n private void DestroyFramebuffer ( )", "msg": "Fixed null reference to Threading . BackgroundContext . . . ?\n"}
{"diff": "a / Jellyfin . Drawing . Skia / SkiaEncoder . cs \n  b / Jellyfin . Drawing . Skia / SkiaEncoder . cs \n internal static SKImage ResizeImage ( SKBitmap source , SKImageInfo targetInfo , boo \n \n var kernel = new float [ 9 ] \n { \n - 0 , - . 1f , 0 , \n - - . 1f , 1 . 4f , - . 1f , \n - 0 , - . 1f , 0 , \n + 0 , - . 1f , 0 , \n + - . 1f , 1 . 4f , - . 1f , \n + 0 , - . 1f , 0 , \n } ; \n \n var kernelSize = new SKSizeI ( 3 , 3 ) ;", "msg": "Update Jellyfin . Drawing . Skia / SkiaEncoder . cs indentation .\n"}
{"diff": "a / mcs / tools / xbuild / LoggerInfo . cs \n  b / mcs / tools / xbuild / LoggerInfo . cs \n static string GetLoggerTypeName ( string assemblyName ) \n if ( HasAssemblyInfo ( assemblyName ) ) \n loggerAssembly = Assembly . Load ( assemblyName ) ; \n else if ( File . Exists ( assemblyName ) ) \n - loggerAssembly = Assembly . LoadFile ( assemblyName ) ; \n + loggerAssembly = Assembly . LoadFrom ( assemblyName ) ; \n \n if ( loggerAssembly = = null ) \n return null ;", "msg": "Use LoadFrom instead LoadFile for load logger type .\n"}
{"diff": "a / Terminal . Gui / Core . cs \n  b / Terminal . Gui / Core . cs \n \n using System . Threading ; \n using System . Linq ; \n using NStack ; \n + using System . ComponentModel ; \n \n namespace Terminal . Gui { \n \n static public RunState Begin ( Toplevel toplevel ) \n var rs = new RunState ( toplevel ) ; \n \n Init ( ) ; \n + if ( toplevel is ISupportInitializeNotification initializableNotification & & \n + ! initializableNotification . IsInitialized ) { \n + initializableNotification . BeginInit ( ) ; \n + initializableNotification . EndInit ( ) ; \n + } else if ( toplevel is ISupportInitialize initializable ) { \n + initializable . BeginInit ( ) ; \n + initializable . EndInit ( ) ; \n + } \n toplevels . Push ( toplevel ) ; \n Current = toplevel ; \n Driver . PrepareToRun ( MainLoop , ProcessKeyEvent , ProcessMouseEvent ) ;", "msg": "Add support for ISupportInitialize / ISupportInitializeNotification for UIs ( )\n"}
{"diff": "a / Emby . Server . Implementations / Networking / NetworkManager . cs \n  b / Emby . Server . Implementations / Networking / NetworkManager . cs \n private static IEnumerable < PhysicalAddress > GetMacAddressesInternal ( ) \n = > NetworkInterface . GetAllNetworkInterfaces ( ) \n . Where ( i = > i . NetworkInterfaceType ! = NetworkInterfaceType . Loopback ) \n . Select ( x = > x . GetPhysicalAddress ( ) ) \n - . Where ( x = > x ! = null & & x ! = PhysicalAddress . None ) ; \n + . Where ( x = > ! x . Equals ( PhysicalAddress . None ) ) ; \n \n private void OnNetworkAvailabilityChanged ( object sender , NetworkAvailabilityEventArgs e ) \n {", "msg": "Update Emby . Server . Implementations / Networking / NetworkManager . cs\n"}
{"diff": "a / src / Compilers / CSharp / Portable / Binder / Semantics / OverloadResolution / OverloadResolution . cs \n  b / src / Compilers / CSharp / Portable / Binder / Semantics / OverloadResolution / OverloadResolution . cs \n private static bool OverloadResolutionResultIsValid < TMember > ( ArrayBuilder < Member \n ref HashSet < DiagnosticInfo > useSiteDiagnostics ) \n { \n Debug . Assert ( funcPtrBuilder . Count = = 1 ) ; \n + Debug . Assert ( funcPtrBuilder [ 0 ] . Arity = = 0 ) ; \n var typeArgumentsBuilder = ArrayBuilder < TypeWithAnnotations > . GetInstance ( ) ; \n \n - / / PROTOTYPE ( func - ptr ) : Handle dynamic \n AddMemberToCandidateSet ( \n funcPtrBuilder [ 0 ] , \n overloadResolutionResult . ResultsBuilder ,", "msg": "Function pointer method symbols can never have type parameters , so no dynamic inference for type arguments needs to happen .\n"}
{"diff": "a / mRemoteV1 / Config / Serializers / MiscSerializers / ActiveDirectoryDeserializer . cs \n  b / mRemoteV1 / Config / Serializers / MiscSerializers / ActiveDirectoryDeserializer . cs \n \n using mRemoteNG . App ; \n using mRemoteNG . Config . Import ; \n using mRemoteNG . Connection ; \n + using mRemoteNG . Connection . Protocol ; \n using mRemoteNG . Container ; \n using mRemoteNG . Tools ; \n using mRemoteNG . Tree ; \n private void DeserializeConnection ( DirectoryEntry directoryEntry , ContainerInfo \n { \n Name = displayName , \n Hostname = hostName , \n - Description = description \n + Description = description , \n + Protocol = ProtocolType . RDP \n } ; \n \n parentContainer . AddChild ( newConnectionInfo ) ;", "msg": "set protocol type when importing from ad , possible fix for\n"}
{"diff": "a / GitUI / FormStatus . cs \n  b / GitUI / FormStatus . cs \n private void FormStatus_Load ( object sender , EventArgs e ) \n { \n Abort . Visible = false ; \n } \n + StartPosition = FormStartPosition . CenterParent ; \n RestorePosition ( \" process \" ) ; \n Start ( ) ; \n } \n \n + protected override void OnClosing ( System . ComponentModel . CancelEventArgs e ) \n + { \n + SavePosition ( \" process \" ) ; \n + base . OnClosing ( e ) ; \n + } \n + \n private void FormStatus_FormClosed ( object sender , FormClosedEventArgs e ) \n { \n # if ! __MonoCS__", "msg": "Fixed save form position on progress / status dialog\n"}
{"diff": "a / src / OrleansRuntime / GrainTypeManager / SiloAssemblyLoader . cs \n  b / src / OrleansRuntime / GrainTypeManager / SiloAssemblyLoader . cs \n private static void LogGrainTypesFound ( TraceLogger logger , Dictionary < string , Gr \n if ( ! typeof ( ISystemTarget ) . IsAssignableFrom ( grainType . Type ) ) \n { \n int grainClassTypeCode = CodeGeneration . GrainInterfaceData . GetGrainClassTypeCode ( grainType . Type ) ; \n - sb . AppendFormat ( \" Grain class { 0 } [ { 1 } ( 0x { 2 } ) ] from { 3 } . dll implementing interfaces : \" , \n + sb . AppendFormat ( \" Grain class { 0 } . { 1 } [ { 2 } ( 0x { 3 } ) ] from { 4 } . dll implementing interfaces : \" , \n + grainType . Type . Namespace , \n TypeUtils . GetTemplatedName ( grainType . Type ) , \n grainClassTypeCode , \n grainClassTypeCode . ToString ( \" X \" ) ,", "msg": "Print full grain class name in silo init loading .\n"}
{"diff": "a / OpenRA . Mods . D2k / Traits / Carryall . cs \n  b / OpenRA . Mods . D2k / Traits / Carryall . cs \n public void UnreserveCarryable ( ) \n Carrying = null ; \n } \n \n - IsBusy = false ; \n - Carrying = null ; \n + CarryableReleased ( ) ; \n } \n \n / / INotifyKilled", "msg": "Clean up state properly when a Carryall ' s cargo has died\n"}
{"diff": "a / src / Workspaces / Remote / ServiceHub / Telemetry / WatsonReporter . cs \n  b / src / Workspaces / Remote / ServiceHub / Telemetry / WatsonReporter . cs \n internal class WatsonReporter \n / / / < / summary > \n private static Func < IFaultUtility , int > s_defaultCallback = _ = > 0 ; \n \n + / / / < summary > \n + / / / Default telemetry session \n + / / / < / summary > \n + [ Obsolete ( \" use RoslynServices . SessionOpt instead \" , error : false ) ] \n + public static TelemetrySession SessionOpt = > RoslynServices . SessionOpt ; \n + \n + / / / < summary > \n + / / / Check whether current user is microsoft internal or not \n + / / / < / summary > \n + [ Obsolete ( \" use RoslynServices . IsUserMicrosoftInternal instead \" , error : false ) ] \n + public static bool IsUserMicrosoftInternal = > RoslynServices . IsUserMicrosoftInternal ; \n + \n / / / < summary > \n / / / Report Non - Fatal Watson \n / / / < / summary >", "msg": "put some API back since it broke partner ' s IVT\n"}
{"diff": "a / NzbDrone . Core / Indexers / IndexerService . cs \n  b / NzbDrone . Core / Indexers / IndexerService . cs \n \n - \ufeff using System . Collections . Generic ; \n + \ufeff using System ; \n + using System . Collections . Generic ; \n using System . Linq ; \n using NLog ; \n using NzbDrone . Common . Eventing ; \n public void Handle ( ApplicationStartedEvent message ) \n foreach ( var feedProvider in _indexers ) \n { \n IIndexerBase indexerLocal = feedProvider ; \n - if ( ! currentIndexers . Exists ( c = > c . Name = = indexerLocal . Name ) ) \n + if ( ! currentIndexers . Exists ( c = > c . Name . Equals ( indexerLocal . Name , StringComparison . InvariantCultureIgnoreCase ) ) ) \n { \n var settings = new IndexerDefinition \n {", "msg": "fixed indexer name compression to be case in - sensitive .\n"}
{"diff": "a / SparkleShare / Mac / SparkleShare / SparkleUI . cs \n  b / SparkleShare / Mac / SparkleShare / SparkleUI . cs \n public SparkleUI ( ) \n } ) ; \n \n } ; \n + \n + SparkleShare . Controller . OnIdle + = delegate { \n + \n + InvokeOnMainThread ( delegate { \n + \n + foreach ( SparkleLog log in SparkleUI . OpenLogs ) \n + log . UpdateEventLog ( ) ; \n + \n + } ) ; \n + \n + } ; \n \n }", "msg": "[ ui ] update [ log ] on local commits\n"}
{"diff": "a / mRemoteV1 / App / Import . cs \n  b / mRemoteV1 / App / Import . cs \n \n using mRemoteNG . Container ; \n using mRemoteNG . Tools ; \n using mRemoteNG . Tree ; \n - using Microsoft . VisualBasic ; \n using PSTaskDialog ; \n \n namespace mRemoteNG . App \n public static void ImportFromPortScan ( IEnumerable hosts , ProtocolType protocol ) \n { \n cTaskDialog . ShowCommandBox ( Application . ProductName , Language . strImportLocationMainInstruction , \n Language . strImportLocationContent , \" \" , \" \" , \" \" , \n - string . Format ( Language . strImportLocationCommandButtons , Constants . vbLf , rootTreeNode . Text , \n + string . Format ( Language . strImportLocationCommandButtons , Environment . NewLine , rootTreeNode . Text , \n selectedTreeNode . Text ) , true , eSysIcons . Question , 0 ) ; \n switch ( cTaskDialog . CommandButtonResult ) \n {", "msg": "Removed dependency to Microsoft . VisualBasic in Import . cs\n"}
{"diff": "a / src / Gtk / Avalonia . Cairo / Media / DrawingContext . cs \n  b / src / Gtk / Avalonia . Cairo / Media / DrawingContext . cs \n public void PushOpacityMask ( IBrush mask , Rect bounds ) \n public void PopOpacityMask ( ) \n { \n _context . PopGroupToSource ( ) ; \n - _context . Mask ( _maskStack . Pop ( ) . PlatformBrush ) ; \n + var brushImpl = _maskStack . Pop ( ) ; \n + \n + _context . Mask ( brushImpl . PlatformBrush ) ; \n + brushImpl . Dispose ( ) ; \n } \n } \n }", "msg": "fixes Cairo . Pattern leaks . Courtest of nc4rrillo\n"}
{"diff": "a / src / libraries / System . Diagnostics . EventLog / src / System / Diagnostics / Reader / ProviderMetadataCachedInformation . cs \n  b / src / libraries / System . Diagnostics . EventLog / src / System / Diagnostics / Reader / ProviderMetadataCachedInformation . cs \n private ProviderMetadata GetProviderMetadata ( ProviderMetadataId key ) \n \n try \n { \n + pm . CheckReleased ( ) ; \n UpdateCacheValueInfoForHit ( cacheItem ) ; \n } \n catch ( EventLogException )", "msg": "Revert \" Remove superflous CheckReleased call which will slow down Event Log Reading up to 20x times . ( ) \" ( )\n"}
{"diff": "a / mcs / class / Mono . Debugger . Soft / Mono . Debugger . Soft / MethodMirror . cs \n  b / mcs / class / Mono . Debugger . Soft / Mono . Debugger . Soft / MethodMirror . cs \n public class MethodMirror : Mirror \n \n public LocalVariable [ ] GetLocals ( ) { \n if ( locals = = null ) { \n - \n LocalsInfo li = new LocalsInfo ( ) ; \n try { \n li = vm . conn . Method_GetLocalsInfo ( id ) ; \n } catch ( CommandException ) { \n - throw new ArgumentException ( \" Method doesn ' t have a body . \" ) ; \n + throw new AbsentInformationException ( \" Method doesn ' t have a body . \" ) ; \n } \n + \n / / Add the arguments as well \n var pi = vm . conn . Method_GetParamInfo ( id ) ;", "msg": "[ Mono . Debugger . Soft ] Throw AbsentInformationException , not ArgumentException which makes no sense\n"}
{"diff": "a / src / Markup / Avalonia . Markup . Xaml . Loader / CompilerExtensions / XamlIlBindingPathHelper . cs \n  b / src / Markup / Avalonia . Markup . Xaml . Loader / CompilerExtensions / XamlIlBindingPathHelper . cs \n public void Emit ( XamlIlEmitContext context , IXamlILEmitter codeGen ) \n { \n codeGen . Ldtype ( Type ) \n . Ldc_I4 ( _level ) \n - . EmitCall ( context . GetAvaloniaTypes ( ) . CompiledBindingPathBuilder . FindMethod ( m = > m . Name = = \" FindAncestor \" ) ) ; \n + . EmitCall ( context . GetAvaloniaTypes ( ) . CompiledBindingPathBuilder . FindMethod ( m = > m . Name = = \" Ancestor \" ) ) ; \n } \n }", "msg": "second attempt make $ parent work in compiled binding\n"}
{"diff": "a / src / ServiceStack / Auth / DigestAuthProvider . cs \n  b / src / ServiceStack / Auth / DigestAuthProvider . cs \n public virtual bool TryAuthenticate ( IServiceBase authService , string userName , s \n var digestInfo = authService . Request . GetDigestAuth ( ) ; \n IUserAuth userAuth ; \n if ( authRepo . TryAuthenticate ( digestInfo , PrivateKey , NonceTimeOut , session . Sequence , out userAuth ) ) { \n - session . PopulateWith ( userAuth ) ; \n + \n + var holdSessionId = session . Id ; \n + session . PopulateWith ( userAuth ) ; / / overwrites session . Id \n + session . Id = holdSessionId ; \n session . IsAuthenticated = true ; \n session . Sequence = digestInfo [ \" nc \" ] ; \n session . UserAuthId = userAuth . Id . ToString ( CultureInfo . InvariantCulture ) ;", "msg": "Change digest provider so Id is not overridden when populating session with userAuth info\n"}
{"diff": "a / OpenRA . Mods . Common / AI / HackyAI . cs \n  b / OpenRA . Mods . Common / AI / HackyAI . cs \n void FindAndDeployBackupMcv ( Actor self ) \n if ( ! mcv . IsIdle ) \n continue ; \n \n + / / If we lack a base , we need to make sure we don ' t restrict deployment of the MCV to the base ! \n + var restrictToBase = \n + Info . RestrictMCVDeploymentFallbackToBase & & \n + CountBuildingByCommonName ( Info . BuildingCommonNames . ConstructionYard , Player ) > 0 ; \n var factType = mcv . Info . TraitInfo < TransformsInfo > ( ) . IntoActor ; \n - var desiredLocation = ChooseBuildLocation ( factType , Info . RestrictMCVDeploymentFallbackToBase , BuildingType . Building ) ; \n + var desiredLocation = ChooseBuildLocation ( factType , restrictToBase , BuildingType . Building ) ; \n if ( desiredLocation = = null ) \n continue ;", "msg": "Make sure AI can deploy an MCV when it lacks a base .\n"}
{"diff": "a / mcs / mcs / method . cs \n  b / mcs / mcs / method . cs \n protected SourceMethod ( DeclSpace parent , MethodBase method , ICompileUnit file ) \n \n public int Token { \n get { \n - if ( method is MethodBuilder ) \n - return ( ( MethodBuilder ) method ) . GetToken ( ) . Token ; \n - else if ( method is ConstructorBuilder ) \n - return ( ( ConstructorBuilder ) method ) . GetToken ( ) . Token ; \n + MethodToken token ; \n + var mb = method as MethodBuilder ; \n + if ( mb ! = null ) \n + token = mb . GetToken ( ) ; \n else \n - throw new NotSupportedException ( ) ; \n + token = ( ( ConstructorBuilder ) method ) . GetToken ( ) ; \n + # if STATIC \n + if ( token . IsPseudoToken ) \n + return ( ( ModuleBuilder ) method . Module ) . ResolvePseudoToken ( token . Token ) ; \n + # endif \n + return token . Token ; \n } \n }", "msg": "Add a workaround for ikvm unfixed baked method tokens\n"}
{"diff": "a / CefSharp . WinForms . Example / BrowserTabUserControl . cs \n  b / CefSharp . WinForms . Example / BrowserTabUserControl . cs \n private void OnBrowserLoadingStateChanged ( object sender , LoadingStateChangedEven \n SetCanGoBack ( args . CanGoBack ) ; \n SetCanGoForward ( args . CanGoForward ) ; \n \n - this . InvokeOnUiThreadIfRequired ( ( ) = > SetIsLoading ( ! args . CanReload ) ) ; \n + this . InvokeOnUiThreadIfRequired ( ( ) = > SetIsLoading ( args . IsLoading ) ) ; \n } \n \n private void OnBrowserTitleChanged ( object sender , TitleChangedEventArgs args )", "msg": "WinForms example use args . IsLoading rather than ! args . CanReload\n"}
{"diff": "a / Emby . Server . Implementations / HttpServer / Security / AuthorizationContext . cs \n  b / Emby . Server . Implementations / HttpServer / Security / AuthorizationContext . cs \n private AuthorizationInfo GetAuthorization ( IRequest httpReq ) \n token = queryString [ \" ApiKey \" ] ; \n } \n \n - / / TODO depricate this query parameter . \n + / / TODO deprecate this query parameter . \n if ( string . IsNullOrEmpty ( token ) ) \n { \n token = queryString [ \" api_key \" ] ;", "msg": "Update Emby . Server . Implementations / HttpServer / Security / AuthorizationContext . cs\n"}
{"diff": "a / ICSharpCode . Decompiler / DecompilerSettings . cs \n  b / ICSharpCode . Decompiler / DecompilerSettings . cs \n public DecompilerSettings ( CSharp . LanguageVersion languageVersion ) \n \n public CSharp . LanguageVersion GetMinimumRequiredVersion ( ) \n { \n + if ( nullableReferenceTypes ) \n + return CSharp . LanguageVersion . CSharp8_0 ; \n if ( introduceUnmanagedConstraint | | tupleComparisons | | stackAllocInitializers ) \n return CSharp . LanguageVersion . CSharp7_3 ; \n if ( introduceRefModifiersOnStructs | | introduceReadonlyAndInModifiers | | nonTrailingNamedArguments )", "msg": "GetMinimumRequiredVersion ( ) : Add case for C # 8 . 0\n"}
{"diff": "a / ILSpy / SearchStrategies . cs \n  b / ILSpy / SearchStrategies . cs \n protected AbstractSearchStrategy ( params string [ ] terms ) \n protected float CalculateFitness ( MemberReference member , string text ) \n { \n / / Probably compiler generated types without meaningful names , show them last \n - if ( text . StartsWith ( \" < \" ) ) \n - { \n + if ( text . StartsWith ( \" < \" ) ) { \n return 0 ; \n } \n \n + / / Constructors always have the same name in IL : \n + / / Use type name instead \n + if ( text = = \" . . ctor \" | | text = = \" . ctor \" ) { \n + text = member . DeclaringType . Name ; \n + } \n + \n / / Ignore generic arguments , it not possible to search based on them either \n int length = 0 ; \n int generics = 0 ; \n - for ( int i = 0 ; i < text . Length ; i + + ) \n - { \n + for ( int i = 0 ; i < text . Length ; i + + ) { \n if ( text [ i ] = = ' < ' ) \n generics + + ; \n else if ( text [ i ] = = ' > ' )", "msg": "CalculateFitness : In case of ctors use type name .\n"}
{"diff": "a / src / Hangfire . Core / Dashboard / EmbeddedResourceDispatcher . cs \n  b / src / Hangfire . Core / Dashboard / EmbeddedResourceDispatcher . cs \n protected void WriteResource ( IOwinResponse response , Assembly assembly , string r \n resourceName , assembly ) ) ; \n } \n \n - var buffer = new byte [ Math . Min ( inputStream . Length , 4096 ) ] ; \n - var readLength = inputStream . Read ( buffer , 0 , buffer . Length ) ; \n - while ( readLength > 0 ) \n - { \n - response . Write ( buffer , 0 , readLength ) ; \n - readLength = inputStream . Read ( buffer , 0 , buffer . Length ) ; \n - } \n + inputStream . CopyTo ( response . Body ) ; \n } \n } \n }", "msg": "Simplify writing of embedded resource to response body .\n"}
{"diff": "a / src / Compilers / Extension / CompilerPackage . cs \n  b / src / Compilers / Extension / CompilerPackage . cs \n public sealed class CompilerPackage : Package \n \n protected override void Initialize ( ) \n { \n + base . Initialize ( ) ; \n + \n var packagePath = Path . GetDirectoryName ( Assembly . GetExecutingAssembly ( ) . Location ) ; \n \n string localRegistryRoot ; \n protected override void Initialize ( ) \n Microsoft . Build . Evaluation . ProjectCollection . GlobalProjectCollection . DisableMarkDirty = false ; \n } \n } \n - base . Initialize ( ) ; \n } \n \n private void WriteTargetsFile ( string packagePath , string hiveName )", "msg": "Move call to base . Initialize to the start for safety\n"}
{"diff": "a / src / ServiceStack / Auth / AuthProvider . cs \n  b / src / ServiceStack / Auth / AuthProvider . cs \n public abstract class AuthProvider : IAuthProvider \n public Func < AuthProvider , string , string > SuccessRedirectUrlFilter = UrlFilter ; \n public Func < AuthProvider , string , string > FailedRedirectUrlFilter = UrlFilter ; \n public Func < AuthProvider , string , string > LogoutUrlFilter = UrlFilter ; \n + \n + public Func < IAuthRepository , IUserAuth , IAuthTokens , bool > AccountLockedValidator { get ; set ; } \n \n public static string UrlFilter ( AuthProvider provider , string url ) \n { \n protected virtual string GetAuthRedirectUrl ( IServiceBase authService , IAuthSessi \n \n public virtual bool IsAccountLocked ( IAuthRepository authRepo , IUserAuth userAuth , IAuthTokens tokens = null ) \n { \n + if ( AccountLockedValidator ! = null ) \n + return AccountLockedValidator ( authRepo , userAuth , tokens ) ; \n + \n return userAuth ? . LockedDate ! = null ; \n }", "msg": "Add AuthProvider . AccountLockedValidator to customize IsAccountLocked behavior w / o inheritance\n"}
{"diff": "a / src / libraries / System . Configuration . ConfigurationManager / tests / Mono / ConfigurationSaveTest . cs \n  b / src / libraries / System . Configuration . ConfigurationManager / tests / Mono / ConfigurationSaveTest . cs \n public void AddListElement ( ) \n } \n \n [ Fact ] \n + [ ActiveIssue ( 18431 ) ] \n public void NotModifiedAfterSave ( ) \n { \n Run < DefaultMachineConfig > ( \" NotModifiedAfterSave \" , ( config , label ) = > \n public void ModifyListElement2 ( ) \n } \n \n [ Fact ] \n + [ ActiveIssue ( 18431 ) ] \n public void TestElementWithCollection ( ) \n { \n Run < DefaultMachineConfig2 > ( \" TestElementWithCollection \" , ( config , label ) = >", "msg": "Disable MonoTests . System . Configuration . ConfigurationSaveTest . NotModifiedAfterSave ( dotnet / corefx )\n"}
{"diff": "a / src / EditorFeatures / Core / Implementation / IntelliSense / SignatureHelp / Controller . Session_ComputeModel . cs \n  b / src / EditorFeatures / Core / Implementation / IntelliSense / SignatureHelp / Controller . Session_ComputeModel . cs \n private static bool CompareParts ( TaggedText p1 , TaggedText p2 ) \n \n return ( bestProvider , bestItems ) ; \n } \n - catch ( Exception e ) when ( FatalError . ReportUnlessCanceled ( e ) ) \n + catch ( Exception e ) when ( FatalError . ReportWithoutCrashUnlessCanceled ( e ) ) \n { \n - throw ExceptionUtilities . Unreachable ; \n + return ( null , null ) ; \n } \n }", "msg": "Don ' t crash VS when Signature Help fails to calculate\n"}
{"diff": "a / mono / tests / finalizer - exception . cs \n  b / mono / tests / finalizer - exception . cs \n public class FinalizerException { \n throw new Exception ( ) ; \n } \n \n + / * \n + * We allocate the exception object deep down the stack so \n + * that it doesn ' t get pinned . \n + * / \n + public static void MakeException ( int depth ) { \n + if ( depth < = 0 ) { \n + new FinalizerException ( ) ; \n + return ; \n + } \n + MakeException ( depth - 1 ) ; \n + } \n + \n public static int Main ( ) { \n AppDomain . CurrentDomain . UnhandledException + = ( sender , args ) = > { \n Console . WriteLine ( \" caught \" ) ; \n Environment . Exit ( 0 ) ; \n } ; \n \n - new FinalizerException ( ) ; \n + MakeException ( 100 ) ; \n \n GC . Collect ( ) ; \n GC . WaitForPendingFinalizers ( ) ;", "msg": "[ tests ] Fix pinning in finalizer - exception . cs .\n"}
{"diff": "a / Duplicati / Library / Main / Operation / RepairHandler . cs \n  b / Duplicati / Library / Main / Operation / RepairHandler . cs \n public void RunRepairLocal ( Library . Utility . IFilter filter = null ) \n { \n if ( f ! = null & & System . IO . File . Exists ( f ) ) \n System . IO . File . Delete ( f ) ; \n - \n + \n + var filelistfilter = RestoreHandler . FilterNumberedFilelist ( m_options . Time , m_options . Version ) ; \n + \n new RecreateDatabaseHandler ( m_backendurl , m_options , ( RecreateDatabaseResults ) m_result . RecreateDatabaseResults ) \n - . Run ( m_options . Dryrun ? ( string ) f : m_options . Dbpath ) ; \n + . Run ( m_options . Dryrun ? ( string ) f : m_options . Dbpath , filter , filelistfilter ) ; \n } \n }", "msg": "Added option to allow repairing only a specific fileset for faster restore from scratch\n"}
{"diff": "a / MonoGame . Framework / Audio / SoundEffectInstance . cs \n  b / MonoGame . Framework / Audio / SoundEffectInstance . cs \n public void Stop ( bool immediate ) \n { \n # if DIRECTX \n if ( _voice ! = null ) \n + { \n _voice . Stop ( immediate ? 0 : ( int ) PlayFlags . Tails ) ; \n + if ( immediate ) _voice . FlushSourceBuffers ( ) ; \n + } \n \n _paused = false ; \n # else", "msg": "[ WP8 ] Calling SoundEffectInstance . Stop ( true ) unstable state .\n"}
{"diff": "Binary files a / src / Build / ClearPluginAssemblies . dll and b / src / Build / ClearPluginAssemblies . dll differ \n  a / src / Build / src / ClearPluginAssemblies / Program . cs \n  b / src / Build / src / ClearPluginAssemblies / Program . cs \n private static void Main ( string [ ] args ) \n return ; \n \n var di = new DirectoryInfo ( outputPath ) ; \n - var fileNames = di . GetFiles ( \" * . dll \" , SearchOption . AllDirectories ) . Select ( fi = > fi . Name . Replace ( fi . Extension , \" \" ) ) . ToList ( ) ; \n + var fileNames = di . GetFiles ( \" * . dll \" , SearchOption . AllDirectories ) \n + . Where ( fi = > ! fi . FullName . Contains ( @ \" \\ Plugins \\ \" ) ) \n + . Select ( fi = > fi . Name . Replace ( fi . Extension , \" \" ) ) . ToList ( ) ; \n \n if ( string . IsNullOrEmpty ( pluginPaths ) | | ! fileNames . Any ( ) ) \n {", "msg": "Excluded \" Plugins \" folder and all its subfolders from the list to preparing libraries to deleting\n"}
{"diff": "a / src / Presentation / Nop . Web / Controllers / CommonController . cs \n  b / src / Presentation / Nop . Web / Controllers / CommonController . cs \n public partial class CommonController : BaseNopController \n \n # region Utilities \n \n + / / page not found \n + public ActionResult PageNotFound ( ) \n + { \n + this . Response . StatusCode = 404 ; \n + this . Response . TrySkipIisCustomErrors = true ; \n + \n + return View ( ) ; \n + } \n + \n [ NonAction ] \n protected LanguageSelectorModel PrepareLanguageSelectorModel ( ) \n {", "msg": "Further changes on more user - friendly \" page not found \" page ( with 404 HTTP status code )\n"}
{"diff": "a / OpenRA . Mods . RA / Render / RenderLandingCraft . cs \n  b / OpenRA . Mods . RA / Render / RenderLandingCraft . cs \n \n \n using System . Linq ; \n using OpenRA . Traits ; \n + using OpenRA . Mods . RA . Move ; \n \n namespace OpenRA . Mods . RA . Render \n { \n public RenderLandingCraft ( Actor self , RenderLandingCraftInfo info ) \n \n public bool ShouldBeOpen ( ) \n { \n - if ( self . CenterPosition . Z > 0 ) \n + var mobile = self . TraitOrDefault < Mobile > ( ) ; \n + if ( mobile = = null ) \n + return false ; \n + \n + if ( self . CenterPosition . Z > 0 | | mobile . IsMoving ) \n return false ; \n \n return cargo . CurrentAdjacentCells", "msg": "Added a TraitOrDefault for Mobile and with that a check for mobile . IsMoving to RenderLandingCraft .\n"}
{"diff": "a / src / Presentation / Nop . Web . Framework / Kendoui / Filter . cs \n  b / src / Presentation / Nop . Web . Framework / Kendoui / Filter . cs \n public string ToExpression ( IList < Filter > filters ) \n / / return String . Format ( \" { 0 } . { 1 } ( @ { 2 } ) \" , Field , comparison , index ) ; \n / / } \n \n - \n / / we ignore case \n if ( comparison = = \" Contains \" ) \n { \n return String . Format ( \" { 0 } . IndexOf ( @ { 1 } , System . StringComparison . InvariantCultureIgnoreCase ) > = 0 \" , Field , index ) ; \n } \n - if ( comparison = = \" = \" ) \n + if ( comparison = = \" = \" & & Value . GetType ( ) = = typeof ( String ) ) \n { \n + / / string only \n comparison = \" Equals \" ; \n + / / numeric values use standard \" = \" char \n } \n if ( comparison = = \" StartsWith \" | | comparison = = \" EndsWith \" | | comparison = = \" Equals \" ) \n {", "msg": "Admin area grid . Added filtering support for numeric properties .\n"}
{"diff": "a / OpenRA . Game / Map / Map . cs \n  b / OpenRA . Game / Map / Map . cs \n public bool Contains ( CPos cell ) \n if ( Grid . Type = = MapGridType . RectangularIsometric & & cell . X < cell . Y ) \n return false ; \n \n + / / If the mod uses flat & rectangular maps , ToMPos and Contains ( MPos ) create unnecessary cost . \n + / / Just check if CPos is within map bounds . \n + if ( Grid . MaximumTerrainHeight = = 0 & & Grid . Type = = MapGridType . Rectangular ) \n + return Bounds . Contains ( cell . X , cell . Y ) ; \n + \n return Contains ( cell . ToMPos ( this ) ) ; \n }", "msg": "Reduce Map . Contains ( CPos ) cost in legacy mods\n"}
{"diff": "a / Plugins / Statistics / GitStatistics / GitStatisticsPlugin . cs \n  b / Plugins / Statistics / GitStatistics / GitStatisticsPlugin . cs \n public string Description \n public void Register ( IGitUICommands gitUiCommands ) \n { \n Settings . AddSetting ( \" Code files \" , \n - \" * . c ; * . cpp ; * . h ; * . hpp ; * . inl ; * . idl ; * . asm ; * . inc ; * . cs ; * . xsd ; * . wsdl ; * . xml ; * . htm ; * . html ; * . css ; * . vbs ; * . vb ; * . sql ; * . aspx ; * . asp ; * . php ; * . nav ; * . pas \" ) ; \n + \" * . c ; * . cpp ; * . h ; * . hpp ; * . inl ; * . idl ; * . asm ; * . inc ; * . cs ; * . xsd ; * . wsdl ; * . xml ; * . htm ; * . html ; * . css ; * . vbs ; * . vb ; * . sql ; * . aspx ; * . asp ; * . php ; * . nav ; * . pas ; * . py \" ) ; \n Settings . AddSetting ( \" Directories to ignore ( EndsWith ) \" , \" \\ \\ Debug ; \\ \\ Release ; \\ \\ obj ; \\ \\ bin ; \\ \\ lib \" ) ; \n Settings . AddSetting ( \" Ignore submodules ( true / false ) \" , \" true \" ) ; \n }", "msg": "GitStatistics : Added Python files to default file search pattern\n"}
{"diff": "a / ICSharpCode . Decompiler / CSharp / CSharpDecompiler . cs \n  b / ICSharpCode . Decompiler / CSharp / CSharpDecompiler . cs \n public string DecompileTypesAsString ( IEnumerable < TypeDefinition > types ) \n / / / < / remarks > \n public SyntaxTree DecompileType ( FullTypeName fullTypeName ) \n { \n - var type = typeSystem . Compilation . FindType ( fullTypeName ) . GetDefinition ( ) ; \n + var type = typeSystem . Compilation . FindType ( fullTypeName . TopLevelTypeName ) . GetDefinition ( ) ; \n if ( type = = null ) \n throw new InvalidOperationException ( $ \" Could not find type definition { fullTypeName } in type system . \" ) ; \n var decompilationContext = new SimpleTypeResolveContext ( typeSystem . MainAssembly ) ;", "msg": "DecompileType only supports top - level types : always use FullTypeName . TopLevelTypeName .\n"}
{"diff": "a / CefSharp . BrowserSubprocess / CefRenderProcess . cs \n  b / CefSharp . BrowserSubprocess / CefRenderProcess . cs \n public override void OnBrowserCreated ( CefBrowserBase cefBrowserWrapper ) \n return ; \n } \n \n + var serviceName = RenderprocessClientFactory . GetServiceName ( ParentProcessId . Value , cefBrowserWrapper . BrowserId ) ; \n + \n channelFactory = new DuplexChannelFactory < IBrowserProcess > ( \n this , \n new NetNamedPipeBinding ( ) , \n - new EndpointAddress ( RenderprocessClientFactory . GetServiceName ( ParentProcessId . Value , cefBrowserWrapper . BrowserId ) ) \n + new EndpointAddress ( serviceName ) \n ) ; \n \n channelFactory . Open ( ) ;", "msg": "Move serviceName to variable - makes for easier debugging\n"}
{"diff": "a / Duplicati / Library / AutoUpdater / UpdaterManager . cs \n  b / Duplicati / Library / AutoUpdater / UpdaterManager . cs \n private static int RunMethod ( System . Reflection . MethodInfo method , string [ ] args ) \n \n public static int RunFromMostRecent ( System . Reflection . MethodInfo method , string [ ] cmdargs , AutoUpdateStrategy defaultstrategy = AutoUpdateStrategy . CheckDuring ) \n { \n - return RunFromMostRecentSpawn ( method , cmdargs , defaultstrategy ) ; \n + if ( Library . Utility . Utility . ParseBool ( Environment . GetEnvironmentVariable ( \" AUTOUPDATER_USE_APPDOMAIN \" ) , false ) ) \n + return RunFromMostRecentAppDomain ( method , cmdargs , defaultstrategy ) ; \n + else \n + return RunFromMostRecentSpawn ( method , cmdargs , defaultstrategy ) ; \n } \n \n public static int RunFromMostRecentSpawn ( System . Reflection . MethodInfo method , string [ ] cmdargs , AutoUpdateStrategy defaultstrategy = AutoUpdateStrategy . CheckDuring )", "msg": "Added temporary option to allow switching between the auto update invoke methods , in case we need to test something on installed machines\n"}
{"diff": "a / Xamarin . Essentials / WebAuthenticator / WebAuthenticator . ios . tvos . cs \n  b / Xamarin . Essentials / WebAuthenticator / WebAuthenticator . ios . tvos . cs \n void AuthSessionCallback ( NSUrl cbUrl , NSError error ) \n sf . Start ( ) ; \n var result = await tcsResponse . Task ; \n sf ? . Dispose ( ) ; \n - was = null ; \n + sf = null ; \n return result ; \n }", "msg": "Update Xamarin . Essentials / WebAuthenticator / WebAuthenticator . ios . tvos . cs\n"}
{"diff": "a / ArchiSteamFarm / Bot . cs \n  b / ArchiSteamFarm / Bot . cs \n internal sealed class Bot { \n Task . Run ( ( ) = > HandleCallbacks ( ) ) . Forget ( ) ; \n } \n \n - / / 2FA tokens are expiring soon , use limiter only when we don ' t have any pending \n - if ( TwoFactorCode = = null ) { \n + / / 2FA tokens are expiring soon , use limiter only when user is providing one \n + if ( TwoFactorCode = = null | | BotDatabase . SteamGuardAccount ! = null ) { \n await Program . LimitSteamRequestsAsync ( ) . ConfigureAwait ( false ) ; \n } \n \n internal sealed class Bot { \n \n Logging . LogGenericInfo ( \" Reconnecting . . . \" , BotName ) ; \n \n - / / 2FA tokens are expiring soon , use limiter only when we don ' t have any pending \n - if ( TwoFactorCode = = null ) { \n + / / 2FA tokens are expiring soon , use limiter only when user is providing one \n + if ( TwoFactorCode = = null | | BotDatabase . SteamGuardAccount ! = null ) { \n await Program . LimitSteamRequestsAsync ( ) . ConfigureAwait ( false ) ; \n }", "msg": "Fix small regression caused by https : / / github . com / JustArchi / ArchiSteamFarm / commit / d0cc10f3c68457be2a42dc1b9ff57f0f055b348a\n"}
{"diff": "a / OpenRA . Mods . RA / Air / HeliAttack . cs \n  b / OpenRA . Mods . RA / Air / HeliAttack . cs \n public override Activity Tick ( Actor self ) \n } \n \n var attack = self . Trait < AttackHeli > ( ) ; \n - var range = attack . GetMaximumRange ( ) * 0 . 625f ; \n var dist = target . CenterLocation - self . CenterLocation ; \n \n var desiredFacing = Util . GetFacing ( dist , aircraft . Facing ) ; \n aircraft . Facing = Util . TickFacing ( aircraft . Facing , desiredFacing , aircraft . ROT ) ; \n \n - if ( ! float2 . WithinEpsilon ( float2 . Zero , dist . ToFloat2 ( ) , range * Game . CellSize ) ) \n + if ( ! Combat . IsInRange ( self . CenterLocation , attack . GetMaximumRange ( ) , target ) ) \n aircraft . TickMove ( PSubPos . PerPx * aircraft . MovementSpeed , desiredFacing ) ; \n \n attack . DoAttack ( self , target ) ;", "msg": "use Combat . IsInRange instead of float2 . WithinEpsilon for heli\n"}
{"diff": "a / mcs / class / Mono . Debugger . Soft / Test / dtest . cs \n  b / mcs / class / Mono . Debugger . Soft / Test / dtest . cs \n public class DebuggerTests \n TypeMirror t = child . Type ; \n } ) ; \n * / \n - \n + / * \n AssertThrows < ObjectCollectedException > ( delegate ( ) { \n long addr = child . Address ; \n } ) ; \n + * / \n } \n \n [ Test ]", "msg": "Disable an sdb test which is not deterministic .\n"}
{"diff": "a / mRemoteV1 / Connection / ConnectionInfo . cs \n  b / mRemoteV1 / Connection / ConnectionInfo . cs \n public virtual void Dispose ( ) \n { \n RemoveParent ( ) ; \n } \n - # endregion \n + \n + public override bool Equals ( object otherObject ) \n + { \n + var otherObjectAsConnectionInfo = otherObject as ConnectionInfo ; \n + if ( otherObjectAsConnectionInfo = = null ) return false ; \n + return otherObjectAsConnectionInfo . ConstantID = = ConstantID ; \n + } \n + \n + # endregion \n \n # region Public Enumerations \n [ Flags ( ) ]", "msg": "Overrode the Equals method for ConnectionInfo . Equality based on ConstantID\n"}
{"diff": "a / src / NzbDrone . Core / Indexers / Newznab / NewznabSettings . cs \n  b / src / NzbDrone . Core / Indexers / Newznab / NewznabSettings . cs \n public class NewznabSettings : IProviderConfig \n \n public NewznabSettings ( ) \n { \n - Categories = new [ ] { 2030 , 2040 , 2050 } ; \n + Categories = new [ ] { 2030 , 2035 , 2040 , 2050 } ; \n AnimeCategories = Enumerable . Empty < int > ( ) ; \n }", "msg": "Add category 2035 to Newznab providers for WEB - DL search support .\n"}
{"diff": "a / GitUI / CommandsDialogs / FormBrowse . cs \n  b / GitUI / CommandsDialogs / FormBrowse . cs \n private void LayoutRevisionInfo ( ) \n if ( commitInfoPosition = = CommitInfoPosition . RightwardFromList ) \n { \n RevisionsSplitContainer . FixedPanel = FixedPanel . Panel2 ; \n - RevisionsSplitContainer . SplitterDistance = RevisionsSplitContainer . Width - width ; \n + RevisionsSplitContainer . SplitterDistance = Math . Max ( 0 , RevisionsSplitContainer . Width - width ) ; \n RevisionInfo . Parent = RevisionsSplitContainer . Panel2 ; \n RevisionGrid . Parent = RevisionsSplitContainer . Panel1 ; \n }", "msg": "Limits RevisionsSplitContainer . SplitterDistance to a min of 0\n"}
{"diff": "a / src / Hangfire . Core / Server / RecurringJobScheduler . cs \n  b / src / Hangfire . Core / Server / RecurringJobScheduler . cs \n public void Execute ( BackgroundProcessContext context ) \n ex ) ; \n } \n } \n - \n - _throttler . Delay ( context . CancellationToken ) ; \n } \n + \n + / / The code above may be completed in less than a second . Default throttler use \n + / / the second resolution , and without an extra delay , CPU and DB bursts may happen . \n + _throttler . Delay ( context . CancellationToken ) ; \n } \n \n / / / < inheritdoc / >", "msg": "Move throttler . Delay call outside of connection and lock\n"}
{"diff": "a / SparkleShare / SparkleIntro . cs \n  b / SparkleShare / SparkleIntro . cs \n private void ShowSyncingPage ( string name ) \n } ; \n \n Label information = new Label ( _ ( \" This may take a while . \\ n \" ) + \n - _ ( \" You sure it \u2019 s not coffee o - clock ? \" ) ) { \n + _ ( \" Are you sure it \u2019 s not coffee o ' clock ? \" ) ) { \n UseMarkup = true , \n Xalign = 0 \n } ;", "msg": "Slight english string change to improve coffee o ' clock .\n"}
{"diff": "a / mcs / class / System / System / Uri . cs \n  b / mcs / class / System / System / Uri . cs \n private void Parse ( UriKind kind , string uriString ) \n \n private bool SupportsQuery ( ) \n { \n - return ( ( scheme ! = Uri . UriSchemeNntp ) & & ( scheme ! = Uri . UriSchemeFtp ) & & ( scheme ! = Uri . UriSchemeFile ) ) ; \n + return UriHelper . SupportsQuery ( scheme ) ; \n } \n \n / /", "msg": "Changed Uri . SupportsQuery to use UriHelper . SupportsQuery .\n"}
{"diff": "a / osu . Game / Database / ArchiveModelManager . cs \n  b / osu . Game / Database / ArchiveModelManager . cs \n private List < TFileModel > createFileInfos ( ArchiveReader reader , FileStore files ) \n using ( Stream s = reader . GetStream ( file ) ) \n fileInfos . Add ( new TFileModel \n { \n - Filename = FileSafety . PathSanitise ( file ) , \n + Filename = FileSafety . PathStandardise ( file ) , \n FileInfo = files . Add ( s ) \n } ) ;", "msg": "Fix database entries using platform - specific path separator\n"}
{"diff": "a / src / System . Management . Automation / engine / Attributes . cs \n  b / src / System . Management . Automation / engine / Attributes . cs \n public ValidateSetAttribute ( Type valuesGeneratorType ) \n / / / < summary > \n / / / Allows dynamically generate set of values for < see cref = \" ValidateSetAttribute \" / > \n / / / < / summary > \n + # nullable enable \n public interface IValidateSetValuesGenerator \n { \n / / / < summary > \n / / / Gets valid values . \n / / / < / summary > \n + / / / < returns > A non - null array of non - null strings . < / returns > \n string [ ] GetValidValues ( ) ; \n } \n + # nullable restore \n \n / / / < summary > \n / / / Validates that each parameter argument is Trusted data .", "msg": "Enable nullable : System . Management . Automation . Internal . IValidateSetValuesGenerator ( )\n"}
{"diff": "a / MonoGame . Framework / Game . cs \n  b / MonoGame . Framework / Game . cs \n public TimeSpan TargetElapsedTime \n \n if ( value < = TimeSpan . Zero ) \n throw new ArgumentOutOfRangeException ( \n - \" value must be positive and non - zero . \" ) ; \n + \" The time must be positive and non - zero . \" , default ( Exception ) ) ; \n \n if ( value ! = _targetElapsedTime ) \n {", "msg": "Fixed exception message being set as parameter name .\n"}
{"diff": "new file mode 100644 \n index 000000000000 . . 0cfff223275d \n  / dev / null \n  b / mono / tests / delegate6 . cs \n \n + using System ; \n + using System . Reflection ; \n + \n + public class T \n + { \n + public void Test ( ) \n + { \n + Console . WriteLine ( \" CreateDelegate success ! \" ) ; \n + } \n + \n + public delegate void blah ( ) ; \n + \n + public static void Main ( ) \n + { \n + T t = new T ( ) ; \n + Delegate o = Delegate . CreateDelegate ( typeof ( T . blah ) , t , \" Test \" ) ; \n + o . DynamicInvoke ( new Object [ ] { } ) ; \n + } \n + } \n + \n +", "msg": "* Added a test case for System . Delegate . CreateDelegate ( )\n"}
{"diff": "a / src / NzbDrone . Core / Movies / Movie . cs \n  b / src / NzbDrone . Core / Movies / Movie . cs \n public Movie ( ) \n Translations = new List < MovieTranslation > ( ) ; \n Recommendations = new List < int > ( ) ; \n OriginalLanguage = Language . English ; \n + Ratings = new Ratings ( ) ; \n } \n \n public int TmdbId { get ; set ; }", "msg": "Fixed : Default a Movie object with Empty Ratings\n"}
{"diff": "Binary files a / lib / ServiceStack . Text . dll and b / lib / ServiceStack . Text . dll differ \n  a / src / ServiceStack / NativeTypes / Swift / SwiftGenerator . cs \n  b / src / ServiceStack / NativeTypes / Swift / SwiftGenerator . cs \n public SwiftGenerator ( MetadataTypesConfig config ) \n { \" Char \" , \" Character \" } , \n { \" Byte \" , \" Int8 \" } , \n { \" Int16 \" , \" Int16 \" } , \n - { \" Int32 \" , \" Int32 \" } , \n + { \" Int32 \" , \" Int \" } , \n { \" Int64 \" , \" Int64 \" } , \n { \" UInt16 \" , \" UInt16 \" } , \n { \" UInt32 \" , \" UInt32 \" } ,", "msg": "Convert Int32 to Int in Swift as they ' re both default types that use integer literals\n"}
{"diff": "a / src / libraries / System . Net . Sockets . Legacy / tests / FunctionalTests / DualModeSocketTest . cs \n  b / src / libraries / System . Net . Sockets . Legacy / tests / FunctionalTests / DualModeSocketTest . cs \n private void ConnectClient ( object state ) \n catch ( SocketException ex ) \n { \n Task . Delay ( Configuration . FailingTestTimeout ) . Wait ( ) ; / / Give the other end a chance to call Accept ( ) . \n - _serverSocket . Shutdown ( SocketShutdown . Both ) ; / / Cancels the test \n - _serverSocket . Dispose ( ) ; \n + _serverSocket . Dispose ( ) ; / / Cancels the test \n Error = ex . SocketErrorCode ; \n } \n finally", "msg": "Revert \" Shutdown server socket to cancel the pending Accept call . Dispose does not cancel Accept . \"\n"}
{"diff": "a / src / EditorFeatures / Core / GoToDefinition / GoToDefinitionCommandHandler . cs \n  b / src / EditorFeatures / Core / GoToDefinition / GoToDefinitionCommandHandler . cs \n public bool ExecuteCommand ( GoToDefinitionCommandArgs args , CommandExecutionConte \n { \n var subjectBuffer = args . SubjectBuffer ; \n var ( document , service ) = GetDocumentAndService ( subjectBuffer . CurrentSnapshot ) ; \n - if ( service ! = null ) \n + \n + / / Prevent the remote workspace from handling go to definition commands \n + if ( service ! = null & & document . Project . Solution . Workspace . Kind ! = WorkspaceKind . AnyCodeRoslynWorkspace ) \n { \n var caretPos = args . TextView . GetCaretPoint ( subjectBuffer ) ; \n if ( caretPos . HasValue & & TryExecuteCommand ( document , caretPos . Value , service , context ) )", "msg": "Prevent the remote workspace from handling goto def commands .\n"}
{"diff": "a / osu . Game . Rulesets . Osu / Edit / OsuSelectionHandler . cs \n  b / osu . Game . Rulesets . Osu / Edit / OsuSelectionHandler . cs \n private bool moveSelection ( Vector2 delta ) \n \n Quad quad = getSurroundingQuad ( hitObjects ) ; \n \n - if ( quad . TopLeft . X + delta . X < 0 | | \n - quad . TopLeft . Y + delta . Y < 0 | | \n - quad . BottomRight . X + delta . X > DrawWidth | | \n - quad . BottomRight . Y + delta . Y > DrawHeight ) \n - return false ; \n + Vector2 newTopLeft = quad . TopLeft + delta ; \n + if ( newTopLeft . X < 0 ) \n + delta . X - = newTopLeft . X ; \n + if ( newTopLeft . Y < 0 ) \n + delta . Y - = newTopLeft . Y ; \n + \n + Vector2 newBottomRight = quad . BottomRight + delta ; \n + if ( newBottomRight . X > DrawWidth ) \n + delta . X - = newBottomRight . X - DrawWidth ; \n + if ( newBottomRight . Y > DrawHeight ) \n + delta . Y - = newBottomRight . Y - DrawHeight ; \n \n foreach ( var h in hitObjects ) \n h . Position + = delta ;", "msg": "Clamp selection movement instead of refusing to move on borders\n"}
{"diff": "a / mRemoteV1 / Tree / ConnectionTree . cs \n  b / mRemoteV1 / Tree / ConnectionTree . cs \n public static void DeleteSelectedNode ( ) \n { \n if ( UserConfirmsNonEmptyFolderDeletion ( ) ) \n { \n + TreeView . BeginUpdate ( ) ; \n SelectedNode . Nodes . Clear ( ) ; \n SelectedNode . Remove ( ) ; \n + TreeView . EndUpdate ( ) ; \n } \n } \n }", "msg": "Slight optimization to prevent window flicker when deleting a folder with many connections .\n"}
{"diff": "a / src / Hangfire . SqlServer / CountersAggregator . cs \n  b / src / Hangfire . SqlServer / CountersAggregator . cs \n public void Execute ( CancellationToken cancellationToken ) \n new { now = DateTime . UtcNow , count = NumberOfRecordsInSinglePass } ) ; \n } \n \n - if ( removedCount > 0 ) \n + if ( removedCount > = NumberOfRecordsInSinglePass ) \n { \n cancellationToken . WaitHandle . WaitOne ( DelayBetweenPasses ) ; \n cancellationToken . ThrowIfCancellationRequested ( ) ; \n } \n - } while ( removedCount ! = 0 ) ; \n + } while ( removedCount > = NumberOfRecordsInSinglePass ) ; \n \n cancellationToken . WaitHandle . WaitOne ( _interval ) ; \n } \n private static string GetAggregationQuery ( ) \n SET TRANSACTION ISOLATION LEVEL READ COMMITTED \n BEGIN TRAN \n \n - DELETE TOP ( @ count ) [ Hangfire ] . [ Counter ] \n + DELETE TOP ( @ count ) [ Hangfire ] . [ Counter ] with ( readpast ) \n OUTPUT DELETED . [ Key ] , DELETED . [ Value ] , DELETED . [ ExpireAt ] INTO @ RecordsToAggregate \n \n SET NOCOUNT ON", "msg": "Aggregate counters only if there are a lot of them\n"}
{"diff": "a / src / VisualStudio / Core / Def / ExternalAccess / VSTypeScript / Api / VSTypeScriptContainedLanguageWrapper . cs \n  b / src / VisualStudio / Core / Def / ExternalAccess / VSTypeScript / Api / VSTypeScriptContainedLanguageWrapper . cs \n internal struct VSTypeScriptContainedLanguageWrapper \n Guid languageServiceGuid ) \n { \n var filePath = ContainedLanguage . GetFilePathFromHierarchyAndItemId ( hierarchy , itemid ) ; \n + var projectId = ProjectId . CreateNewId ( $ \" Project for { filePath } \" ) ; \n + workspace . OnProjectAdded ( ProjectInfo . Create ( projectId , VersionStamp . Default , filePath , string . Empty , \" TypeScript \" ) ) ; \n \n _underlyingObject = new ContainedLanguage ( \n bufferCoordinator , \n componentModel , \n workspace , \n - ProjectId . CreateNewId ( $ \" Project for { filePath } \" ) , \n + projectId , \n null , \n filePath , \n languageServiceGuid ,", "msg": "Create dedicated project for script block document\n"}
{"diff": "a / Wox . Plugin . SystemPlugins / WebSearch / WebSearchPlugin . cs \n  b / Wox . Plugin . SystemPlugins / WebSearch / WebSearchPlugin . cs \n \n - \ufeff using System ; \n + using System ; \n using System . Collections . Generic ; \n using System . Diagnostics ; \n using System . IO ; \n protected override List < Result > QueryInternal ( Query query ) \n IcoPath = webSearch . IconPath , \n Action = ( c ) = > \n { \n - Process . Start ( webSearch . Url . Replace ( \" { q } \" , keyword ) ) ; \n + Process . Start ( webSearch . Url . Replace ( \" { q } \" , Uri . EscapeDataString ( keyword ) ) ) ; \n return true ; \n } \n } \n protected override List < Result > QueryInternal ( Query query ) \n IcoPath = webSearch . IconPath , \n Action = ( c ) = > \n { \n - Process . Start ( webSearch . Url . Replace ( \" { q } \" , o ) ) ; \n + Process . Start ( webSearch . Url . Replace ( \" { q } \" , Uri . EscapeDataString ( o ) ) ) ; \n return true ; \n } \n } ) . ToList ( ) ) ;", "msg": "WebSearch : convert search word to url encoding before opening the url\n"}
{"diff": "a / ICSharpCode . Decompiler / CSharp / Transforms / IntroduceExtensionMethods . cs \n  b / ICSharpCode . Decompiler / CSharp / Transforms / IntroduceExtensionMethods . cs \n public override void VisitInvocationExpression ( InvocationExpression invocationEx \n var or = rr . PerformOverloadResolution ( resolver . CurrentTypeResolveContext . Compilation , arguments , argumentNames , allowExtensionMethods : true ) ; \n if ( or = = null | | or . IsAmbiguous ) \n return false ; \n - return method . Equals ( or . GetBestCandidateWithSubstitutedTypeArguments ( ) ) ; \n + return method . Equals ( or . GetBestCandidateWithSubstitutedTypeArguments ( ) ) \n + & & CSharpResolver . IsEligibleExtensionMethod ( target . Type , method , useTypeInference : false , out _ ) ; \n } \n \n public static bool CanTransformToExtensionMethodCall ( IMethod method , CSharpTypeResolveContext resolveContext , bool ignoreTypeArguments = false , bool ignoreArgumentNames = true )", "msg": "Use extension method syntax only if the extension method is eligible .\n"}
{"diff": "a / Tools / Pipeline / Common / PipelineController . cs \n  b / Tools / Pipeline / Common / PipelineController . cs \n \n using System ; \n using System . Collections . Generic ; \n using System . Diagnostics ; \n + using System . Globalization ; \n using System . IO ; \n using System . Linq ; \n using System . Reflection ; \n + using System . Text ; \n using System . Threading . Tasks ; \n using MGCB ; \n using PathHelper = MonoGame . Framework . Content . Pipeline . Builder . PathHelper ; \n private void DoBuild ( string commands ) \n _buildProcess . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; \n _buildProcess . StartInfo . UseShellExecute = false ; \n _buildProcess . StartInfo . RedirectStandardOutput = true ; \n + _buildProcess . StartInfo . StandardOutputEncoding = Encoding . GetEncoding ( CultureInfo . CurrentCulture . TextInfo . OEMCodePage ) ; \n _buildProcess . OutputDataReceived + = ( sender , args ) = > View . OutputAppend ( args . Data ) ; \n \n / / Fire off the process .", "msg": "[ Pipeline ] International Support for Console text encoding\n"}
{"diff": "a / mcs / class / Microsoft . Build / Microsoft . Build . Internal / BuildNodeManager . cs \n  b / mcs / class / Microsoft . Build / Microsoft . Build . Internal / BuildNodeManager . cs \n public BuildNodeManager ( BuildManager buildManager ) \n void RunLoop ( ) \n { \n while ( run_loop ) { \n - if ( queued_builds . Count = = 0 ) { \n - queue_wait_handle . WaitOne ( ) ; \n + try { \n + if ( queued_builds . Count = = 0 ) { \n + queue_wait_handle . WaitOne ( ) ; \n + } \n + if ( ! run_loop ) \n + break ; \n + if ( ! queued_builds . Any ( ) ) \n + continue ; \n + var build = queued_builds . Dequeue ( ) ; \n + StartOneBuild ( build ) ; \n + } catch ( Exception ex ) { \n + Console . Error . WriteLine ( \" Uncaught build node exception occured \" ) ; \n + Console . Error . WriteLine ( ex ) ; \n } \n - if ( ! run_loop ) \n - break ; \n - if ( ! queued_builds . Any ( ) ) \n - continue ; \n - var build = queued_builds . Dequeue ( ) ; \n - StartOneBuild ( build ) ; \n } \n }", "msg": "dump possible build node exceptions that would have been silently ignored .\n"}
{"diff": "a / src / Avalonia . Build . Tasks / XamlCompilerTaskExecutor . Helpers . cs \n  b / src / Avalonia . Build . Tasks / XamlCompilerTaskExecutor . Helpers . cs \n public WrappedResource ( AssemblyDefinition asm , EmbeddedResource res ) \n _res = res ; \n } \n \n - public string Uri = > $ \" resm : { Name } ? assembly = { _asm . Name } \" ; \n + public string Uri = > $ \" resm : { Name } ? assembly = { _asm . Name . Name } \" ; \n public string Name = > _res . Name ; \n public byte [ ] GetData ( ) = > _res . GetResourceData ( ) ; \n public string FilePath = > Name ; \n class AvaloniaResource : IResource \n _data = data ; \n Name = name ; \n FilePath = Path . Combine ( projectDir , name . TrimStart ( ' / ' ) ) ; \n - Uri = $ \" avares : / / { grp . _asm . Name } / { name . TrimStart ( ' / ' ) } \" ; \n + Uri = $ \" avares : / / { grp . _asm . Name . Name } / { name . TrimStart ( ' / ' ) } \" ; \n } \n public string Uri { get ; } \n public string Name { get ; }", "msg": "Use regular assembly names for resource uris\n"}
{"diff": "a / src / Microsoft . AspNetCore . Http . Abstractions / StatusCodes . cs \n  b / src / Microsoft . AspNetCore . Http . Abstractions / StatusCodes . cs \n public static class StatusCodes \n public const int Status422UnprocessableEntity = 422 ; \n public const int Status423Locked = 423 ; \n public const int Status424FailedDependency = 424 ; \n + public const int Status451UnavailableForLegalReasons = 451 ; \n \n public const int Status500InternalServerError = 500 ; \n public const int Status501NotImplemented = 501 ;", "msg": "Added \" 451 Unavailable For Legal Reasons \" to StatusCodes\n"}
{"diff": "a / src / Captura / Windows / MainWindow . xaml . cs \n  b / src / Captura / Windows / MainWindow . xaml . cs \n \n \ufeff using System . Drawing ; \n + using System . Linq ; \n using Captura . Models ; \n using Captura . ViewModels ; \n using Captura . Views ; \n using System . Windows ; \n + using System . Windows . Forms ; \n using System . Windows . Input ; \n using System . Windows . Interop ; \n using Screna ; \n void RepositionWindowIfOutside ( ) \n ( int ) ( ActualWidth * Dpi . X ) , \n ( int ) ( ActualHeight * Dpi . Y ) ) ; \n \n - if ( ! WindowProvider . DesktopRectangle . Contains ( rect ) ) \n + if ( ! Screen . AllScreens . Any ( M = > M . Bounds . Contains ( rect ) ) ) \n { \n Left = 50 ; \n Top = 50 ;", "msg": "More reliable window repositioning on startup\n"}
{"diff": "a / Configuration / Config . cs \n  b / Configuration / Config . cs \n public static T GetValue < T > ( string key , T defaultValue = default ( T ) ) \n } \n \n var type = typeof ( T ) ; \n - var value = token . Value < string > ( ) ; \n + string value ; \n + try \n + { \n + value = token . Value < string > ( ) ; \n + } \n + catch ( Exception err ) \n + { \n + value = token . ToString ( ) ; \n + } \n + \n if ( type . IsEnum ) \n { \n return ( T ) Enum . Parse ( type , value ) ;", "msg": "Provides Config supprt for random types T\n"}
{"diff": "a / src / Microsoft . AspNet . SignalR . Core / Infrastructure / Connection . cs \n  b / src / Microsoft . AspNet . SignalR . Core / Infrastructure / Connection . cs \n public Task Send ( ConnectionMessage message ) \n \n private Message CreateMessage ( string key , object value ) \n { \n - var command = value as Command ; \n - \n - ArraySegment < byte > messageBuffer = GetMessageBuffer ( value ) ; \n + ArraySegment < byte > messageBuffer ; \n + / / We can ' t use \" as \" like we do for Command since ArraySegment is a struct \n + if ( value is ArraySegment < byte > ) \n + { \n + / / We assume that any ArraySegment < byte > is already JSON serialized \n + messageBuffer = ( ArraySegment < byte > ) value ; \n + } \n + else \n + { \n + messageBuffer = GetMessageBuffer ( value ) ; \n + } \n \n var message = new Message ( _connectionId , key , messageBuffer ) ; \n \n + var command = value as Command ; \n if ( command ! = null ) \n { \n / / Set the command id", "msg": "Added ability to send pre - serialized JSON via ArraySegment < byte >\n"}
{"diff": "a / src / Abp / AbpConsts . cs \n  b / src / Abp / AbpConsts . cs \n public static class AbpConsts \n / / / < summary > \n / / / Current version of the ABP . \n / / / < / summary > \n - public const string CurrentVersion = \" 0 . 7 . 8 . 1 \" ; \n + public const string CurrentVersion = \" 0 . 8 . 0 . 0 \" ; \n \n / / / < summary > \n / / / Localization source name of ASP . NET Boilerplate framework .", "msg": "Incremented version for the next release .\n"}
{"diff": "a / src / Compilers / CSharp / Portable / Binder / Binder_Patterns . cs \n  b / src / Compilers / CSharp / Portable / Binder / Binder_Patterns . cs \n internal BoundExpression ConvertPatternExpression ( TypeSymbol inputType , CSharpSy \n / / If we are pattern - matching against an open type , we do not convert the constant to the type of the input . \n / / This permits us to match a value of type ` IComparable < T > ` with a pattern of type ` int ` . \n bool inputContainsTypeParameter = inputType . ContainsTypeParameter ( ) ; \n - HashSet < DiagnosticInfo > useSiteDiagnostics = null ; \n if ( inputContainsTypeParameter ) \n { \n convertedExpression = expression ; \n + HashSet < DiagnosticInfo > useSiteDiagnostics = null ; \n if ( expression . ConstantValue = = ConstantValue . Null ) \n { \n if ( inputType . IsNonNullableValueType ( ) )", "msg": "Move a declaration closer to its point of use .\n"}
{"diff": "a / Algorithm / QCAlgorithm . Trading . cs \n  b / Algorithm / QCAlgorithm . Trading . cs \n public int MarketOrder ( string symbol , int quantity , bool asynchronous = false , s \n \n var order = new MarketOrder ( symbol , quantity , Time , tag , Securities [ symbol ] . Type ) ; \n \n + / / Set the rough price of the order for buying power calculations \n + order . Price = Securities [ symbol ] . Price ; \n + \n / / Add the order and create a new order Id . \n var orderId = Transactions . AddOrder ( order ) ;", "msg": "Set market price for market orders in QCAlgorithm Trading\n"}
{"diff": "a / Xamarin . Essentials / Clipboard / Clipboard . mac . cs \n  b / Xamarin . Essentials / Clipboard / Clipboard . mac . cs \n \n - \ufeff using System . Threading . Tasks ; \n + \ufeff using System . Collections . Generic ; \n + using System . Threading . Tasks ; \n using AppKit ; \n using Foundation ; \n \n static Task PlatformSetTextAsync ( string text ) \n static bool PlatformHasText = > \n Pasteboard . GetStringForType ( pasteboardType ) ! = null ; \n \n - static Task < string > PlatformGetTextAsync ( ) = > \n - Task . FromResult ( Pasteboard . GetStringForType ( pasteboardType ) ) ; \n + static Task < string > PlatformGetTextAsync ( ) \n + { \n + var strs = Pasteboard . ReadObjectsForClasses ( \n + new ObjCRuntime . Class [ ] { new ObjCRuntime . Class ( typeof ( NSString ) ) } , \n + null ) ; \n + \n + return Task . FromResult ( strs ? [ 0 ] ? . ToString ( ) ) ; \n + } \n \n static void StartClipboardListeners ( ) \n = > throw ExceptionUtils . NotSupportedOrImplementedException ;", "msg": "Support more pasteboard string types for macOS\n"}
{"diff": "a / osu . Game / Updater / SimpleUpdateManager . cs \n  b / osu . Game / Updater / SimpleUpdateManager . cs \n private string getBestUrl ( GitHubRelease release ) \n bestAsset = release . Assets ? . Find ( f = > f . Name . EndsWith ( \" . app . zip \" ) ) ; \n break ; \n \n + case RuntimeInfo . Platform . Linux : \n + bestAsset = release . Assets ? . Find ( f = > f . Name . EndsWith ( \" . AppImage \" ) ) ; \n + break ; \n + \n case RuntimeInfo . Platform . Android : \n / / on our testing device this causes the download to magically disappear . \n / / bestAsset = release . Assets ? . Find ( f = > f . Name . EndsWith ( \" . apk \" ) ) ;", "msg": "Add simple updater support for linux AppImages\n"}
{"diff": "a / InterfaceStubGenerator / Program . cs \n  b / InterfaceStubGenerator / Program . cs \n static void Main ( string [ ] args ) \n using ( var of = File . OpenWrite ( target . FullName ) ) { \n var bytes = Encoding . UTF8 . GetBytes ( template ) ; \n of . Write ( bytes , 0 , bytes . Length ) ; \n + of . Flush ( ) ; \n } \n }", "msg": "Blindly try to fix weird file skew issues\n"}
{"diff": "a / ReactiveUI . Platforms / Xaml / TransitioningContentControl . cs \n  b / ReactiveUI . Platforms / Xaml / TransitioningContentControl . cs \n void QueueTransition ( object oldContent , object newContent ) \n this . RaiseTransitionStarted ( ) ; \n VisualStateManager . GoToState ( this , startingTransitionName , false ) ; \n } \n + } else { \n + if ( this . currentContentPresentationSite ! = null ) \n + this . currentContentPresentationSite . Content = newContent ; \n } \n } \n \n public override void OnApplyTemplate ( ) \n \n this . previousContentPresentationSite = \n ( ContentPresenter ) GetTemplateChild ( \" PART_PreviousContentPresentationSite \" ) ; \n - if ( this . previousContentPresentationSite = = null ) { \n - throw new ArgumentException ( \" PART_PreviousContentPresentationSite not found . \" ) ; \n - } \n \n / / Set the current content site to the first piece of content . \n this . currentContentPresentationSite . Content = Content ;", "msg": "Allow templates for TCC not to have previous site\n"}
{"diff": "a / src / Jackett / Utils / TorznabCapsUtil . cs \n  b / src / Jackett / Utils / TorznabCapsUtil . cs \n public static IEnumerable < ReleaseInfo > FilterResultsToTitle ( IEnumerable < ReleaseI \n var filteredResults = new List < ReleaseInfo > ( ) ; \n foreach ( var result in results ) \n { \n + / / don ' t filter results with IMDBID ( will be filtered seperately ) \n + if ( result . Imdb ! = null ) \n + { \n + filteredResults . Add ( result ) ; \n + continue ; \n + } \n + \n if ( result . Title = = null ) \n continue ;", "msg": "PotatoFeed : disable title filtering for torrents with imdbid\n"}
{"diff": "a / src / iOS / Perspex . iOS / PerspexView . cs \n  b / src / iOS / Perspex . iOS / PerspexView . cs \n public override void TouchesMoved ( NSSet touches , UIEvent evt ) \n RawMouseEventType . Move , location , InputModifiers . LeftMouseButton ) ) ; \n else \n { \n - double x = location . X - _touchLastPoint . X ; \n - double y = location . Y - _touchLastPoint . Y ; \n + / / magic number based on test - correction of 0 . 02 is working perfect \n double correction = 0 . 02 ; \n - var scale = PerspexLocator . Current . GetService < IPlatformSettings > ( ) . RenderScalingFactor ; \n - scale = 1 ; \n \n Input ? . Invoke ( new RawMouseWheelEventArgs ( PerspexAppDelegate . MouseDevice , ( uint ) touch . Timestamp , \n - _inputRoot , location , new Vector ( x * correction / scale , y * correction / scale ) , InputModifiers . LeftMouseButton ) ) ; \n + _inputRoot , location , ( location - _touchLastPoint ) * correction , InputModifiers . LeftMouseButton ) ) ; \n } \n _touchLastPoint = location ; \n }", "msg": "no need for layout scale to be taken into account because touch events are already scaled\n"}
{"diff": "a / src / Analyzers / CSharp / Analyzers / MakeStructFieldsWritable / CSharpMakeStructFieldsWritableDiagnosticAnalyzer . cs \n  b / src / Analyzers / CSharp / Analyzers / MakeStructFieldsWritable / CSharpMakeStructFieldsWritableDiagnosticAnalyzer . cs \n private void AnalyzeAssignment ( OperationAnalysisContext operationContext , bool i \n } \n \n var operationAssigmnent = ( IAssignmentOperation ) operationContext . Operation ; \n - _hasTypeInstanceAssigment | = operationAssigmnent . Target is IInstanceReferenceOperation instance & & \n - instance . ReferenceKind = = InstanceReferenceKind . ContainingTypeInstance ; \n + if ( operationAssigmnent . Target is IInstanceReferenceOperation instance & & \n + instance . ReferenceKind = = InstanceReferenceKind . ContainingTypeInstance ) \n + { \n + _hasTypeInstanceAssigment = true ; \n + } \n } \n \n private void SymbolEndAction ( SymbolAnalysisContext symbolEndContext )", "msg": "Only write ' true ' for a proper latch in concurrent code\n"}
{"diff": "a / osu . Game . Rulesets . Taiko / UI / KiaiHitExplosion . cs \n  b / osu . Game . Rulesets . Taiko / UI / KiaiHitExplosion . cs \n public KiaiHitExplosion ( TaikoJudgement judgement , bool isRim ) \n Size = new Vector2 ( TaikoHitObject . DEFAULT_CIRCLE_DIAMETER , 1 ) ; \n \n Masking = true ; \n - Alpha = 0 . 15f ; \n + Alpha = 0 . 25f ; \n \n Children = new [ ] \n {", "msg": "Make kiai hit explosions slightly more prominent .\n"}
{"diff": "a / OpenRA . Mods . Common / Traits / World / SmudgeLayer . cs \n  b / OpenRA . Mods . Common / Traits / World / SmudgeLayer . cs \n public void AddSmudge ( CPos loc ) \n if ( ( ! dirty . ContainsKey ( loc ) | | dirty [ loc ] . Sprite = = null ) & & ! tiles . ContainsKey ( loc ) ) \n { \n / / No smudge ; create a new one \n - var st = smudges . Keys . Random ( world . SharedRandom ) ; \n + var st = smudges . Keys . Random ( Game . CosmeticRandom ) ; \n dirty [ loc ] = new Smudge { Type = st , Depth = 0 , Sprite = smudges [ st ] [ 0 ] } ; \n } \n else", "msg": "Use CosmeticRandom for picking smudge type .\n"}
{"diff": "a / mcs / class / corlib / System . Runtime . Remoting / ObjectHandle . cs \n  b / mcs / class / corlib / System . Runtime . Remoting / ObjectHandle . cs \n \n / / Authors : \n / / Dietmar Maurer ( dietmar @ ximian . com ) \n / / Gonzalo Paniagua ( gonzalo @ ximian . com ) \n + / / Jaime Anguiano Olarra ( jaime @ gnome . org ) \n / / \n / / ( C ) Ximian , Inc . http : / / www . ximian . com \n / / \n public ObjectHandle ( object o ) \n [ MonoTODO ] \n public override object InitializeLifetimeService ( ) \n { \n - life_ctrl = new object ( ) ; \n + life_ctrl = base . InitializeLifetimeService ( ) ; \n ILease ilife_ctrl = life_ctrl as ILease ; \n \n if ( ilife_ctrl ! = null )", "msg": "Started implementation for the InitializeLifetimeService method .\n"}
{"diff": "a / src / NzbDrone . Core / Indexers / Nyaa / NyaaSettings . cs \n  b / src / NzbDrone . Core / Indexers / Nyaa / NyaaSettings . cs \n public class NyaaSettings : ITorrentIndexerSettings \n public NyaaSettings ( ) \n { \n BaseUrl = \" \" ; \n - AdditionalParameters = \" & cats = 1_37 & filter = 1 \" ; \n + AdditionalParameters = \" & cats = 1_0 & filter = 1 \" ; \n MinimumSeeders = IndexerDefaults . MINIMUM_SEEDERS ; \n }", "msg": "Update indexer category parameters for the other nyaa\n"}
{"diff": "a / NzbDrone . Core / MediaFiles / EpisodeImport / ImportApprovedEpisodes . cs \n  b / NzbDrone . Core / MediaFiles / EpisodeImport / ImportApprovedEpisodes . cs \n public List < ImportDecision > Import ( List < ImportDecision > decisions , bool newDownl \n if ( newDownload ) \n { \n episodeFile = _episodeFileUpgrader . UpgradeEpisodeFile ( episodeFile , localEpisode ) ; \n + \n + if ( episodeFile = = null ) \n + { \n + _logger . Error ( \" Failed to move [ { 0 } ] , aborting processing \" , localEpisode ) ; \n + continue ; \n + } \n + \n _messageAggregator . PublishEvent ( new EpisodeImportedEvent ( episodeFile ) ) ; \n }", "msg": "Preventing more errors when move fails\n"}
{"diff": "a / src / Features / Core / Portable / NavigateTo / AbstractNavigateToSearchService . InProcess . cs \n  b / src / Features / Core / Portable / NavigateTo / AbstractNavigateToSearchService . InProcess . cs \n internal abstract partial class AbstractNavigateToSearchService \n { \n / / If the user created a dotted pattern then we ' ll grab the last part of the name \n var ( patternName , patternContainerOpt ) = PatternMatcher . GetNameAndContainer ( pattern ) ; \n - var nameMatcher = PatternMatcher . CreatePatternMatcher ( pattern , includeMatchedSpans : true , allowFuzzyMatching : true ) ; \n + var nameMatcher = PatternMatcher . CreatePatternMatcher ( patternName , includeMatchedSpans : true , allowFuzzyMatching : true ) ; \n \n var containerMatcher = patternContainerOpt ! = null \n ? PatternMatcher . CreateDotSeperatedContainerMatcher ( patternContainerOpt )", "msg": "use the righ tname for pattern matching .\n"}
{"diff": "a / src / Workspaces / Core / Portable / SymbolId / SymbolKey . SymbolKeyReader . cs \n  b / src / Workspaces / Core / Portable / SymbolId / SymbolKey . SymbolKeyReader . cs \n public override void Dispose ( ) \n Compilation = null ; \n IgnoreAssemblyKey = false ; \n Comparer = null ; \n + CurrentMethod = null ; \n \n / / Place us back in the pool for future use . \n s_readerPool . Free ( this ) ;", "msg": "Make sure to clear SymbolKeyReader . CurrentMethod before placing in pool\n"}
{"diff": "a / Brokerages / InteractiveBrokers / InteractiveBrokersBrokerage . cs \n  b / Brokerages / InteractiveBrokers / InteractiveBrokersBrokerage . cs \n public override void Connect ( ) \n { \n Log . Trace ( \" InteractiveBrokersBrokerage . Connect ( ) : Attempting to connect ( { 0 } / { 1 } ) . . . \" , attempt , maxAttempts ) ; \n \n + / / if we have errors from IBAutomater , exit immediately \n + if ( HasIbAutomaterErrors ( ) ) \n + { \n + attempt = maxAttempts ; \n + CheckIbAutomaterErrors ( ) ; \n + } \n + \n / / if message processing thread is still running , wait until it terminates \n Disconnect ( ) ; \n \n private void OnIbAutomaterExited ( object sender , ExitedEventArgs e ) \n Log . Trace ( $ \" InteractiveBrokersBrokerage . OnIbAutomaterExited ( ) : Exit code : { e . ExitCode } \" ) ; \n } \n \n + private bool HasIbAutomaterErrors ( ) \n + { \n + return _loginFailed | | _existingSessionDetected | | _securityDialogDetected ; \n + } \n + \n private void CheckIbAutomaterErrors ( ) \n { \n if ( _loginFailed )", "msg": "Do not attempt to reconnect after IBAutomater errors\n"}
{"diff": "a / src / Identity / Startup . cs \n  b / src / Identity / Startup . cs \n public void ConfigureServices ( IServiceCollection services ) \n . AddOpenIdConnect ( \" sso \" , \" Single Sign On \" , options = > \n { \n options . Authority = globalSettings . BaseServiceUri . Sso ; \n + options . MetadataAddress = globalSettings . BaseServiceUri . InternalSso ; \n options . RequireHttpsMetadata = ! Environment . IsDevelopment ( ) & & \n globalSettings . BaseServiceUri . InternalIdentity . StartsWith ( \" https \" ) ; \n options . ClientId = \" oidc - identity \" ;", "msg": "use internal sso for metadata address\n"}
{"diff": "a / osu . Game . Rulesets . Catch / Skinning / CatchLegacySkinTransformer . cs \n  b / osu . Game . Rulesets . Catch / Skinning / CatchLegacySkinTransformer . cs \n public Drawable GetDrawableComponent ( ISkinComponent component ) \n \n public SampleChannel GetSample ( ISampleInfo sample ) = > source . GetSample ( sample ) ; \n \n - public IBindable < TValue > GetConfig < TLookup , TValue > ( TLookup lookup ) = > source . GetConfig < TLookup , TValue > ( lookup ) ; \n + public IBindable < TValue > GetConfig < TLookup , TValue > ( TLookup lookup ) \n + { \n + switch ( lookup ) \n + { \n + case CatchSkinColour colour : \n + return source . GetConfig < SkinCustomColourLookup , TValue > ( new SkinCustomColourLookup ( colour ) ) ; \n + } \n + \n + return source . GetConfig < TLookup , TValue > ( lookup ) ; \n + } \n } \n }", "msg": "Transform CatchSkinColour lookup to skin configuration custom colours lookup\n"}
{"diff": "a / osu . Game / Rulesets / Objects / Drawables / DrawableHitObject . cs \n  b / osu . Game / Rulesets / Objects / Drawables / DrawableHitObject . cs \n public abstract class DrawableHitObject : Container , IHasAccentColour \n \n public override bool RemoveCompletedTransforms = > false ; \n public override bool RemoveWhenNotAlive = > false ; \n + protected override bool RequiresChildrenUpdate = > true ; \n \n protected DrawableHitObject ( HitObject hitObject ) \n {", "msg": "Run child updates for nested hitobjects when parent hitobjects are masked\n"}
{"diff": "a / Common / Data / Market / TradeBar . cs \n  b / Common / Data / Market / TradeBar . cs \n public TradeBar ( ) \n / / / Return a new instance with the same values as this original . \n / / / < / summary > \n / / / < param name = \" original \" > Original tradebar object we seek to clone < / param > \n - public TradeBar ( TradeBar original ) \n + public TradeBar ( TradeBar original ) \n { \n + DataType = MarketDataType . TradeBar ; \n Time = new DateTime ( original . Time . Ticks ) ; \n Symbol = original . Symbol ; \n Value = original . Close ; \n public TradeBar ( DateTime time , string symbol , decimal open , decimal high , decima \n Close = close ; \n Volume = volume ; \n Period = period ? ? TimeSpan . FromMinutes ( 1 ) ; \n + DataType = MarketDataType . TradeBar ; \n } \n \n / / / < summary >", "msg": "Require TradeBar ctors to set TradeBar data type\n"}
{"diff": "a / osu . Game / Rulesets / Mods / ModCinema . cs \n  b / osu . Game / Rulesets / Mods / ModCinema . cs \n public class ModCinema : ModAutoplay , IApplicableToHUD , IApplicableToPlayer \n \n public void ApplyToHUD ( HUDOverlay overlay ) \n { \n - overlay . AlwaysPresent = true ; \n - overlay . Hide ( ) ; \n + overlay . ShowHud . Value = false ; \n + overlay . ShowHud . Disabled = true ; \n } \n \n public void ApplyToPlayer ( Player player )", "msg": "Hide HUD in a better way\n"}
{"diff": "a / Extensions / dnSpy . Debugger / dnSpy . Debugger / Breakpoints / Code / CondChecker / TracepointMessageCreator . cs \n  b / Extensions / dnSpy . Debugger / dnSpy . Debugger / Breakpoints / Code / CondChecker / TracepointMessageCreator . cs \n struct KeywordInfo { \n textPos + = 2 ; \n break ; \n } \n + else { \n + bool ok = true ; \n + switch ( c ) { \n + case ' a ' : Write ( ' \\ a ' ) ; break ; \n + case ' b ' : Write ( ' \\ b ' ) ; break ; \n + case ' f ' : Write ( ' \\ f ' ) ; break ; \n + case ' n ' : Write ( ' \\ n ' ) ; break ; \n + case ' r ' : Write ( ' \\ r ' ) ; break ; \n + case ' t ' : Write ( ' \\ t ' ) ; break ; \n + case ' v ' : Write ( ' \\ v ' ) ; break ; \n + default : \n + ok = false ; \n + break ; \n + } \n + if ( ok ) { \n + textPos + = 2 ; \n + break ; \n + } \n + } \n } \n goto default ;", "msg": "Trace msg : allow more escape sequences\n"}
{"diff": "a / osu . Game / Database / ArchiveModelManager . cs \n  b / osu . Game / Database / ArchiveModelManager . cs \n public void Undelete ( List < TModel > items , bool silent = false ) \n \n int i = 0 ; \n \n - using ( ContextFactory . GetForWrite ( ) ) \n + foreach ( var item in items ) \n { \n - foreach ( var item in items ) \n - { \n - if ( notification . State = = ProgressNotificationState . Cancelled ) \n - / / user requested abort \n - return ; \n + if ( notification . State = = ProgressNotificationState . Cancelled ) \n + / / user requested abort \n + return ; \n \n - notification . Text = $ \" Restoring ( { + + i } of { items . Count } ) \" ; \n + notification . Text = $ \" Restoring ( { + + i } of { items . Count } ) \" ; \n \n - Undelete ( item ) ; \n + Undelete ( item ) ; \n \n - notification . Progress = ( float ) i / items . Count ; \n - } \n + notification . Progress = ( float ) i / items . Count ; \n } \n \n notification . State = ProgressNotificationState . Completed ;", "msg": "Only lock database for the duration of a model restoration\n"}
{"diff": "a / src / ServiceStack / HttpError . cs \n  b / src / ServiceStack / HttpError . cs \n public HttpError ( string message ) \n : this ( HttpStatusCode . InternalServerError , message ) \n { } \n \n - public HttpError ( HttpStatusCode statusCode , string errorCode ) \n - : this ( statusCode , errorCode , null ) \n + public HttpError ( HttpStatusCode statusCode , string errorMessage ) \n + : this ( statusCode , statusCode . ToString ( ) , errorMessage ) \n { } \n \n public HttpError ( int statusCode , string errorCode )", "msg": "Use the status code string as the error code in HttpError with HttpStatusCode + message\n"}
{"diff": "a / Common / Data / Custom / Quandl . cs \n  b / Common / Data / Custom / Quandl . cs \n public class Quandl : DynamicData \n / / / < summary > \n / / / Is the auth \n / / / < / summary > \n - private static bool IsAuthCodeSet \n + public static bool IsAuthCodeSet \n { \n get ; \n - set ; \n + private set ; \n } \n \n / * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n private static bool IsAuthCodeSet \n / / / < / summary > \n public Quandl ( ) \n { \n + base . EndTime = Time + TimeSpan . FromDays ( 1 ) ; \n _valueColumn = \" Close \" ; \n }", "msg": "Quandl update to have default time span of 1 day , closes\n"}
{"diff": "a / src / Components / WebAssembly / Sdk / integrationtests / WasmPublishIntegrationTest . cs \n  b / src / Components / WebAssembly / Sdk / integrationtests / WasmPublishIntegrationTest . cs \n public async Task Publish_HostedApp_ProducesBootJsonDataWithExpectedContent ( ) \n Assert . Contains ( \" System . Text . Json . dll \" , assemblies ) ; \n \n / / No pdbs \n - / / Testing this requires an update to the SDK in this repo . Re - enabling tracked via https : / / github . com / dotnet / aspnetcore / issues / 25135 \n - / / Assert . Null ( bootJsonData . resources . pdb ) ; \n + Assert . Null ( bootJsonData . resources . pdb ) ; \n Assert . Null ( bootJsonData . resources . satelliteResources ) ; \n \n Assert . Contains ( \" appsettings . json \" , bootJsonData . config ) ;", "msg": "Re - enable assertion for pdbs during WASM publish ( )\n"}
{"diff": "a / src / libraries / System . Net . HttpListener / tests / HttpListenerPrefixCollectionTests . cs \n  b / src / libraries / System . Net . HttpListener / tests / HttpListenerPrefixCollectionTests . cs \n public void Contains_NullPrefix_ThrowsArgumentNullException ( ) \n Assert . Throws < ArgumentNullException > ( \" key \" , ( ) = > listener . Prefixes . Contains ( null ) ) ; \n } \n \n + [ ActiveIssue ( 19526 ) ] \n [ Fact ] \n public void Remove_PrefixExistsNotStarted_ReturnsTrue ( ) \n { \n public void Remove_PrefixExistsNotStarted_ReturnsTrue ( ) \n Assert . Equal ( 0 , listener . Prefixes . Count ) ; \n } \n \n + [ ActiveIssue ( 19526 ) ] \n [ Fact ] \n public async Task Remove_PrefixExistsStarted_ReturnsTrue ( ) \n {", "msg": "Disable more recently added HttpListener tests\n"}
{"diff": "a / Duplicati / Server / WebServer / RESTMethods / Backups . cs \n  b / Duplicati / Server / WebServer / RESTMethods / Backups . cs \n private void ImportBackup ( RequestInfo info ) \n { \n var input = info . Request . Form ; \n var cmdline = Library . Utility . Utility . ParseBool ( input [ \" cmdline \" ] . Value , false ) ; \n + var import_metadata = Library . Utility . Utility . ParseBool ( input [ \" import_metadata \" ] . Value , false ) ; \n var direct = Library . Utility . Utility . ParseBool ( input [ \" direct \" ] . Value , false ) ; \n output_template = output_template . Replace ( \" CBM \" , input [ \" callback \" ] . Value ) ; \n if ( cmdline ) \n private void ImportBackup ( RequestInfo info ) \n ipx = Serializer . Deserialize < Serializable . ImportExportStructure > ( sr ) ; \n } \n } \n + if ( ! import_metadata ) { \n + ipx . Backup . Metadata . Clear ( ) ; \n + } \n \n ipx . Backup . ID = null ; \n ( ( Database . Backup ) ipx . Backup ) . DBPath = null ;", "msg": "added backend code to support stripping metadata from imported backup configs\n"}
{"diff": "a / src / ServiceStack / Auth / UserAuth . cs \n  b / src / ServiceStack / Auth / UserAuth . cs \n public UserAuth ( ) \n public virtual int InvalidLoginAttempts { get ; set ; } \n public virtual DateTime ? LastLoginAttempt { get ; set ; } \n public virtual DateTime ? LockedDate { get ; set ; } \n + public virtual string RecoveryToken { get ; set ; } \n \n / / Custom Reference Data \n public virtual int ? RefId { get ; set ; }", "msg": "Add RecoveryToken to UserAuth for future password recovery functionality\n"}
{"diff": "a / osu . Game / Screens / Select / BeatmapCarousel . cs \n  b / osu . Game / Screens / Select / BeatmapCarousel . cs \n protected override void Update ( ) \n if ( revalidateItems ) \n updateYPositions ( ) ; \n \n + if ( ! scrollPositionCache . IsValid ) \n + updateScrollPosition ( ) ; \n + \n / / This data is consumed to find the currently displayable range . \n / / This is the range we want to keep drawables for , and should exceed the visible range slightly to avoid drawable churn . \n var newDisplayRange = getDisplayRange ( ) ; \n protected override void Update ( ) \n return ( firstIndex , lastIndex ) ; \n } \n \n - protected override void UpdateAfterChildren ( ) \n - { \n - base . UpdateAfterChildren ( ) ; \n - \n - if ( ! scrollPositionCache . IsValid ) \n - updateScrollPosition ( ) ; \n - } \n - \n private void beatmapRemoved ( ValueChangedEvent < WeakReference < BeatmapSetInfo > > weakItem ) \n { \n if ( weakItem . NewValue . TryGetTarget ( out var item ) )", "msg": "Update scroll position before applying any panel animations\n"}
{"diff": "a / CefSharp / WebBrowserExtensions . cs \n  b / CefSharp / WebBrowserExtensions . cs \n public static void AddWordToDictionary ( this IBrowser cefBrowser , string word ) \n host . AddWordToDictionary ( word ) ; \n } \n \n + / / / < summary > \n + / / / Shortcut method to get the browser IBrowserHost \n + / / / < / summary > \n + / / / < param name = \" browser \" > The ChromiumWebBrowser instance this method extends < / param > \n + / / / < returns > browserHost or null < / returns > \n + public static IBrowserHost GetHost ( IWebBrowser browser ) \n + { \n + var cefBrowser = browser . GetBrowser ( ) ; \n + \n + return cefBrowser = = null ? null : cefBrowser . GetHost ( ) ; \n + } \n + \n / / / < summary > \n / / / Add the specified word to the spelling dictionary . \n / / / < / summary >", "msg": "Add IWebBrowser . GetHost ( ) extension method - make it easier to directly get the IBrowserHost reference\n"}
{"diff": "a / src / Analyzers / Core / Analyzers / RemoveRedundantEquality / AbstractRemoveRedundantEqualityDiagnosticAnalyzer . cs \n  b / src / Analyzers / Core / Analyzers / RemoveRedundantEquality / AbstractRemoveRedundantEqualityDiagnosticAnalyzer . cs \n private void AnalyzeBinaryOperator ( OperationAnalysisContext context ) \n return ; \n } \n \n + if ( ! _syntaxFacts . IsBinaryExpression ( operation . Syntax ) ) \n + { \n + return ; \n + } \n + \n var rightOperand = operation . RightOperand ; \n var leftOperand = operation . LeftOperand ; \n if ( rightOperand . Type . SpecialType is not SpecialType . System_Boolean | |", "msg": "Check IsBinaryExpression to avoid invalid cast\n"}
{"diff": "a / ArchiSteamFarm / Bot . cs \n  b / ArchiSteamFarm / Bot . cs \n public sealed class Bot : IDisposable { \n SteamConfiguration = SteamConfiguration . Create ( builder = > builder . WithProtocolTypes ( ASF . GlobalConfig . SteamProtocols ) . WithCellID ( ASF . GlobalDatabase . CellID ) . WithServerListProvider ( ASF . GlobalDatabase . ServerListProvider ) . WithHttpClientFactory ( ArchiWebHandler . GenerateDisposableHttpClient ) ) ; \n \n / / Initialize \n - SteamClient = new SteamClient ( SteamConfiguration ) ; \n + SteamClient = new SteamClient ( SteamConfiguration , botName ) ; \n \n if ( Debugging . IsUserDebugging & & Directory . Exists ( SharedInfo . DebugDirectory ) ) { \n string debugListenerPath = Path . Combine ( SharedInfo . DebugDirectory , botName ) ;", "msg": "Use botName identifier for new SteamClient logging context\n"}
{"diff": "a / StackExchange . Redis / StackExchange / Redis / ConnectionMultiplexer . cs \n  b / StackExchange . Redis / StackExchange / Redis / ConnectionMultiplexer . cs \n internal T ExecuteSyncImpl < T > ( Message message , ResultProcessor < T > processor , Ser \n add ( \" Active - Readers \" , \" ar \" , ar . ToString ( ) ) ; \n \n add ( \" Client - Name \" , \" clientName \" , ClientName ) ; \n + add ( \" Server - Endpoint \" , \" serverEndpoint \" , server . EndPoint . ToString ( ) ) ; \n + var hashSlot = message . GetHashSlot ( this . ServerSelectionStrategy ) ; \n + / / only add keyslot if its a valid cluster key slot \n + if ( hashSlot ! = ServerSelectionStrategy . NoSlot ) \n + { \n + add ( \" CommandKey - Slot \" , \" commandKeySlot \" , message . GetHashSlot ( this . ServerSelectionStrategy ) . ToString ( ) ) ; \n + } \n # if ! CORE_CLR \n string iocp , worker ; \n int busyWorkerCount = GetThreadPoolStats ( out iocp , out worker ) ;", "msg": "adding server info and slot information to debug info\n"}
{"diff": "a / ShareX . UploadersLib / FileUploaders / Up1 . cs \n  b / ShareX . UploadersLib / FileUploaders / Up1 . cs \n private static MemoryStream Encrypt ( Stream source , string fileName , out string s \n aes . CngMode = CngChainingMode . Ccm ; \n aes . Key = key ; \n aes . IV = ccmIV ; \n + aes . TagSize = MacSize ; \n \n MemoryStream ms = new MemoryStream ( ) ; \n \n private static MemoryStream Encrypt ( Stream source , string fileName , out string s \n CryptoStream cs = new CryptoStream ( ms , encryptor , CryptoStreamMode . Write ) ; \n cs . Write ( data , 0 , data . Length ) ; \n cs . FlushFinalBlock ( ) ; \n - / / tag = encryptor . GetTag ( ) ; \n + byte [ ] tag = encryptor . GetTag ( ) ; \n + ms . Write ( tag , 0 , tag . Length ) ; \n return ms ; \n } \n }", "msg": "Set tag size , append tag to fix Up1 support using new library\n"}
{"diff": "a / mRemoteV1 / Config / Connections / XmlConnectionsLoader . cs \n  b / mRemoteV1 / Config / Connections / XmlConnectionsLoader . cs \n public void LoadFromXml ( bool import ) \n ValidateConnectionFileVersion ( ) ; \n \n / / SECTION 2 . Initialize the treeview control . \n - var rootNodeName = \" \" ; \n - if ( _xmlDocument . DocumentElement . HasAttribute ( \" Name \" ) ) \n - rootNodeName = Convert . ToString ( _xmlDocument . DocumentElement . Attributes [ \" Name \" ] . Value . Trim ( ) ) ; \n - RootTreeNode . Name = ! string . IsNullOrEmpty ( rootNodeName ) ? rootNodeName : _xmlDocument . DocumentElement . Name ; \n - RootTreeNode . Text = RootTreeNode . Name ; \n - \n - var rootInfo = new RootNodeInfo ( RootNodeType . Connection ) \n - { \n - Name = RootTreeNode . Name , \n - TreeNode = RootTreeNode \n - } ; \n - RootTreeNode . Tag = rootInfo ; \n + var rootInfo = InitializeRootNode ( ) ; \n \n if ( _confVersion > 1 . 3 ) / / 1 . 4 \n {", "msg": "Extracted method for initializing the root tree node\n"}
{"diff": "a / NzbDrone . Core / Providers / Jobs / SeasonSearchJob . cs \n  b / NzbDrone . Core / Providers / Jobs / SeasonSearchJob . cs \n public virtual void Start ( ProgressNotification notification , int targetId , int s \n var missingEpisodes = episodeNumbers . Except ( addedSeries ) . ToList ( ) ; \n \n / / Only process episodes that is in missing episodes ( To ensure we double check if the episode is available ) \n - foreach ( var episode in episodes . Where ( e = > ! e . Ignored & & missingEpisodes . Contains ( e . EpisodeNumber ) ) ) \n + foreach ( var episode in episodes . Where ( e = > ! e . Ignored & & missingEpisodes . Contains ( e . EpisodeNumber ) ) . OrderBy ( o = > o . EpisodeNumber ) ) \n { \n _episodeSearchJob . Start ( notification , episode . EpisodeId , 0 ) ; \n }", "msg": "Season searching fallback to individual episodes will done in order from 1 to n .\n"}
{"diff": "a / OpenRA . Game / Graphics / TerrainRenderer . cs \n  b / OpenRA . Game / Graphics / TerrainRenderer . cs \n public TerrainRenderer ( World world , WorldRenderer wr ) \n int nv = 0 ; \n \n for ( var j = map . Bounds . Top ; j < map . Bounds . Bottom ; j + + ) \n + { \n for ( var i = map . Bounds . Left ; i < map . Bounds . Right ; i + + ) \n { \n var tile = wr . Theater . TileSprite ( map . MapTiles . Value [ i , j ] ) ; \n - Util . FastCreateQuad ( vertices , Game . CellSize * new float2 ( i , j ) , tile , terrainPalette , nv , tile . size ) ; \n + var pos = wr . ScreenPosition ( new CPos ( i , j ) . CenterPosition ) - 0 . 5f * tile . size ; \n + Util . FastCreateQuad ( vertices , pos , tile , terrainPalette , nv , tile . size ) ; \n nv + = 4 ; \n } \n + } \n \n vertexBuffer = Game . Renderer . Device . CreateVertexBuffer ( vertices . Length ) ; \n vertexBuffer . SetData ( vertices , nv ) ;", "msg": "Convert terrain rendering to world coords .\n"}
{"diff": "a / framework / src / Volo . Abp . AspNetCore . Mvc . UI / Volo / Abp / ObjectExtending / MvcUiObjectExtensionPropertyInfoExtensions . cs \n  b / framework / src / Volo . Abp . AspNetCore . Mvc . UI / Volo / Abp / ObjectExtending / MvcUiObjectExtensionPropertyInfoExtensions . cs \n public static class MvcUiObjectExtensionPropertyInfoExtensions \n typeof ( ulong ) , \n typeof ( float ) , \n typeof ( double ) , \n + typeof ( decimal ) , \n typeof ( int ? ) , \n typeof ( long ? ) , \n typeof ( byte ? ) , \n public static class MvcUiObjectExtensionPropertyInfoExtensions \n typeof ( ulong ? ) , \n typeof ( float ? ) , \n typeof ( double ? ) , \n + typeof ( decimal ? ) \n } ; \n \n public static string GetInputFormatOrNull ( this IBasicObjectExtensionPropertyInfo property )", "msg": "Add decimal to NumberTypes for extension properties\n"}
{"diff": "a / src / Hangfire . Core / Server / BackgroundProcessingServer . cs \n  b / src / Hangfire . Core / Server / BackgroundProcessingServer . cs \n private static IServerProcess WrapProcess ( IServerProcess process ) \n \n private static string GetGloballyUniqueServerId ( ) \n { \n - return $ \" { Environment . GetEnvironmentVariable ( \" COMPUTERNAME \" ) . ToLowerInvariant ( ) } : { Process . GetCurrentProcess ( ) . Id } : { Guid . NewGuid ( ) } \" ; \n + var hostName = Environment . GetEnvironmentVariable ( \" COMPUTERNAME \" ) \n + ? ? Environment . GetEnvironmentVariable ( \" HOSTNAME \" ) ; \n + \n + return $ \" { hostName . ToLowerInvariant ( ) } : { Process . GetCurrentProcess ( ) . Id } : { Guid . NewGuid ( ) } \" ; \n } \n \n private static ServerContext GetServerContext ( IReadOnlyDictionary < string , object > properties )", "msg": "Use HOSTNAME environment variable for unix\n"}
{"diff": "a / src / Abp . AspNetCore / AspNetCore / EntityHistory / HttpRequestEntityChangeSetReasonProvider . cs \n  b / src / Abp . AspNetCore / AspNetCore / EntityHistory / HttpRequestEntityChangeSetReasonProvider . cs \n \n using JetBrains . Annotations ; \n using Microsoft . AspNetCore . Http ; \n using Microsoft . AspNetCore . Http . Extensions ; \n + using System ; \n \n namespace Abp . AspNetCore . EntityHistory \n { \n public override string Reason \n return OverridedValue . Reason ; \n } \n \n - return HttpContextAccessor . HttpContext ? . Request . GetDisplayUrl ( ) ; \n + try \n + { \n + return HttpContextAccessor . HttpContext ? . Request . GetDisplayUrl ( ) ; \n + } \n + catch ( NullReferenceException ) \n + { \n + / / Workaround : https : / / github . com / aspnet / Home / issues / 2718 \n + return null ; \n + } \n } \n }", "msg": "Add workaround for exception from GetDisplayUrl\n"}
{"diff": "a / src / Features / LanguageServer / Protocol / Handler / Initialize / InitializeHandler . cs \n  b / src / Features / LanguageServer / Protocol / Handler / Initialize / InitializeHandler . cs \n internal class InitializeHandler : IRequestHandler < InitializeParams , InitializeR \n } \n } ; \n \n - public Task < InitializeResult > HandleRequestAsync ( Solution solution , InitializeParams request , ClientCapabilities clientCapabilities , CancellationToken cancellationToken ) \n + public Task < InitializeResult > HandleRequestAsync ( Solution solution , InitializeParams request , ClientCapabilities clientCapabilities , CancellationToken cancellationToken , bool keepThreadContext = false ) \n = > Task . FromResult ( s_initializeResult ) ; \n } \n }", "msg": "Use thread context parameter for initialize .\n"}
{"diff": "a / src / Tests / Nop . Services . Tests / Payments / TestPaymentMethod . cs \n  b / src / Tests / Nop . Services . Tests / Payments / TestPaymentMethod . cs \n public ProcessPaymentRequest GetPaymentInfo ( IFormCollection form ) \n } \n \n / / / < summary > \n - / / / Gets a view component for displaying plugin in public store ( \" payment info \" checkout step ) \n + / / / Gets a name of a view component for displaying plugin in public store ( \" payment info \" checkout step ) \n / / / < / summary > \n - / / / < param name = \" viewComponentName \" > View component name < / param > \n - public void GetPublicViewComponent ( out string viewComponentName ) \n + / / / < returns > View component name < / returns > \n + public string GetPublicViewComponentName ( ) \n { \n - viewComponentName = null ; \n + return null ; \n }", "msg": "Minor addition to the previous commit\n"}
{"diff": "a / SignalR / MessageBus / MessageBus . cs \n  b / SignalR / MessageBus / MessageBus . cs \n public void AddOrUpdateCursor ( string key , ulong id , Topic topic ) \n { \n / / O ( n ) , but small n and it ' s not common \n var index = _cursors . FindIndex ( c = > c . Key = = key ) ; \n - if ( index ! = - 1 ) \n - { \n - Cursor cursor = _cursors [ index ] ; \n - cursor . Id = id ; \n - cursor . Topic = topic ; \n - } \n - else \n + if ( index = = - 1 ) \n { \n _cursors . Add ( new Cursor \n { \n public void PumpImpl ( TaskCompletionSource < object > taskCompletionSource ) \n { \n while ( _queue . Count = = 0 ) \n { \n - Monitor . Wait ( _queue ) ; \n + if ( ! Monitor . Wait ( _queue , TimeSpan . FromSeconds ( 5 ) ) ) \n + { \n + taskCompletionSource . TrySetResult ( null ) ; \n + return ; \n + } \n } \n \n subscription = _queue . Dequeue ( ) ;", "msg": "Don ' t modify the group cursor if subscriber is already part of the group .\n"}
{"diff": "a / osu . Game / Screens / Select / SongSelect . cs \n  b / osu . Game / Screens / Select / SongSelect . cs \n public override void OnResuming ( IScreen last ) \n if ( Beatmap ! = null & & ! Beatmap . Value . BeatmapSetInfo . DeletePending ) \n { \n UpdateBeatmap ( Beatmap . Value ) ; \n - ensurePlayingSelected ( true ) ; \n + ensurePlayingSelected ( ) ; \n } \n \n base . OnResuming ( last ) ;", "msg": "Restore previous resume behaviour for the time being\n"}
{"diff": "a / src / Presentation / Nop . Web / Areas / Admin / Infrastructure / Mapper / AdminMapperConfiguration . cs \n  b / src / Presentation / Nop . Web / Areas / Admin / Infrastructure / Mapper / AdminMapperConfiguration . cs \n protected virtual void CreateTasksMaps ( ) \n { \n CreateMap < ScheduleTask , ScheduleTaskModel > ( ) ; \n CreateMap < ScheduleTaskModel , ScheduleTask > ( ) \n - . ForMember ( entity = > entity . Type , options = > options . Ignore ( ) ) ; \n + . ForMember ( entity = > entity . Type , options = > options . Ignore ( ) ) \n + . ForMember ( entity = > entity . LastStartUtc , options = > options . Ignore ( ) ) \n + . ForMember ( entity = > entity . LastEndUtc , options = > options . Ignore ( ) ) \n + . ForMember ( entity = > entity . LastSuccessUtc , options = > options . Ignore ( ) ) ; \n } \n \n / / / < summary >", "msg": "Fixed automapper settings for schedule models\n"}
{"diff": "a / OpenRA . Game / Settings . cs \n  b / OpenRA . Game / Settings . cs \n public static string SanitizedPlayerName ( string dirty ) \n \n var clean = SanitizedName ( dirty ) ; \n \n + if ( string . IsNullOrWhiteSpace ( clean ) | | forbiddenNames . Contains ( clean ) | | botNames . Contains ( clean ) ) \n + clean = new PlayerSettings ( ) . Name ; \n + \n / / avoid UI glitches \n if ( clean . Length > 16 ) \n clean = clean . Substring ( 0 , 16 ) ; \n \n - if ( string . IsNullOrWhiteSpace ( clean ) | | forbiddenNames . Contains ( clean ) | | botNames . Contains ( clean ) ) \n - clean = new PlayerSettings ( ) . Name ; \n - \n return clean ; \n }", "msg": "move the null check to avoid a crash\n"}
{"diff": "a / Plugins / Wox . Plugin . ControlPanel / Main . cs \n  b / Plugins / Wox . Plugin . ControlPanel / Main . cs \n public void Init ( PluginInitContext context ) \n } \n } \n \n - var characters = controlPanelItems . Select ( i = > i . LocalizedString ) \n - . Concat ( controlPanelItems . Select ( i = > i . InfoTip ) ) ; \n - \n - Parallel . ForEach ( characters , c = > \n + Task . Run ( ( ) = > \n { \n - if ( ! string . IsNullOrWhiteSpace ( c ) & & Alphabet . ContainsChinese ( c ) ) \n + var characters = controlPanelItems . Select ( i = > i . LocalizedString ) \n + . Concat ( controlPanelItems . Select ( i = > i . InfoTip ) ) ; \n + \n + Parallel . ForEach ( characters , c = > \n { \n - Alphabet . PinyinComination ( c ) ; \n - } \n + if ( ! string . IsNullOrWhiteSpace ( c ) & & Alphabet . ContainsChinese ( c ) ) \n + { \n + Alphabet . PinyinComination ( c ) ; \n + } \n + } ) ; \n } ) ; \n }", "msg": "faster startup time for control panel plugin\n"}
{"diff": "a / src / Abp / Application / Services / Dto / NullableIdInput . cs \n  b / src / Abp / Application / Services / Dto / NullableIdInput . cs \n public NullableIdInput ( ) \n \n } \n \n - public NullableIdInput ( TId id ) \n + public NullableIdInput ( TId ? id ) \n { \n Id = id ; \n } \n public NullableIdInput ( ) \n \n } \n \n - public NullableIdInput ( int id ) \n + public NullableIdInput ( int ? id ) \n : base ( id ) \n {", "msg": "Changed constructor signature for NullableIdInput to nullable .\n"}
{"diff": "a / OpenRA . Utility / UpgradeRules . cs \n  b / OpenRA . Utility / UpgradeRules . cs \n static void UpgradeActorRules ( int engineVersion , ref List < MiniYamlNode > nodes , M \n } \n } \n \n + / / \" disabled \" palette overlay has been moved into it ' s own DisabledOverlay trait \n + if ( engineVersion < 20140305 ) \n + { \n + if ( node . Value . Nodes . Any ( n = > n . Key . StartsWith ( \" RequiresPower \" ) ) \n + & & ! node . Value . Nodes . Any ( n = > n . Key . StartsWith ( \" DisabledOverlay \" ) ) ) \n + { \n + node . Value . Nodes . Add ( new MiniYamlNode ( \" DisabledOverlay \" , new MiniYaml ( \" \" ) ) ) ; \n + } \n + } \n + \n / / ChronoshiftDeploy was replaced with PortableChrono \n if ( engineVersion < 20140321 ) \n {", "msg": "automatic upgrade rules for new DisabledOverlay\n"}
{"diff": "a / src / Polly . Net35 / HandledPolicySyntax . cs \n  b / src / Polly . Net35 / HandledPolicySyntax . cs \n public static HandledPolicy RollbackWith ( this HandledPolicy policy , Action actio \n throw policy . InnerException ; \n } \n \n + / / / < summary > \n + / / / \n + / / / < / summary > \n + / / / < param name = \" policy \" > < / param > \n + / / / < param name = \" action \" > < / param > \n + / / / < returns > < / returns > \n + public static HandledPolicy FollowedBy ( this HandledPolicy policy , Action < HandledPolicy > action ) \n + { \n + if ( ! policy . HasException ) return policy ; \n + \n + action ( policy ) ; \n + \n + return policy ; \n + } \n } \n } \n \\ No newline at end of file", "msg": "FollowedBy added to easily add methods to the method chain .\n"}
{"diff": "a / src / IdentityServer4 / Validation / Models / ValidatedEndSessionRequest . cs \n  b / src / IdentityServer4 / Validation / Models / ValidatedEndSessionRequest . cs \n namespace IdentityServer4 . Validation \n / / / < / summary > \n public class ValidatedEndSessionRequest : ValidatedRequest \n { \n + / / / < summary > \n + / / / Gets a value indicating whether this instance is authenticated . \n + / / / < / summary > \n + / / / < value > \n + / / / < c > true < / c > if this instance is authenticated ; otherwise , < c > false < / c > . \n + / / / < / value > \n + public bool IsAuthenticated = > Client ! = null ; \n + \n / / / < summary > \n / / / Gets or sets the client . \n / / / < / summary >", "msg": "add property for authenticated request\n"}
{"diff": "a / mcs / class / Mainsoft . Web / Mainsoft . Web . Hosting / ServletWorkerRequest . jvm . cs \n  b / mcs / class / Mainsoft . Web / Mainsoft . Web . Hosting / ServletWorkerRequest . jvm . cs \n enum KnownServerVariable { \n / / the one containing more information wins . \n if ( contextPath . Length + servletPath . Length > requestURI . Length ) \n requestURI = contextPath + servletPath ; \n - \n + else { \n + int contextPos = requestURI . IndexOf ( contextPath , StringComparison . Ordinal ) ; \n + if ( contextPos > 0 ) \n + requestURI = requestURI . Substring ( contextPos ) ; \n + } \n + \n _requestUri = Uri . UnescapeDataString ( requestURI ) ; \n const int dotInvokeLength = 7 ; / / \" . invoke \" . Length \n if ( _requestUri . Length > dotInvokeLength & &", "msg": "Request Uri fixing to context root path\n"}
{"diff": "a / src / VisualStudio / Core / Def / Implementation / Preview / PreviewUpdater . PreviewDialogWorkspace . cs \n  b / src / VisualStudio / Core / Def / Implementation / Preview / PreviewUpdater . PreviewDialogWorkspace . cs \n \n using System . Threading . Tasks ; \n using Microsoft . CodeAnalysis ; \n using Microsoft . CodeAnalysis . Editor . Shared . Preview ; \n - using Microsoft . CodeAnalysis . Shared . Extensions ; \n using Microsoft . CodeAnalysis . Text ; \n \n namespace Microsoft . VisualStudio . LanguageServices . Implementation . Preview \n { \n internal partial class PreviewUpdater \n { \n - private class PreviewDialogWorkspace : PreviewWorkspace \n + internal class PreviewDialogWorkspace : PreviewWorkspace \n { \n public PreviewDialogWorkspace ( Solution solution ) : base ( solution ) \n {", "msg": "make PreviewDialogWorkspace internal to facilitate other testing\n"}
{"diff": "a / osu . Game . Tests / Beatmaps / IO / ImportBeatmapTest . cs \n  b / osu . Game . Tests / Beatmaps / IO / ImportBeatmapTest . cs \n public void TestImportOverIPC ( ) \n if ( ! importer . ImportAsync ( osz_path ) . Wait ( 1000 ) ) \n Assert . Fail ( @ \" IPC took too long to send \" ) ; \n \n - ensureLoaded ( osu , 10000 ) ; \n + ensureLoaded ( osu ) ; \n } \n } \n \n private OsuGameBase loadOsu ( GameHost host ) \n return osu ; \n } \n \n - private void ensureLoaded ( OsuGameBase osu , int timeout = 100 ) \n + private void ensureLoaded ( OsuGameBase osu , int timeout = 10000 ) \n { \n IEnumerable < BeatmapSetInfo > resultSets = null ;", "msg": "Attempt to fix failing beatmap import test case\n"}
{"diff": "a / MonoGame . Framework / Net / MonoGamerPeer . cs \n  b / MonoGame . Framework / Net / MonoGamerPeer . cs \n private void MGServer_DoWork ( object sender , DoWorkEventArgs e ) \n om . Write ( session . PrivateGamerSlots ) ; \n om . Write ( session . MaxGamers ) ; \n om . Write ( localMe . IsHost ) ; \n - IPAddress adr = IPAddress . Parse ( GetMyLocalIpAddress ( ) ) ; \n - om . Write ( new IPEndPoint ( adr , port ) ) ; \n + / / IPAddress adr = IPAddress . Parse ( GetMyLocalIpAddress ( ) ) ; \n + / / om . Write ( new IPEndPoint ( adr , port ) ) ; \n + om . Write ( myLocalEndPoint ) ; \n om . Write ( peer . Configuration . AppIdentifier ) ; \n peer . SendUnconnectedMessage ( om , m_masterServer ) ; / / send message to peer \n }", "msg": "Modify to not use unsupported call on mac and iOS\n"}
{"diff": "a / osu . Game . Tests / Visual / TestCasePlaySongSelect . cs \n  b / osu . Game . Tests / Visual / TestCasePlaySongSelect . cs \n private void load ( BeatmapManager baseManager ) \n \n loadNewSongSelect ( true ) ; \n \n - AddWaitStep ( 1 ) ; \n + AddWaitStep ( 3 ) ; \n \n AddAssert ( \" dummy selected \" , ( ) = > songSelect . CurrentBeatmap = = defaultBeatmap ) ; \n \n private void load ( BeatmapManager baseManager ) \n manager . Import ( createTestBeatmapSet ( i ) ) ; \n } ) ; \n \n - AddWaitStep ( 1 ) ; \n + AddWaitStep ( 3 ) ; \n AddAssert ( \" random map selected \" , ( ) = > songSelect . CurrentBeatmap ! = defaultBeatmap ) ; \n \n loadNewSongSelect ( ) ; \n - AddWaitStep ( 1 ) ; \n + AddWaitStep ( 3 ) ; \n AddAssert ( \" random map selected \" , ( ) = > songSelect . CurrentBeatmap ! = defaultBeatmap ) ; \n \n AddStep ( @ \" Sort by Artist \" , delegate { songSelect . FilterControl . Sort = SortMode . Artist ; } ) ;", "msg": "Increase wait durations for test stability\n"}
{"diff": "a / Entitas . Unity / Assets / Entitas / Unity / VisualDebugging / DebugSystems / Editor / DebugSystemsInspector . cs \n  b / Entitas . Unity / Assets / Entitas / Unity / VisualDebugging / DebugSystems / Editor / DebugSystemsInspector . cs \n enum SortMethod { \n drawSystemList ( systems ) ; \n \n EditorUtility . SetDirty ( target ) ; \n - Repaint ( ) ; \n } \n \n static void drawSystemsOverview ( DebugSystems systems ) {", "msg": "Less editor repaints for DebugSystemsInspector to improve performance\n"}
{"diff": "a / osu . Game / Scoring / Legacy / LegacyScoreParser . cs \n  b / osu . Game / Scoring / Legacy / LegacyScoreParser . cs \n public Score Parse ( Stream stream ) \n } \n } \n \n - calculateAccuracy ( score . ScoreInfo ) ; \n + CalculateAccuracy ( score . ScoreInfo ) ; \n \n return score ; \n } \n \n - private void calculateAccuracy ( ScoreInfo score ) \n + protected void CalculateAccuracy ( ScoreInfo score ) \n { \n int countMiss = score . Statistics [ HitResult . Miss ] ; \n int count50 = score . Statistics [ HitResult . Meh ] ;", "msg": "Expose CalculateAccuracy for performance tools\n"}
{"diff": "a / GVFS / GVFS . Common / ProductUpgrader . cs \n  b / GVFS / GVFS . Common / ProductUpgrader . cs \n public abstract class ProductUpgrader : IDisposable \n this . noVerify = noVerify ; \n this . tracer = tracer ; \n this . fileSystem = fileSystem ; \n + } \n + \n + / / / < summary > \n + / / / For mocking purposes only \n + / / / < / summary > \n + protected ProductUpgrader ( ) \n + { \n } \n \n public static bool TryCreateUpgrader (", "msg": "ProductUpgrader : add empty constructor for mocking\n"}
{"diff": "a / src / Api / Controllers / CiphersController . cs \n  b / src / Api / Controllers / CiphersController . cs \n public async Task < CipherResponseModel > PostAttachmentAdmin ( string id ) \n await Request . GetFileAsync ( async ( stream , fileName , key ) = > \n { \n await _cipherService . CreateAttachmentAsync ( cipher , stream , fileName , key , \n - Request . ContentLength . GetValueOrDefault ( 0 ) , userId ) ; \n + Request . ContentLength . GetValueOrDefault ( 0 ) , userId , true ) ; \n } ) ; \n \n return new CipherResponseModel ( cipher , _globalSettings ) ; \n public async Task DeleteAttachmentAdmin ( string id , string attachmentId ) \n throw new NotFoundException ( ) ; \n } \n \n - await _cipherService . DeleteAttachmentAsync ( cipher , attachmentId , userId , false ) ; \n + await _cipherService . DeleteAttachmentAsync ( cipher , attachmentId , userId , true ) ; \n } \n \n private void ValidateAttachment ( )", "msg": "pass org admin flag for attachment actions\n"}
{"diff": "a / src / Core / Enums / DeviceType . cs \n  b / src / Core / Enums / DeviceType . cs \n \n { \n public enum DeviceType : short \n { \n - iOS = 0 , \n - Android = 1 \n + Android = 0 , \n + iOS = 1 \n } \n }", "msg": "switch device type around to match mobile enums\n"}
{"diff": "a / src / Uno . UI / UI / Xaml / UnsetValue . cs \n  b / src / Uno . UI / UI / Xaml / UnsetValue . cs \n private UnsetValue ( ) \n \n public override bool Equals ( object obj ) \n { \n - return obj is UnsetValue ; \n + return ReferenceEquals ( obj , this ) | | obj is UnsetValue ; \n } \n \n public override int GetHashCode ( ) = > 0 ;", "msg": "Added a ` ReferenceEquals ` for UnsetValue comparison\n"}
{"diff": "a / src / Nancy / Responses / GenericFileResponse . cs \n  b / src / Nancy / Responses / GenericFileResponse . cs \n private void SetResponseValues ( string contentType , string fullPath , NancyContext \n \n this . Headers [ \" ETag \" ] = etag ; \n this . Headers [ \" Last - Modified \" ] = lastModified ; \n - this . Contents = GetFileContent ( fullPath , fi . Length ) ; \n + \n + if ( fi . Length > 0 ) \n + { \n + this . Contents = GetFileContent ( fullPath , fi . Length ) ; \n + } \n + \n this . ContentType = contentType ; \n this . StatusCode = HttpStatusCode . OK ; \n }", "msg": "Prevent ArgumentOutOfRangeException for emtpy files\n"}
{"diff": "a / src / Libraries / Nop . Data / Migrations / MigrationManager . cs \n  b / src / Libraries / Nop . Data / Migrations / MigrationManager . cs \n public partial class MigrationManager : IMigrationManager \n _typeMapping = new Dictionary < Type , Action < ICreateTableColumnAsTypeSyntax > > ( ) \n { \n [ typeof ( int ) ] = c = > c . AsInt32 ( ) , \n + [ typeof ( long ) ] = c = > c . AsInt64 ( ) , \n [ typeof ( string ) ] = c = > c . AsString ( int . MaxValue ) . Nullable ( ) , \n [ typeof ( bool ) ] = c = > c . AsBoolean ( ) , \n [ typeof ( decimal ) ] = c = > c . AsDecimal ( 18 , 4 ) ,", "msg": "Add database type mapping for int64 / long\n"}
{"diff": "a / osu . Game . Rulesets . Taiko / UI / TaikoPlayfield . cs \n  b / osu . Game . Rulesets . Taiko / UI / TaikoPlayfield . cs \n private void onDrumrollArbitraryHit ( TaikoAction action , bool isStrong ) \n drawableHit = new DrawableFlyingCentreHit ( Time . Current , isStrong ) ; \n \n drumRollHitContainer . Add ( drawableHit ) ; \n + topLevelHitContainer . Add ( drawableHit . CreateProxiedContent ( ) ) ; \n } \n \n internal void OnNewResult ( DrawableHitObject judgedObject , JudgementResult result )", "msg": "Added content proxying to drull roll elements\n"}
{"diff": "a / osu . Desktop / OsuGameDesktop . cs \n  b / osu . Desktop / OsuGameDesktop . cs \n private class StableStorage : WindowsStorage \n { \n protected override string LocateBasePath ( ) \n { \n - bool checkExists ( string p ) = > Directory . Exists ( Path . Combine ( p , \" Songs \" ) ) & & Directory . Exists ( Path . Combine ( p , \" Skins \" ) ) ; \n + bool checkExists ( string p ) = > Directory . Exists ( Path . Combine ( p , \" Songs \" ) ) ; \n \n string stableInstallPath ;", "msg": "Revert \" Check for skins folder also \"\n"}
{"diff": "a / src / ServiceStack . Api . Swagger / SwaggerApiService . cs \n  b / src / ServiceStack . Api . Swagger / SwaggerApiService . cs \n public object Get ( ResourceRequest request ) \n var path = \" / \" + request . Name ; \n var map = EndpointHost . ServiceManager . ServiceController . RestPathMap ; \n var paths = new List < RestPath > ( ) ; \n - var basePath = httpReq . GetApplicationUrl ( ) ; \n + var basePath = httpReq . GetParentPathUrl ( ) ; \n foreach ( var key in map . Keys ) \n { \n paths . AddRange ( map [ key ] . Where ( x = > x . Path = = path | | x . Path . StartsWith ( path + \" / \" ) ) ) ;", "msg": "basePath from GetParentPathUrl to support hosting in IIS Application\n"}
{"diff": "a / src / ServiceStack / ServiceHost / Cookies . cs \n  b / src / ServiceStack / ServiceHost / Cookies . cs \n public HttpCookie ToHttpCookie ( Cookie cookie ) \n var httpCookie = new HttpCookie ( cookie . Name , cookie . Value ) { \n Path = cookie . Path , \n Expires = cookie . Expires , \n + HttpOnly = true \n } ; \n if ( string . IsNullOrEmpty ( httpCookie . Domain ) ) \n { \n public void AddCookie ( Cookie cookie ) \n } \n } \n } \n - } \n \\ No newline at end of file \n + }", "msg": "Set HttpOnly to true to protect cookies\n"}
{"diff": "a / test / MusicStore . Test / TestSession . cs \n  b / test / MusicStore . Test / TestSession . cs \n internal class TestSession : ISession \n \n public string Id { get ; set ; } \n \n + public bool IsAvailable { get ; } = true ; \n + \n public void Clear ( ) \n { \n _store . Clear ( ) ;", "msg": "React to adding IsAvailable to ISession\n"}
{"diff": "a / mcs / class / corlib / System / Environment . cs \n  b / mcs / class / corlib / System / Environment . cs \n internal static string UnixGetFolderPath ( SpecialFolder folder , SpecialFolderOpt \n case SpecialFolder . LocalApplicationData : \n return data ; \n \n + case SpecialFolder . MyDocuments : \n + return ReadXdgUserDir ( config , home , \" XDG_DOCUMENTS_DIR \" , \" Documents \" ) ; \n + \n case SpecialFolder . Desktop : \n case SpecialFolder . DesktopDirectory : \n return ReadXdgUserDir ( config , home , \" XDG_DESKTOP_DIR \" , \" Desktop \" ) ;", "msg": "Report XDG Documents directory for SpecialFolder . MyDocuments\n"}
{"diff": "a / src / Avalonia . Build . Tasks / XamlCompilerTaskExecutor . cs \n  b / src / Avalonia . Build . Tasks / XamlCompilerTaskExecutor . cs \n bool CompileGroup ( IResourceGroup group ) \n \n compiler . Transform ( parsed ) ; \n var populateName = \" Populate : \" + res . Name ; \n - var buildName = classType ! = null ? \" Build : \" + res . Name : null ; \n + var buildName = classType = = null ? \" Build : \" + res . Name : null ; \n compiler . Compile ( parsed , builder , contextClass , \n populateName , buildName , \n \" NamespaceInfo : \" + res . Name , res . Uri ) ;", "msg": "Generate Build for xaml files without x : Class\n"}
{"diff": "a / src / BenchmarkDotNet / Exporters / RPlotExporter . cs \n  b / src / BenchmarkDotNet / Exporters / RPlotExporter . cs \n public void ExportToLog ( Summary summary , ILogger logger ) \n throw new NotSupportedException ( ) ; \n } \n \n - public static bool TryFindRScript ( ILogger consoleLogger , out string rscriptPath ) \n + private static bool TryFindRScript ( ILogger consoleLogger , out string rscriptPath ) \n { \n string rscriptExecutable = RuntimeInformation . IsWindows ( ) ? \" Rscript . exe \" : \" Rscript \" ; \n rscriptPath = null ;", "msg": "Change access modifier to private , was not intended to be public\n"}
{"diff": "a / Engine / Setup / BrokerageSetupHandler . cs \n  b / Engine / Setup / BrokerageSetupHandler . cs \n public bool Setup ( IAlgorithm algorithm , IBrokerage brokerage , AlgorithmNodePacke \n algorithm . Schedule . SetEventSchedule ( realTimeHandler ) ; \n / / Initialise the algorithm , get the required data : \n algorithm . Initialize ( ) ; \n - / / Zero the CashBook - we ' ll populate directly from brokerage \n - foreach ( var kvp in algorithm . Portfolio . CashBook ) \n + if ( liveJob . Brokerage ! = \" PaperBrokerage \" ) \n { \n - kvp . Value . SetAmount ( 0 ) ; \n + / / Zero the CashBook - we ' ll populate directly from brokerage \n + foreach ( var kvp in algorithm . Portfolio . CashBook ) \n + { \n + kvp . Value . SetAmount ( 0 ) ; \n + } \n } \n } \n catch ( Exception err )", "msg": "Don ' t zero cash balances for paper brokerages\n"}
{"diff": "a / ShareX / TaskHelpers . cs \n  b / ShareX / TaskHelpers . cs \n public static void OpenImageEditor ( string filePath = null ) \n public static void OpenImageEffects ( ) \n { \n string filePath = ImageHelpers . OpenImageFileDialog ( ) ; \n - \n + Image img = null ; \n if ( ! string . IsNullOrEmpty ( filePath ) ) \n { \n - Image img = ImageHelpers . LoadImage ( filePath ) ; \n - ImageEffectsForm form = new ImageEffectsForm ( img ) ; \n - form . EditorMode ( ) ; \n - form . Show ( ) ; \n + img = ImageHelpers . LoadImage ( filePath ) ; \n } \n + ImageEffectsForm form = new ImageEffectsForm ( img ) ; \n + form . EditorMode ( ) ; \n + form . Show ( ) ; \n } \n \n public static void OpenMonitorTest ( )", "msg": "Continue to open Image Effect without image\n"}
{"diff": "a / GitUI / CommandsDialogs / SettingsDialog / Pages / ChecklistSettingsPage . cs \n  b / GitUI / CommandsDialogs / SettingsDialog / Pages / ChecklistSettingsPage . cs \n private bool CheckGitExtensionsInstall ( ) \n } \n \n GitExtensionsInstall . Visible = true ; \n - if ( string . IsNullOrEmpty ( AppSettings . GetInstallDir ( ) ) ) \n + \n + var installDir = AppSettings . GetInstallDir ( ) ; \n + \n + if ( string . IsNullOrEmpty ( installDir ) ) \n { \n RenderSettingUnset ( GitExtensionsInstall , GitExtensionsInstall_Fix , _registryKeyGitExtensionsMissing . Text ) ; \n return false ; \n } \n \n - if ( AppSettings . GetInstallDir ( ) ! = null & & AppSettings . GetInstallDir ( ) . EndsWith ( \" . exe \" ) ) \n + if ( installDir . EndsWith ( \" . exe \" ) ) \n { \n RenderSettingUnset ( GitExtensionsInstall , GitExtensionsInstall_Fix , _registryKeyGitExtensionsFaulty . Text ) ; \n return false ;", "msg": "Extract variable and simplify conditions\n"}
{"diff": "a / MediaBrowser . MediaEncoding / Probing / ProbeResultNormalizer . cs \n  b / MediaBrowser . MediaEncoding / Probing / ProbeResultNormalizer . cs \n private MediaStream GetMediaStream ( bool isAudio , MediaStreamInfo streamInfo , Med \n if ( bitrate = = 0 \n & & formatInfo ! = null \n & & ! string . IsNullOrEmpty ( formatInfo . BitRate ) \n - & & ( stream . Type = = MediaStreamType . Video | | stream . Type = = MediaStreamType . Audio ) ) \n + & & ( stream . Type = = MediaStreamType . Video | | ( isAudio & & stream . Type = = MediaStreamType . Audio ) ) ) \n { \n / / If the stream info doesn ' t have a bitrate get the value from the media format info \n if ( int . TryParse ( formatInfo . BitRate , NumberStyles . Any , _usCulture , out var value ) )", "msg": "do not extract audio stream bitrate info for videos from formatInfo\n"}
{"diff": "a / test / Microsoft . AspNetCore . Server . Kestrel . FunctionalTests / AddressRegistrationTests . cs \n  b / test / Microsoft . AspNetCore . Server . Kestrel . FunctionalTests / AddressRegistrationTests . cs \n namespace Microsoft . AspNetCore . Server . Kestrel . FunctionalTests \n { \n public class AddressRegistrationTests \n { \n - \n [ Theory , MemberData ( nameof ( AddressRegistrationDataIPv4 ) ) ] \n public async Task RegisterAddresses_IPv4_Success ( string addressInput , Func < IServerAddressesFeature , string [ ] > testUrls ) \n { \n private void ThrowsWhenBindingLocalhostToAddressInUse ( AddressFamily addressFamil \n private static IEnumerable < IPAddress > GetIPAddresses ( ) \n { \n return NetworkInterface . GetAllNetworkInterfaces ( ) \n + . Where ( i = > i . OperationalStatus = = OperationalStatus . Up ) \n . SelectMany ( i = > i . GetIPProperties ( ) . UnicastAddresses ) \n . Select ( a = > a . Address ) ; \n }", "msg": "Only test binding to \" operational \" network interfaces\n"}
{"diff": "a / osu . Game / Rulesets / Edit / HitObjectComposer . cs \n  b / osu . Game / Rulesets / Edit / HitObjectComposer . cs \n protected override void LoadComplete ( ) \n / / / < param name = \" ruleset \" > The ruleset used to construct its drawable counterpart . < / param > \n / / / < param name = \" beatmap \" > The loaded beatmap . < / param > \n / / / < param name = \" mods \" > The mods to be applied . < / param > \n - / / / < returns > An editor - relevant < see cref = \" DrawableRuleset { TObject } \" / > < / returns > . \n + / / / < returns > An editor - relevant < see cref = \" DrawableRuleset { TObject } \" / > . < / returns > \n protected virtual DrawableRuleset < TObject > CreateDrawableRuleset ( Ruleset ruleset , IBeatmap beatmap , IReadOnlyList < Mod > mods = null ) \n = > ( DrawableRuleset < TObject > ) ruleset . CreateDrawableRulesetWith ( beatmap , mods ) ;", "msg": "Move incorrect placed full stop\n"}
{"diff": "a / osu . Game . Rulesets . Osu / Objects / Drawables / DrawableSpinner . cs \n  b / osu . Game . Rulesets . Osu / Objects / Drawables / DrawableSpinner . cs \n protected override void LoadSamples ( ) \n { \n Volume = { Value = 0 } , \n Looping = true , \n + Frequency = { Value = 1 . 0f } \n } ) ; \n } \n } \n protected override void Update ( ) \n if ( HandleUserInput ) \n RotationTracker . Tracking = ! Result . HasResult & & ( OsuActionInputManager ? . PressedActions . Any ( x = > x = = OsuAction . LeftButton | | x = = OsuAction . RightButton ) ? ? false ) ; \n \n - if ( spinningSample ! = null ) \n - spinningSample . Frequency . Value = spinnerFrequencyModulate ? 0 . 5f + Progress : 0 . 5f ; \n + if ( spinningSample ! = null & & spinnerFrequencyModulate ) \n + spinningSample . Frequency . Value = 0 . 5f + Progress ; \n } \n \n protected override void UpdateAfterChildren ( )", "msg": "replicate osu - stable behaviour for spinningSample frequency\n"}
{"diff": "a / MahApps . Metro / Controls / MetroWindow . cs \n  b / MahApps . Metro / Controls / MetroWindow . cs \n protected override void OnStateChanged ( EventArgs e ) \n base . OnStateChanged ( e ) ; \n } \n \n - private void TitleBarMouseDown ( object sender , MouseButtonEventArgs e ) \n + protected void TitleBarMouseDown ( object sender , MouseButtonEventArgs e ) \n { \n if ( e . RightButton ! = MouseButtonState . Pressed & & e . MiddleButton ! = MouseButtonState . Pressed & & e . LeftButton = = MouseButtonState . Pressed ) \n DragMove ( ) ; \n private void TitleBarMouseDown ( object sender , MouseButtonEventArgs e ) \n } \n } \n \n - private void TitleBarMouseUp ( object sender , MouseButtonEventArgs e ) \n + protected void TitleBarMouseMove ( object sender , MouseEventArgs e ) \n { \n if ( ! ShowIconOnTitleBar ) return ; \n var mousePosition = GetCorrectPosition ( this ) ;", "msg": "reverting changes to access levels of some functions\n"}
{"diff": "a / osu . Game / Rulesets / RulesetConfigCache . cs \n  b / osu . Game / Rulesets / RulesetConfigCache . cs \n public RulesetConfigCache ( SettingsStore settingsStore ) \n public IRulesetConfigManager GetConfigFor ( Ruleset ruleset ) \n { \n if ( ruleset . RulesetInfo . ID = = null ) \n - throw new InvalidOperationException ( \" The provided ruleset doesn ' t have a valid id . \" ) ; \n + return null ; \n \n return configCache . GetOrAdd ( ruleset . RulesetInfo . ID . Value , _ = > ruleset . CreateConfig ( settingsStore ) ) ; \n }", "msg": "Allow RulesetConfigCache to return null configs\n"}
{"diff": "a / MonoGame . Framework / DrawableGameComponent . cs \n  b / MonoGame . Framework / DrawableGameComponent . cs \n namespace Microsoft . Xna . Framework \n public class DrawableGameComponent : GameComponent , IDrawable \n { \n private bool _initialized ; \n + private bool _disposed ; \n private int _drawOrder ; \n private bool _visible = true ; \n \n public override void Initialize ( ) \n } \n } \n \n + protected override void Dispose ( bool disposing ) \n + { \n + if ( ! _disposed ) \n + { \n + _disposed = true ; \n + UnloadContent ( ) ; \n + } \n + } \n + \n protected virtual void LoadContent ( ) { } \n \n protected virtual void UnloadContent ( ) { }", "msg": "Implemented Dispose in DrawableGameComponent to unload content\n"}
{"diff": "a / Tools / Pipeline / Windows / MainView . cs \n  b / Tools / Pipeline / Windows / MainView . cs \n private void ExitMenuItemClick ( object sender , System . EventArgs e ) \n \n private void MainView_Load ( object sender , EventArgs e ) \n { \n - if ( History . Default . ProjectHistory . Count > 0 ) \n + / / Priority is given to any command line arguments . \n + if ( string . IsNullOrEmpty ( OpenProjectPath ) & & History . Default . ProjectHistory . Count > 0 ) \n { \n OpenProjectPath = History . Default . ProjectHistory . Last ( ) ; \n }", "msg": "Giving priority to any command line arguments over the History loading .\n"}
{"diff": "a / src / Microsoft . AspNet . SignalR . Client / Transports / ServerSentEvents / ChunkBuffer . cs \n  b / src / Microsoft . AspNet . SignalR . Client / Transports / ServerSentEvents / ChunkBuffer . cs \n public void Add ( byte [ ] buffer , int length ) \n _buffer . Append ( Encoding . UTF8 . GetString ( buffer , 0 , length ) ) ; \n } \n \n + public void Add ( ArraySegment < byte > buffer ) \n + { \n + _buffer . Append ( Encoding . UTF8 . GetString ( buffer . Array , buffer . Offset , buffer . Count ) ) ; \n + } \n + \n public string ReadLine ( ) \n { \n / / Lock while reading so that we can make safe assuptions about the buffer indicies", "msg": "Added method to ChunkBuffer to take in ArraySegments\n"}
{"diff": "a / GitCommands / Git / GitModule . cs \n  b / GitCommands / Git / GitModule . cs \n private string GetFetchArgs ( string remote , string remoteBranch , string localBran \n \n string arguments = fetchTags = = true ? \" - - tags \" : fetchTags = = false ? \" - - no - tags \" : \" \" ; \n \n + string pruneArguments = prune ? \" - - prune \" : \" \" ; \n \n if ( isUnshallow ) \n arguments + = \" - - unshallow \" ; \n \n - return \" \\ \" \" + remote . Trim ( ) + \" \\ \" \" + remoteBranchArguments + localBranchArguments + arguments ; \n + return \" \\ \" \" + remote . Trim ( ) + \" \\ \" \" + remoteBranchArguments + localBranchArguments + arguments + pruneArguments ; \n } \n \n public string GetRebaseDir ( )", "msg": "Append \" - - prune \" to argument string when GetFetchArgs called with prune = true\n"}

{"diff": "a / src / com . oracle . truffle . espresso / src / com / oracle / truffle / espresso / nodes / EspressoRootNode . java \n  b / src / com . oracle . truffle . espresso / src / com / oracle / truffle / espresso / nodes / EspressoRootNode . java \n public Object execute ( VirtualFrame frame ) { \n BytecodeNode bytecodeNode = getBytecodeNode ( ) ; \n bytecodeNode . methodMonitorEnter ( frame , monitor ) ; \n } else { \n + / / TODO ( Gregersen ) - register monitors on frames for non - bytecode methods \n InterpreterToVM . monitorEnter ( monitor ) ; \n } \n Object result ; \n public Object execute ( VirtualFrame frame ) { \n getBytecodeNode ( ) . monitorExit ( frame , monitor ) ; \n } \n } else { \n + / / TODO ( Gregersen ) - exit monitors on frames for non - bytecode methods \n InterpreterToVM . monitorExit ( monitor ) ; \n } \n }", "msg": "Add a few todos for implementing monitor lookup ownership on native method frames\n"}
{"diff": "a / flink - runtime / src / main / java / org / apache / flink / runtime / util / ZooKeeperUtils . java \n  b / flink - runtime / src / main / java / org / apache / flink / runtime / util / ZooKeeperUtils . java \n public static String getZooKeeperEnsemble ( Configuration flinkConf ) \n * @ param client The { @ link CuratorFramework } ZooKeeper client to use \n * @ param configuration { @ link Configuration } object containing the configuration values \n * @ return { @ link ZooKeeperLeaderRetrievalService } instance . \n - * @ throws Exception \n * / \n public static ZooKeeperLeaderRetrievalService createLeaderRetrievalService ( \n final CuratorFramework client , \n - final Configuration configuration ) throws Exception { \n + final Configuration configuration ) { \n return createLeaderRetrievalService ( client , configuration , \" \" ) ; \n }", "msg": "[ hotfix ] Remove Exception from ZooKeeperUtils # createLeaderRetrievalService\n"}
{"diff": "a / src / main / java / org / elasticsearch / cluster / ClusterChangedEvent . java \n  b / src / main / java / org / elasticsearch / cluster / ClusterChangedEvent . java \n public boolean indexMetaDataChanged ( IndexMetaData current ) { \n if ( previousIndexMetaData = = current ) { \n return false ; \n } \n - return false ; \n + return true ; \n } \n \n public boolean blocksChanged ( ) {", "msg": "Index Update Settings API does not update settings in real time , closes .\n"}
{"diff": "a / library / src / main / java / com / bumptech / glide / request / RequestOptions . java \n  b / library / src / main / java / com / bumptech / glide / request / RequestOptions . java \n public static RequestOptions circleCropTransform ( ) { \n return circleCropOptions ; \n } \n \n - / * * \n - * Returns a { @ link RequestOptions } object with { @ link # transform ( Transformation ) } set . \n - * \n - * @ deprecated Use { @ link # bitmapTransform ( Transformation ) } . \n - * / \n - @ Deprecated \n - public static RequestOptions bitmapTransform ( \n - Context context , @ NonNull Transformation < Bitmap > transformation ) { \n - return bitmapTransform ( transformation ) ; \n - } \n - \n / * * \n * Returns a { @ link RequestOptions } object with { @ link # transform ( Transformation ) } set . \n * /", "msg": "Remove deprecated bitmapTransform method from Glide\n"}
{"diff": "a / core / src / main / java / hudson / model / UpdateCenter . java \n  b / core / src / main / java / hudson / model / UpdateCenter . java \n public File download ( DownloadJob job , URL src ) throws IOException { \n \n in . close ( ) ; \n out . close ( ) ; \n + \n + if ( total ! = - 1 & & total ! = tmp . length ( ) ) { \n + / / don ' t know exactly how this happens , but report like \n + / / http : / / www . ashlux . com / wordpress / 2009 / 08 / 14 / hudson - and - the - sonar - plugin - fail - maveninstallation - nosuchmethoderror / \n + / / indicates that this kind of inconsistency can happen . So let ' s be defensive \n + throw new IOException ( \" Inconsistent file length : expected \" + total + \" but only got \" + tmp . length ( ) ) ; \n + } \n \n return tmp ; \n }", "msg": "Plugin installation / Hudson upgrade are made more robust in the face of possible connection abortion .\n"}
{"diff": "a / graal / GraalCompiler / src / com / sun / c1x / gen / LIRGenerator . java \n  b / graal / GraalCompiler / src / com / sun / c1x / gen / LIRGenerator . java \n public boolean isNonNull ( XirArgument argument ) { \n } \n \n public boolean requiresNullCheck ( ) { \n - return current = = null | | current instanceof InstanceOf | | current instanceof CheckCast ; / / current . canTrap ( ) ; \n + return current = = null | | current . canTrap ( ) ; \n } \n \n public boolean requiresBoundsCheck ( ) { \n public boolean requiresBoundsCheck ( ) { \n } \n \n public boolean requiresReadBarrier ( ) { \n - return current = = null | | current . kind = = CiKind . Object ; \n + return current = = null | | true ; \n } \n \n public boolean requiresWriteBarrier ( ) { \n - return current = = null | | current . kind = = CiKind . Object ; \n + return current = = null | | true ; \n } \n \n public boolean requiresArrayStoreCheck ( ) {", "msg": "Fixed regression wrt write barriers .\n"}
{"diff": "a / src / main / java / org / elasticsearch / action / support / master / TransportMasterNodeOperationAction . java \n  b / src / main / java / org / elasticsearch / action / support / master / TransportMasterNodeOperationAction . java \n public void onClose ( ) { \n @ Override \n public void onTimeout ( TimeValue timeout ) { \n clusterService . remove ( this ) ; \n - listener . onFailure ( new MasterNotDiscoveredException ( ) ) ; \n + listener . onFailure ( new MasterNotDiscoveredException ( \" waited for [ \" + timeout + \" ] \" ) ) ; \n } \n \n @ Override", "msg": "better failure message when no master found ( how long we waited for it )\n"}
{"diff": "a / java / client / src / org / openqa / selenium / remote / RemoteWebDriver . java \n  b / java / client / src / org / openqa / selenium / remote / RemoteWebDriver . java \n protected WebElement findElement ( String by , String using ) { \n \n Response response = execute ( DriverCommand . FIND_ELEMENT , \n ImmutableMap . of ( \" using \" , by , \" value \" , using ) ) ; \n - System . out . println ( \" response = \" + response ) ; \n return ( WebElement ) response . getValue ( ) ; \n }", "msg": "SimonStewart : Remove spurious logging to sysout\n"}
{"diff": "a / plugins / org . jkiss . dbeaver . core / src / org / jkiss / dbeaver / ui / editors / entity / properties / TabbedFolderPageForm . java \n  b / plugins / org . jkiss . dbeaver . core / src / org / jkiss / dbeaver / ui / editors / entity / properties / TabbedFolderPageForm . java \n private void createPropertyEditor ( Composite group , DBPPropertyDescriptor prop ) { \n } \n if ( editControl instanceof Text | | editControl instanceof Combo ) { \n gd . widthHint = Math . max ( \n - UIUtils . getFontHeight ( group ) * 10 , \n + UIUtils . getFontHeight ( group ) * 15 , \n editControl . computeSize ( SWT . DEFAULT , SWT . DEFAULT ) . x ) ; \n }", "msg": "Entity editor form render fix ( default control width )\n"}
{"diff": "a / src / main / java / org / apache / ibatis / mapping / CacheBuilder . java \n  b / src / main / java / org / apache / ibatis / mapping / CacheBuilder . java \n public Cache build ( ) { \n setCacheProperties ( cache ) ; \n } \n cache = setStandardDecorators ( cache ) ; \n + } else if ( ! LoggingCache . class . isAssignableFrom ( cache . getClass ( ) ) ) { \n + cache = new LoggingCache ( cache ) ; \n } \n return cache ; \n }", "msg": "Fixes . Set logging decorator to all caches .\n"}
{"diff": "a / vertx - platform / src / main / java / org / vertx / java / platform / impl / DefaultPlatformManager . java \n  b / vertx - platform / src / main / java / org / vertx / java / platform / impl / DefaultPlatformManager . java \n public void run ( ) { \n \n @ Override \n public void exit ( ) { \n + / / We tell the cluster manager to leave - this is because Hazelcast uses non daemon threads which will prevent \n + / / JVM exit and shutdown hooks to be called \n + vertx . clusterManager ( ) . leave ( ) ; \n if ( exitHandler ! = null ) { \n exitHandler . handle ( null ) ; \n }", "msg": "Shutdown cluster manager before exit otherwise hazelcast non - daemon threads will prevent exit\n"}
{"diff": "a / src / com . oracle . truffle . espresso / src / com / oracle / truffle / espresso / substitutions / Target_java_lang_reflect_Array . java \n  b / src / com . oracle . truffle . espresso / src / com / oracle / truffle / espresso / substitutions / Target_java_lang_reflect_Array . java \n public static Object newArray ( @ Host ( Class . class ) StaticObject componentType , int \n throw meta . throwEx ( meta . NegativeArraySizeException ) ; \n } \n } \n + if ( dimensions . length = = 1 ) { \n + / / getArrayClass ( 0 ) is undefined . \n + return meta . getInterpreterToVM ( ) . newMultiArray ( component , dimensions ) ; \n + } \n return meta . getInterpreterToVM ( ) . newMultiArray ( component . getArrayClass ( dimensions . length - 1 ) , dimensions ) ; \n }", "msg": "[ GR - 18478 ] j . l . reflect . Array . newMultiArray returns incorrect type with single dimension .\n"}
{"diff": "a / spring - boot - actuator / src / test / java / org / springframework / boot / actuate / autoconfigure / EndpointWebMvcAutoConfigurationTests . java \n  b / spring - boot - actuator / src / test / java / org / springframework / boot / actuate / autoconfigure / EndpointWebMvcAutoConfigurationTests . java \n public void onDifferentPort ( ) throws Exception { \n assertContent ( \" / endpoint \" , ports . get ( ) . management , \" endpointoutput \" ) ; \n List < ? > interceptors = ( List < ? > ) ReflectionTestUtils . getField ( \n this . applicationContext . getBean ( EndpointHandlerMapping . class ) , \n - \" interceptors \" ) ; \n + \" handlerInterceptors \" ) ; \n assertEquals ( 1 , interceptors . size ( ) ) ; \n this . applicationContext . close ( ) ; \n assertAllClosed ( ) ;", "msg": "Update field that \u2019 s checked reflectively to match Spring MVC \u2019 s internals\n"}
{"diff": "a / plugins / repository - azure / src / main / java / org / elasticsearch / cloud / azure / storage / AzureStorageServiceImpl . java \n  b / plugins / repository - azure / src / main / java / org / elasticsearch / cloud / azure / storage / AzureStorageServiceImpl . java \n CloudBlobClient getSelectedClient ( String account , LocationMode mode ) { \n int timeout = ( int ) azureStorageSettings . getTimeout ( ) . getMillis ( ) ; \n client . getDefaultRequestOptions ( ) . setTimeoutIntervalInMs ( timeout ) ; \n } catch ( ClassCastException e ) { \n - throw new IllegalArgumentException ( \" Can not cast [ \" + azureStorageSettings . getTimeout ( ) + \" ] to int . \" ) ; \n + throw new IllegalArgumentException ( \" Can not convert [ \" + azureStorageSettings . getTimeout ( ) + \n + \" ] . It can not be longer than 2 , 147 , 483 , 647ms . \" ) ; \n } \n return client ; \n }", "msg": "Change exception message for wrong timeout in azure repository settings\n"}
{"diff": "a / okhttp / src / main / java / okhttp3 / HttpUrl . java \n  b / okhttp / src / main / java / okhttp3 / HttpUrl . java \n static String percentDecode ( String encoded , boolean plusIsSpace ) { \n } \n \n private List < String > percentDecode ( List < String > list , boolean plusIsSpace ) { \n - List < String > result = new ArrayList < > ( list . size ( ) ) ; \n - for ( String s : list ) { \n + int size = list . size ( ) ; \n + List < String > result = new ArrayList < > ( size ) ; \n + for ( int i = 0 ; i < size ; i + + ) { \n + String s = list . get ( i ) ; \n result . add ( s ! = null ? percentDecode ( s , plusIsSpace ) : null ) ; \n } \n return Collections . unmodifiableList ( result ) ;", "msg": "Modify for - loop more performance sensitively\n"}
{"diff": "a / test / src / main / java / org / jvnet / hudson / test / HudsonTestCase . java \n  b / test / src / main / java / org / jvnet / hudson / test / HudsonTestCase . java \n public void assertEqualDataBoundBeans ( Object lhs , Object rhs ) throws Exception { \n } \n assertFalse ( \" collection size mismatch between \" + lhs + \" and \" + rhs , ltr . hasNext ( ) ^ rtr . hasNext ( ) ) ; \n } else \n - if ( findDataBoundConstructor ( types [ i ] ) ! = null ) { \n + if ( findDataBoundConstructor ( types [ i ] ) ! = null | | ( lv ! = null & & findDataBoundConstructor ( lv . getClass ( ) ) ! = null ) | | ( rv ! = null & & findDataBoundConstructor ( rv . getClass ( ) ) ! = null ) ) { \n / / recurse into nested databound objects \n assertEqualDataBoundBeans ( lv , rv ) ; \n } else {", "msg": "More aggressive search for data - bound beans .\n"}
{"diff": "a / flink - tests / src / test / java / org / apache / flink / test / checkpointing / SavepointITCase . java \n  b / flink - tests / src / test / java / org / apache / flink / test / checkpointing / SavepointITCase . java \n public Integer map ( Integer value ) throws Exception { \n \n @ Override \n public byte [ ] snapshotState ( long checkpointId , long checkpointTimestamp ) throws Exception { \n - LOG . info ( \" snapshotState ( \" + checkpointId + \" ) : \" + Arrays . toString ( data ) ) ; \n return data ; \n } \n \n @ Override \n public void restoreState ( byte [ ] data ) throws Exception { \n - LOG . info ( \" restoreState : \" + Arrays . toString ( data ) ) ; \n this . data = data ; \n } \n }", "msg": "[ hotfix ] [ tests ] Remove verbose logging in SavepointITCase\n"}
{"diff": "a / graal / com . oracle . graal . hotspot / src / com / oracle / graal / hotspot / CompileTheWorld . java \n  b / graal / com . oracle . graal . hotspot / src / com / oracle / graal / hotspot / CompileTheWorld . java \n private boolean canBeCompiled ( HotSpotResolvedJavaMethod javaMethod , int modifier \n if ( c . dontCompileHugeMethods & & javaMethod . getCodeSize ( ) > c . hugeMethodLimit ) { \n return false ; \n } \n + / / Allow use of - XX : CompileCommand = dontinline to exclude problematic methods \n + if ( ! javaMethod . canBeInlined ( ) ) { \n + return false ; \n + } \n / / Skip @ Snippets for now \n if ( javaMethod . getAnnotation ( Snippet . class ) ! = null ) { \n return false ;", "msg": "support use of - XX : CompileCommand = dontinline to exclude problematic methods from CompileTheWorld\n"}
{"diff": "a / buffer / src / main / java / io / netty / buffer / PoolThreadCache . java \n  b / buffer / src / main / java / io / netty / buffer / PoolThreadCache . java \n private static int free ( MemoryRegionCache < ? > [ ] caches ) { \n } \n \n int numFreed = 0 ; \n - for ( int i = 0 ; i < caches . length ; i + + ) { \n - numFreed + = free ( caches [ i ] ) ; \n + for ( MemoryRegionCache < ? > c : caches ) { \n + numFreed + = free ( c ) ; \n } \n return numFreed ; \n } \n private static void trim ( MemoryRegionCache < ? > [ ] caches ) { \n if ( caches = = null ) { \n return ; \n } \n - for ( int i = 0 ; i < caches . length ; i + + ) { \n - trim ( caches [ i ] ) ; \n + for ( MemoryRegionCache < ? > c : caches ) { \n + trim ( c ) ; \n } \n }", "msg": "Use Java 5 foreach for arrays for brevity at no cost\n"}
{"diff": "a / backends / gdx - backend - android / src / com / badlogic / gdx / backends / android / AndroidAudio . java \n  b / backends / gdx - backend - android / src / com / badlogic / gdx / backends / android / AndroidAudio . java \n protected void resume ( ) { \n * / \n public void dispose ( ) { \n synchronized ( musics ) { \n - for ( AndroidMusic music : musics ) { \n + / / gah i hate myself . . . . music . dispose ( ) removes the music from the list . . . \n + ArrayList < AndroidMusic > musicsCopy = new ArrayList < AndroidMusic > ( musics ) ; \n + for ( AndroidMusic music : musicsCopy ) { \n music . dispose ( ) ; \n } \n }", "msg": "[ fixed ] concurrentmodification exception in AndroidAudio . dispose ( ) . Cause you shall not remove stuff from a list while you use an iterator of that list . I ' m stupid . . .\n"}
{"diff": "a / org . springframework . orm / src / main / java / org / springframework / orm / jpa / vendor / HibernateJpaDialect . java \n  b / org . springframework . orm / src / main / java / org / springframework / orm / jpa / vendor / HibernateJpaDialect . java \n public SessionTransactionData ( Session session , FlushMode previousFlushMode ) { \n } \n \n public void cleanup ( ) { \n - TransactionSynchronizationManager . unbindResource ( this . session . getSessionFactory ( ) ) ; \n + SessionFactory sessionFactory = this . session . getSessionFactory ( ) ; \n + if ( TransactionSynchronizationManager . hasResource ( sessionFactory ) ) { \n + TransactionSynchronizationManager . unbindResource ( sessionFactory ) ; \n + } \n if ( this . previousFlushMode ! = null ) { \n this . session . setFlushMode ( this . previousFlushMode ) ; \n }", "msg": "fixed unbind failure through appropriate guard\n"}
{"diff": "a / java / client / src / org / openqa / selenium / firefox / GeckoDriverService . java \n  b / java / client / src / org / openqa / selenium / firefox / GeckoDriverService . java \n static GeckoDriverService createDefaultService ( Capabilities caps ) { \n builder . usingFirefoxBinary ( actualBinary ) ; \n } \n \n - return new Builder ( ) . build ( ) ; \n + return builder . build ( ) ; \n } \n \n @ Override \n protected File findDefaultExecutable ( ) { \n protected GeckoDriverService createDriverService ( File exe , int port , \n ImmutableList < String > args , \n ImmutableMap < String , String > environment ) { \n + System . err . println ( \" Starting GeckoDriverService on port \" + port ) ; \n try { \n GeckoDriverService service = new GeckoDriverService ( exe , port , args , environment ) ; \n String firefoxLogFile = System . getProperty ( FirefoxDriver . SystemProperty . BROWSER_LOGFILE ) ;", "msg": "[ java ] Fixing GeckoDriverService builder to use passed capabilities\n"}
{"diff": "a / core / src / main / java / org / elasticsearch / threadpool / ThreadPool . java \n  b / core / src / main / java / org / elasticsearch / threadpool / ThreadPool . java \n public ScheduledExecutorService scheduler ( ) { \n if ( ! Names . SAME . equals ( name ) ) { \n command = new ThreadedRunnable ( command , executor ( name ) ) ; \n } \n - return scheduler . schedule ( command , delay . millis ( ) , TimeUnit . MILLISECONDS ) ; \n + return scheduler . schedule ( new LoggingRunnable ( command ) , delay . millis ( ) , TimeUnit . MILLISECONDS ) ; \n } \n \n public void shutdown ( ) { \n public void run ( ) { \n runnable . run ( ) ; \n } catch ( Throwable t ) { \n logger . warn ( \" failed to run { } \" , t , runnable . toString ( ) ) ; \n + throw t ; \n } \n }", "msg": "Log uncaught exceptions from scheduled once tasks\n"}
{"diff": "a / transport / src / main / java / io / netty / channel / embedded / EmbeddedChannel . java \n  b / transport / src / main / java / io / netty / channel / embedded / EmbeddedChannel . java \n public EmbeddedChannel ( ChannelId channelId , boolean hasDisconnect , final Channel \n final ChannelHandler . . . handlers ) { \n super ( null , channelId ) ; \n metadata = metadata ( hasDisconnect ) ; \n - this . config = config ; \n + this . config = ObjectUtil . checkNotNull ( config , \" config \" ) ; \n setup ( handlers ) ; \n }", "msg": "Add missing null check that was missed in 844976a0a2a940eb28293e3f74bc133cbbde0bac\n"}
{"diff": "a / remote / server / src / java / org / openqa / selenium / server / SeleniumServer . java \n  b / remote / server / src / java / org / openqa / selenium / server / SeleniumServer . java \n private HttpContext createWebDriverRemoteContext ( ) { \n HttpContext webdriverContext = new HttpContext ( ) ; \n webdriverContext . setContextPath ( \" / wd \" ) ; \n ServletHandler handler = new ServletHandler ( ) ; \n - handler . addServlet ( \" WebDriver remote server \" , \" / hub \" , DriverServlet . class . getName ( ) ) ; \n + handler . addServlet ( \" WebDriver remote server \" , \" / hub / * \" , DriverServlet . class . getName ( ) ) ; \n webdriverContext . addHandler ( handler ) ; \n \n LOGGER . info ( format ( \" RemoteWebDriver instances should connect to : http : / / % s : % d / wd / hub \" ,", "msg": "SimonStewart : Fixing the mapping of the webdriver remote server in the standalone servlet\n"}
{"diff": "a / guava / src / com / google / common / collect / ImmutableSortedMap . java \n  b / guava / src / com / google / common / collect / ImmutableSortedMap . java \n \n return emptyMap ( comparator ) ; \n } \n \n - ImmutableList . Builder < K > keyBuilder = ImmutableList . builder ( ) ; \n - ImmutableList . Builder < V > valueBuilder = ImmutableList . builder ( ) ; \n + ImmutableList . Builder < K > keyBuilder = new ImmutableList . Builder < K > ( size ) ; \n + ImmutableList . Builder < V > valueBuilder = new ImmutableList . Builder < V > ( size ) ; \n for ( int i = 0 ; i < size ; i + + ) { \n Entry < K , V > entry = entries [ i ] ; \n keyBuilder . add ( entry . getKey ( ) ) ;", "msg": "Use presized ImmutableList . Builder in ImmutableSortedMap creation .\n"}
{"diff": "a / projects / com . oracle . truffle . llvm . test / src / com / oracle / truffle / llvm / test / interop / LLVMInteropTest . java \n  b / projects / com . oracle . truffle . llvm . test / src / com / oracle / truffle / llvm / test / interop / LLVMInteropTest . java \n public void test039 ( ) throws Exception { \n } \n \n @ Test \n + @ Ignore ( value = \" test semantics not clear \" ) \n public void test040 ( ) throws Exception { \n try ( Runner runner = new Runner ( \" interop040 \" ) ) { \n runner . run ( ) ; \n public void test040 ( ) throws Exception { \n } \n } \n \n - / / llvm array to foreign language \n @ Test \n + @ Ignore ( value = \" test semantics not clear \" ) \n public void test041 ( ) throws Exception { \n try ( Runner runner = new Runner ( \" interop041 \" ) ) { \n runner . run ( ) ;", "msg": "Ignore interop tests with unclear semantics .\n"}
{"diff": "old mode 100644 \n new mode 100755 \n index 994db34b7026 . . 98bc66b312a9 \n  a / flink - runtime / src / main / java / org / apache / flink / runtime / resourcemanager / JobLeaderIdService . java \n  b / flink - runtime / src / main / java / org / apache / flink / runtime / resourcemanager / JobLeaderIdService . java \n \n public JobLeaderIdService ( \n HighAvailabilityServices highAvailabilityServices , \n ScheduledExecutor scheduledExecutor , \n - Time jobTimeout ) throws Exception { \n + Time jobTimeout ) { \n this . highAvailabilityServices = Preconditions . checkNotNull ( highAvailabilityServices , \" highAvailabilityServices \" ) ; \n this . scheduledExecutor = Preconditions . checkNotNull ( scheduledExecutor , \" scheduledExecutor \" ) ; \n this . jobTimeout = Preconditions . checkNotNull ( jobTimeout , \" jobTimeout \" ) ;", "msg": "[ hotfix ] [ runtime ] Remove obsolete Exception from JobLeaderIdService signature\n"}
{"diff": "a / src / main / java / com / lmax / disruptor / LiteBlockingWaitStrategy . java \n  b / src / main / java / com / lmax / disruptor / LiteBlockingWaitStrategy . java \n public long waitFor ( long sequence , Sequence cursorSequence , Sequence dependentSe \n { \n do \n { \n - signalNeeded . set ( true ) ; \n + signalNeeded . getAndSet ( true ) ; \n \n if ( ( availableSequence = cursorSequence . get ( ) ) > = sequence ) \n {", "msg": "Update LiteBlockingWaitStrategy with getAndSet for signalNeeded flag\n"}
{"diff": "a / library / core / src / main / java / com / google / android / exoplayer2 / SimpleExoPlayer . java \n  b / library / core / src / main / java / com / google / android / exoplayer2 / SimpleExoPlayer . java \n private void verifyApplicationThread ( ) { \n Log . w ( \n TAG , \n \" Player is accessed on the wrong thread . See \" \n - + \" https : / / exoplayer . dev / faqs . html # \" \n + + \" https : / / exoplayer . dev / troubleshooting . html # \" \n + \" what - do - player - is - accessed - on - the - wrong - thread - warnings - mean \" , \n hasNotifiedFullWrongThreadWarning ? null : new IllegalStateException ( ) ) ; \n hasNotifiedFullWrongThreadWarning = true ;", "msg": "Update player accessed on wrong thread URL\n"}
{"diff": "a / graal / com . oracle . graal . api . meta / src / com / oracle / graal / api / meta / MetaUtil . java \n  b / graal / com . oracle . graal . api . meta / src / com / oracle / graal / api / meta / MetaUtil . java \n public static String toJavaName ( JavaType type ) { \n return ( type = = null ) ? null : internalNameToJava ( type . getName ( ) , true , false ) ; \n } \n \n + / * * \n + * Returns the type name in the same format as { @ link Class # getName ( ) } . \n + * / \n + public static String toClassName ( JavaType type ) { \n + return internalNameToJava ( type . getName ( ) , true , true ) ; \n + } \n + \n private static String internalNameToJava ( String name , boolean qualified , boolean classForNameCompatible ) { \n switch ( name . charAt ( 0 ) ) { \n case ' L ' : {", "msg": "Add JavaType - to - String that produces same result as Class . getName ( )\n"}
{"diff": "a / src / org / thoughtcrime / securesms / ConversationListActivity . java \n  b / src / org / thoughtcrime / securesms / ConversationListActivity . java \n private void handleInvite ( ) { \n \n private void handleHelp ( ) { \n try { \n - startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( \" https : / / support . whispersystems . org \" ) ) ) ; \n + startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( \" https : / / support . signal . org \" ) ) ) ; \n } catch ( ActivityNotFoundException e ) { \n Toast . makeText ( this , R . string . ConversationListActivity_there_is_no_browser_installed_on_your_device , Toast . LENGTH_LONG ) . show ( ) ; \n }", "msg": "Update help URL to avoid redirect .\n"}
{"diff": "a / gdx / src / com / badlogic / gdx / scenes / scene2d / ui / TextArea . java \n  b / gdx / src / com / badlogic / gdx / scenes / scene2d / ui / TextArea . java \n protected void setCursorPosition ( float x , float y ) { \n \n @ Override \n public boolean keyDown ( InputEvent event , int keycode ) { \n - super . keyDown ( event , keycode ) ; \n + boolean result = super . keyDown ( event , keycode ) ; \n Stage stage = getStage ( ) ; \n if ( stage ! = null & & stage . getKeyboardFocus ( ) = = TextArea . this ) { \n boolean repeat = false ; \n public boolean keyDown ( InputEvent event , int keycode ) { \n showCursor ( ) ; \n return true ; \n } \n - return false ; \n + return result ; \n } \n \n @ Override", "msg": "Get result when calling super in keyDown for later return .\n"}
{"diff": "a / java / client / src / org / openqa / selenium / By . java \n  b / java / client / src / org / openqa / selenium / By . java \n \n import java . util . HashMap ; \n import java . util . List ; \n import java . util . Map ; \n - import java . util . Scanner ; \n - import java . util . stream . Collectors ; \n import java . util . stream . Stream ; \n \n import static java . util . stream . Collectors . joining ;", "msg": "[ java ] Deleting unused imports\n"}
{"diff": "a / core / src / main / java / hudson / Functions . java \n  b / core / src / main / java / hudson / Functions . java \n \n import hudson . cli . CLICommand ; \n import hudson . console . ConsoleAnnotationDescriptor ; \n import hudson . console . ConsoleAnnotatorFactory ; \n + import hudson . matrix . MatrixProject ; \n import hudson . model . AbstractProject ; \n import hudson . model . Action ; \n import hudson . model . Describable ; \n public static boolean isModelWithContextMenu ( Object o ) { \n public static boolean isModelWithChildren ( Object o ) { \n return o instanceof ModelObjectWithChildren ; \n } \n + \n + public static boolean isMatrixProject ( Object o ) { \n + return o instanceof MatrixProject ; \n + } \n \n public static String xsDate ( Calendar cal ) { \n return Util . XS_DATETIME_FORMATTER . format ( cal . getTime ( ) ) ;", "msg": "Add convenient method for checking if object is MatrixProject\n"}
{"diff": "a / java / server / test / org / openqa / grid / e2e / misc / Issue1586 . java \n  b / java / server / test / org / openqa / grid / e2e / misc / Issue1586 . java \n public void prepare ( ) throws Exception { \n RegistryTestHelper . waitForNode ( hub . getRegistry ( ) , 1 ) ; \n } \n \n - @ Test \n + / / extremely slow test , for issue1586 . Excluding from regression . \n + @ Test ( enabled = false ) \n public void test ( ) throws MalformedURLException { \n DesiredCapabilities ff = DesiredCapabilities . firefox ( ) ; \n WebDriver driver = null ;", "msg": "FrancoisReynaud : removing the test from the regression suite as it accesses a slow external site . Need to find a replacement .\n"}
{"diff": "a / java / server / src / org / openqa / selenium / remote / server / ServicedSession . java \n  b / java / server / src / org / openqa / selenium / remote / server / ServicedSession . java \n public ServicedSession ( \n new JMXHelper ( ) . register ( this ) ; \n } \n \n + @ Override \n + public String toString ( ) { \n + return getId ( ) . toString ( ) + \" ( \" + service . getClass ( ) . getName ( ) + \" ) \" ; \n + } \n + \n @ Override \n public void stop ( ) { \n / / Try and kill the running session . Both W3C and OSS use the same quit endpoint", "msg": "Improving representation of session info in server logs\n"}
{"diff": "a / core / src / main / java / hudson / Launcher . java \n  b / core / src / main / java / hudson / Launcher . java \n public void kill ( final Map < String , String > modelEnvVars ) throws IOException , Inte \n getChannel ( ) . call ( new KillTask ( modelEnvVars ) ) ; \n } \n \n + @ Override \n + public String toString ( ) { \n + return \" RemoteLauncher [ \" + getChannel ( ) + \" ] \" ; \n + } \n + \n private static final class KillTask extends MasterToSlaveCallable < Void , RuntimeException > { \n private final Map < String , String > modelEnvVars ;", "msg": "RemoteLauncher . toString override for easier debugging .\n"}
{"diff": "a / imagepipeline / src / main / java / com / facebook / imagepipeline / producers / NetworkFetchProducer . java \n  b / imagepipeline / src / main / java / com / facebook / imagepipeline / producers / NetworkFetchProducer . java \n protected void handleFinalResult ( \n fetchState . getConsumer ( ) ) ; \n } \n \n - private void notifyConsumer ( \n + protected static void notifyConsumer ( \n PooledByteBufferOutputStream pooledOutputStream , \n @ Consumer . Status int status , \n @ Nullable BytesRange responseBytesRange ,", "msg": "Network fetcher optimizations 1 / n - add 2 new update modes\n"}
{"diff": "a / src / main / java / com / alibaba / druid / filter / stat / StatFilter . java \n  b / src / main / java / com / alibaba / druid / filter / stat / StatFilter . java \n public long getSlowSqlMillis ( ) { \n return slowSqlMillis ; \n } \n \n + public void setSlowSqlMillis ( long slowSqlMillis ) { \n + this . slowSqlMillis = slowSqlMillis ; \n + } \n + \n + public boolean isLogSlowSql ( ) { \n + return logSlowSql ; \n + } \n + \n + public void setLogSlowSql ( boolean logSlowSql ) { \n + this . logSlowSql = logSlowSql ; \n + } \n + \n public boolean isConnectionStackTraceEnable ( ) { \n return connectionStackTraceEnable ; \n }", "msg": "StatFilter add getter & setter for logSlowSql , slowSqlMillis\n"}
{"diff": "new file mode 100644 \n index 00000000000 . . 2ab44437050 \n  / dev / null \n  b / common / test / java / com / googlecode / webdriver / Message . java \n \n + package com . googlecode . webdriver ; \n + \n + public class Message { \n + public static String getString ( String key ) { \n + return null ; \n + } \n + }", "msg": "SimonStewart : Adding missing file to allow tests to compile\n"}
{"diff": "a / spring - boot - actuator / src / main / java / org / springframework / boot / actuate / system / ApplicationPidFileWriter . java \n  b / spring - boot - actuator / src / main / java / org / springframework / boot / actuate / system / ApplicationPidFileWriter . java \n public void onApplicationEvent ( SpringApplicationEvent event ) { \n writePidFile ( event ) ; \n } \n catch ( Exception ex ) { \n - logger . warn ( String . format ( \" Cannot create pid file % s \" , this . file ) ) ; \n + logger . warn ( String . format ( \" Cannot create pid file % s \" , this . file ) , ex ) ; \n } \n } \n }", "msg": "Include exception in warning message when pid file cannot be created\n"}
{"diff": "a / gdx / src / com / badlogic / gdx / scenes / scene2d / ui / ScrollPane . java \n  b / gdx / src / com / badlogic / gdx / scenes / scene2d / ui / ScrollPane . java \n public float getScrollY ( ) { \n return amountY ; \n } \n \n + / * * Sets the visual scroll amount equal to the scroll amount . This can be used when setting the scroll amount without animating . * / \n + public void updateVisualScroll ( ) { \n + visualAmountX = amountX ; \n + visualAmountY = amountY ; \n + } \n + \n public float getVisualScrollX ( ) { \n return ! scrollX ? 0 : visualAmountX ; \n }", "msg": "Added updateVisualScroll for setting scroll position without animating .\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / bazel / rules / workspace / MavenServerRule . java \n  b / src / main / java / com / google / devtools / build / lib / bazel / rules / workspace / MavenServerRule . java \n public Metadata getMetadata ( ) { \n maven_jar ( \n name = \" junit \" , \n artifact = \" junit : junit - dep : 4 . 10 \" , \n - server = \" my - server \" , \n + server = \" my_server \" , \n ) \n \n maven_server ( \n - name = \" my - server \" , \n + name = \" my_server \" , \n url = \" http : / / intranet . mycorp . net \" , \n ) \n < / pre > \n \n This specifies that junit should be downloaded from http : / / intranet . mycorp . net using the \n authentication information found in ~ / . m2 / settings . xml ( specifically , the settings \n - for the server with the id < code > my - server < / code > ) . \n + for the server with the id < code > my_server < / code > ) . \n \n < h4 > Specifying a default server < / h4 >", "msg": "Correct maven_server rule docs to use valid workspace name\n"}
{"diff": "a / nephele / nephele - server / src / main / java / eu / stratosphere / nephele / taskmanager / bytebuffered / OutgoingConnection . java \n  b / nephele / nephele - server / src / main / java / eu / stratosphere / nephele / taskmanager / bytebuffered / OutgoingConnection . java \n public void dropAllQueuedEnvelopesForChannel ( ChannelID channelID , boolean source \n } \n } \n } \n - \n + \n / / Recycle buffer outside of queuedEnvelopes monitor , otherwise dead locks might occur \n final Iterator < Buffer > it = buffersToRecycle . iterator ( ) ; \n - while ( it . hasNext ( ) ) { \n + while ( it . hasNext ( ) ) { \n it . next ( ) . recycleBuffer ( ) ; \n } \n }", "msg": "Corrected code style of OutgoingConnection . java\n"}
{"diff": "a / guava - tests / test / com / google / common / net / HttpHeadersTest . java \n  b / guava - tests / test / com / google / common / net / HttpHeadersTest . java \n static void assertConstantNameMatchesString ( Class < ? > clazz , \n * fields , they will cause similar problems , and we may want to switch \n * this check to isAccessible ( ) . \n * / \n - if ( ! field . isSynthetic ( ) ) { \n + if ( ! field . isSynthetic ( ) & & field . getType ( ) = = String . class ) { \n builder . add ( field ) ; \n } \n }", "msg": "More strictly restrict when fields are added to the set of relevant fields , only supporting non - synthetic String fields .\n"}
{"diff": "a / src / com . oracle . truffle . espresso . jdwp / src / com / oracle / truffle / espresso / jdwp / impl / JDWP . java \n  b / src / com . oracle . truffle . espresso . jdwp / src / com / oracle / truffle / espresso / jdwp / impl / JDWP . java \n static CommandResult createReply ( Packet packet , JDWPContext context ) { \n if ( classLoader = = null ) { \n return new CommandResult ( reply ) ; \n } \n - \n - / / TODO ( Gregersen ) - we will need all classes for which this classloader was the \n - / / initiating loader \n - / / tracked by / browse / GR - 19820 \n KlassRef [ ] klasses = context . getInitiatedClasses ( classLoader ) ; \n \n reply . writeInt ( klasses . length ) ;", "msg": "Remove TODO for an issue that turned out to be a non - issue\n"}
{"diff": "a / transport / src / main / java / io / netty / channel / local / LocalChannel . java \n  b / transport / src / main / java / io / netty / channel / local / LocalChannel . java \n public void run ( ) { \n } \n \n private void releaseInboundBuffers ( ) { \n - if ( readInProgress ) { \n - return ; \n - } \n + assert eventLoop ( ) = = null | | eventLoop ( ) . inEventLoop ( ) ; \n + readInProgress = false ; \n Queue < Object > inboundBuffer = this . inboundBuffer ; \n Object msg ; \n while ( ( msg = inboundBuffer . poll ( ) ) ! = null ) {", "msg": "Now that LocalChannel # releaseInboundBuffers is only called from the EventLoop ( eb4d317b9d64f3945a209804fec4c3fe695f4f9f ) it should clear readInProgress and drain / release the queue . Otherwise if a read event is pending ( doBeginRead ) was called we may later call channelRead or channelReadComplete after we have closed the channel .\n"}
{"diff": "a / selenium / src / java / org / openqa / selenium / WebDriverBackedSelenium . java \n  b / selenium / src / java / org / openqa / selenium / WebDriverBackedSelenium . java \n private void stopTimeoutThreadIfExists ( ) { \n timeoutThread = null ; \n } \n } \n - \n + \n + public WebDriver getUnderlyingWebDriver ( ) { \n + return driver ; \n + } \n + \n / * * \n * Creates a new timeout thread . If exists a previous existing timeout will \n * be stopped . \n private Object executeScript ( String script , Object . . . args ) { \n } \n \n public void captureEntirePageScreenshot ( String s ) { \n - throw new UnsupportedOperationException ( ) ; \n + throw new UnsupportedOperationException ( \" captureEntirePageScreenshot \" ) ; \n } \n \n public void addScript ( String arg0 , String arg1 ) {", "msg": "SimonStewart : Adding an obviously missing method for the Selenium emulation : it ' s now possible to get the underlying driver instance back .\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / syntax / Runtime . java \n  b / src / main / java / com / google / devtools / build / lib / syntax / Runtime . java \n public static void setupModuleGlobals ( Environment env , Class < ? > moduleClass ) { \n throw new AssertionError ( e ) ; \n } \n } \n - \n - / * * \n - * Registers global fields with SkylarkSignature into the specified Environment . Alias for \n - * { @ link # setupModuleGlobals } . \n - * \n - * @ deprecated Use { @ link # setupModuleGlobals } instead . \n - * / \n - @ Deprecated \n - / / TODO ( bazel - team ) : Remove after all callers updated . \n - public static void registerModuleGlobals ( Environment env , Class < ? > moduleClass ) { \n - setupModuleGlobals ( env , moduleClass ) ; \n - } \n }", "msg": "Remove deprecated method that no longer has any usages .\n"}
{"diff": "a / src / main / java / com / lmax / disruptor / BatchEventProcessor . java \n  b / src / main / java / com / lmax / disruptor / BatchEventProcessor . java \n private void processEvents ( ) \n try \n { \n final long availableSequence = sequenceBarrier . waitFor ( nextSequence ) ; \n - if ( batchStartAware ! = null ) \n + if ( batchStartAware ! = null & & availableSequence > = nextSequence ) \n { \n batchStartAware . onBatchStart ( availableSequence - nextSequence + 1 ) ; \n }", "msg": "avoid signalling empty batch to BatchStartAware handler\n"}
{"diff": "a / library / src / main / java / com / google / android / exoplayer / MediaCodecAudioTrackRenderer . java \n  b / library / src / main / java / com / google / android / exoplayer / MediaCodecAudioTrackRenderer . java \n private long durationUsToFrames ( long durationUs ) { \n \n @ Override \n protected void onDisabled ( ) { \n - super . onDisabled ( ) ; \n - releaseAudioTrack ( ) ; \n audioSessionId = 0 ; \n + try { \n + releaseAudioTrack ( ) ; \n + } finally { \n + super . onDisabled ( ) ; \n + } \n } \n \n @ Override", "msg": "Tweak audio renderer to match dev / dev - hls .\n"}
{"diff": "a / java / client / src / org / openqa / selenium / firefox / FirefoxDriver . java \n  b / java / client / src / org / openqa / selenium / firefox / FirefoxDriver . java \n private static FirefoxProfile extractProfile ( Capabilities capabilities ) { \n } \n \n profile = getProfile ( profile ) ; \n + \n + if ( capabilities = = null ) { \n + return profile ; \n + } \n \n if ( capabilities . getCapability ( SUPPORTS_WEB_STORAGE ) ! = null ) { \n Boolean supportsWebStorage = ( Boolean ) capabilities . getCapability ( SUPPORTS_WEB_STORAGE ) ;", "msg": "EranMes on behalf of EmmaSoderberg : Adding null - check to extraction of profile in the Firefox driver\n"}
{"diff": "a / gdx - backend - android / src / com / badlogic / gdx / backends / android / AndroidFont . java \n  b / gdx - backend - android / src / com / badlogic / gdx / backends / android / AndroidFont . java \n public int getLineHeight ( ) { \n / * * \n * { @ inheritDoc } \n * / \n - @ Override \n + Rect tmpRect = new Rect ( ) ; \n + @ Override \n public int getStringWidth ( String text ) \n - { \n - Rect rect = new Rect ( ) ; \n - paint . getTextBounds ( text , 0 , text . length ( ) , rect ) ; \n - return rect . width ( ) ; \n + { \n + paint . getTextBounds ( text , 0 , text . length ( ) , tmpRect ) ; \n + return tmpRect . width ( ) ; \n } \n \n - Rect tmpRect = new Rect ( ) ; \n / * * \n * { @ inheritDoc } \n * /", "msg": "[ fixed ] removed temporary object allocation from getStringWidth .\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / rules / cpp / CcLinkParams . java \n  b / src / main / java / com / google / devtools / build / lib / rules / cpp / CcLinkParams . java \n public Builder addLinkOpts ( NestedSet < LinkOptions > linkOpts ) { \n return this ; \n } \n \n - / * * Adds a collection of linkstamps . * / \n - public Builder addLinkstamps ( \n - NestedSet < Artifact > linkstamps , NestedSet < Artifact > declaredIncludeSrcs ) { \n - for ( Artifact linkstamp : linkstamps ) { \n - linkstampsBuilder . add ( new Linkstamp ( linkstamp , declaredIncludeSrcs ) ) ; \n - } \n - return this ; \n - } \n - \n public Builder addLinkstamps ( NestedSet < Linkstamp > linkstamps ) { \n for ( Linkstamp linkstamp : linkstamps ) { \n linkstampsBuilder . add ( linkstamp ) ;", "msg": "Deletes unused CcLinkParams . Builder . addLinkstamps method .\n"}
{"diff": "a / truffle / src / com . oracle . truffle . api . vm / src / com / oracle / truffle / api / vm / PolyglotContextImpl . java \n  b / truffle / src / com . oracle . truffle . api . vm / src / com / oracle / truffle / api / vm / PolyglotContextImpl . java \n synchronized boolean isActive ( ) { \n PolyglotThreadInfo getFirstActiveOtherThread ( boolean includePolyglotThread ) { \n assert Thread . holdsLock ( this ) ; \n / / send enters and leaves into a lock by setting the lastThread to null . \n + this . lastThread = PolyglotThreadInfo . NULL ; \n for ( PolyglotThreadInfo otherInfo : threads . values ( ) ) { \n if ( ! includePolyglotThread & & otherInfo . isPolyglotThread ( ) ) { \n continue ;", "msg": "Reduce probability of races by sending all threads to a lock in getFirstActiveOtherThread .\n"}
{"diff": "a / src / main / java / com / alibaba / fastjson / parser / JSONScanner . java \n  b / src / main / java / com / alibaba / fastjson / parser / JSONScanner . java \n protected void setTimeZone ( char timeZoneFlag , char t0 , char t1 , char t3 , char t4 \n } \n \n if ( calendar . getTimeZone ( ) . getRawOffset ( ) ! = timeZoneOffset ) { \n - calendar . setTimeZone ( new SimpleTimeZone ( timeZoneOffset , \" \" + timeZoneOffset ) ) ; \n + calendar . setTimeZone ( new SimpleTimeZone ( timeZoneOffset , Integer . toString ( timeZoneOffset ) ) ) ; \n } \n }", "msg": "SimpleTimeZone ID : use Integer . toString instead of String concat\n"}
{"diff": "a / transport / src / main / java / io / netty / channel / AbstractChannel . java \n  b / transport / src / main / java / io / netty / channel / AbstractChannel . java \n public SocketAddress localAddress ( ) { \n return localAddress ; \n } \n \n + / * * \n + * @ deprecated no use - case for this . \n + * / \n + @ Deprecated \n protected void invalidateLocalAddress ( ) { \n localAddress = null ; \n } \n public SocketAddress remoteAddress ( ) { \n } \n \n / * * \n - * Reset the stored remoteAddress \n + * @ deprecated no use - case for this . \n * / \n + @ Deprecated \n protected void invalidateRemoteAddress ( ) { \n remoteAddress = null ; \n }", "msg": "Deprecate methods in AbstractChannel that have no real usage .\n"}
{"diff": "a / wasm / src / com . oracle . truffle . wasm . parser / src / com / oracle / truffle / wasm / parser / binary / BinaryStreamReader . java \n  b / wasm / src / com . oracle . truffle . wasm . parser / src / com / oracle / truffle / wasm / parser / binary / BinaryStreamReader . java \n public int readSignedInt32 ( ) { \n shift + = 7 ; \n } while ( ( b & 0x80 ) ! = 0 ) ; \n \n - if ( ( shift < 32 ) & & ( b & 0x40 ) = = 0 ) { \n + if ( ( shift < 32 ) & & ( b & 0x40 ) ! = 0 ) { \n result | = ( ~ 0 < < shift ) ; \n } \n return result ; \n public int readUnsignedInt32 ( ) { \n return result ; \n } \n \n - public float readF32 ( ) { \n - int rawBits = read4 ( ) ; \n - return Float . intBitsToFloat ( rawBits ) ; \n + public int readFloat32 ( ) { \n + return read4 ( ) ; \n } \n \n - public double readF64 ( ) { \n - long rawBits = read8 ( ) ; \n - return Double . longBitsToDouble ( rawBits ) ; \n + public long readFloat64 ( ) { \n + return read8 ( ) ; \n } \n \n public byte read1 ( ) {", "msg": "parser : fix sign extension in readSignedInt32\n"}
{"diff": "a / src / main / java / org / jboss / netty / bootstrap / ClientBootstrap . java \n  b / src / main / java / org / jboss / netty / bootstrap / ClientBootstrap . java \n public ChannelFuture connect ( final SocketAddress remoteAddress , final SocketAddr \n } \n } while ( future = = null ) ; \n \n + pipeline . remove ( \" connector \" ) ; \n + \n return future ; \n }", "msg": "It ' s more correct to remove the connector handler in ClientBootstrap\n"}
{"diff": "a / java / client / src / org / openqa / selenium / firefox / FirefoxDriver . java \n  b / java / client / src / org / openqa / selenium / firefox / FirefoxDriver . java \n \n import org . openqa . selenium . logging . LocalLogs ; \n import org . openqa . selenium . logging . NeedsLocalLogs ; \n import org . openqa . selenium . logging . LoggingPreferences ; \n - import org . openqa . selenium . logging . Logs ; \n import org . openqa . selenium . remote . Command ; \n import org . openqa . selenium . remote . CommandExecutor ; \n import org . openqa . selenium . remote . DesiredCapabilities ;", "msg": "SimonStewart : Clean up imports . No logical changes here either .\n"}
{"diff": "a / spring - boot - project / spring - boot - autoconfigure / src / main / java / org / springframework / boot / autoconfigure / web / servlet / error / ErrorMvcAutoConfiguration . java \n  b / spring - boot - project / spring - boot - autoconfigure / src / main / java / org / springframework / boot / autoconfigure / web / servlet / error / ErrorMvcAutoConfiguration . java \n public void render ( Map < String , ? > model , HttpServletRequest request , HttpServlet \n } \n response . setContentType ( TEXT_HTML_UTF8 . toString ( ) ) ; \n StringBuilder builder = new StringBuilder ( ) ; \n - Date timestamp = ( Date ) model . get ( \" timestamp \" ) ; \n + Object timestamp = model . get ( \" timestamp \" ) ; \n Object message = model . get ( \" message \" ) ; \n Object trace = model . get ( \" trace \" ) ; \n if ( response . getContentType ( ) = = null ) {", "msg": "Allow other \" timestamp \" types in MVC error model\n"}
{"diff": "a / library / src / main / java / com / bumptech / glide / load / engine / Engine . java \n  b / library / src / main / java / com / bumptech / glide / load / engine / Engine . java \n public void shutdown ( ) { \n * \n * < p > Non - final for mocking . \n * / \n - public static class LoadStatus { \n + public class LoadStatus { \n private final EngineJob < ? > engineJob ; \n private final ResourceCallback cb ; \n \n public void shutdown ( ) { \n } \n \n public void cancel ( ) { \n - engineJob . removeCallback ( cb ) ; \n + / / Acquire the Engine lock so that a new request can ' t get access to a particular EngineJob \n + / / just after the EngineJob has been cancelled . Without this lock , we ' d allow new requests \n + / / to find the cancelling EngineJob in our Jobs data structure . With this lock , the EngineJob \n + / / is both cancelled and removed from Jobs atomically . \n + synchronized ( Engine . this ) { \n + engineJob . removeCallback ( cb ) ; \n + } \n } \n }", "msg": "Ensure that EngineJobs are cancelled and removed from Engine ' s Job set atomically .\n"}
{"diff": "a / graal / com . oracle . graal . phases . common / src / com / oracle / graal / phases / common / DominatorConditionalEliminationPhase . java \n  b / graal / com . oracle . graal . phases . common / src / com / oracle / graal / phases / common / DominatorConditionalEliminationPhase . java \n private void processGuard ( GuardNode node , List < Runnable > undoOperations ) { \n node . replaceAndDelete ( guard ) ; \n } else { \n DeoptimizeNode deopt = node . graph ( ) . add ( new DeoptimizeNode ( node . action ( ) , node . reason ( ) ) ) ; \n - Block block = nodeToBlock . apply ( node ) ; \n - AbstractBeginNode beginNode = block . getBeginNode ( ) ; \n + AbstractBeginNode beginNode = ( AbstractBeginNode ) node . getAnchor ( ) ; \n FixedNode next = beginNode . next ( ) ; \n beginNode . setNext ( deopt ) ; \n GraphUtil . killCFG ( next ) ;", "msg": "conditional elimination : use begin node from guard anchor instead of node to block map\n"}
{"diff": "a / truffle / src / com . oracle . truffle . api / src / com / oracle / truffle / api / nodes / RootNode . java \n  b / truffle / src / com . oracle . truffle . api / src / com / oracle / truffle / api / nodes / RootNode . java \n public static RootNode createConstantNode ( Object constant ) { \n return new Constant ( constant ) ; \n } \n \n - final Lock getLazyLock ( ) { \n + final ReentrantLock getLazyLock ( ) { \n ReentrantLock l = this . lock ; \n if ( l = = null ) { \n l = initializeLock ( ) ;", "msg": "More precise return type for getLazyLock ( ) .\n"}
{"diff": "a / src / test / java / org / elasticsearch / test / store / MockFSDirectoryService . java \n  b / src / test / java / org / elasticsearch / test / store / MockFSDirectoryService . java \n public void afterIndexShardClosed ( ShardId sid , @ Nullable IndexShard indexShard ) \n \n @ Override \n public Directory [ ] build ( ) throws IOException { \n - return helper . wrapAllInplace ( delegateService . build ( ) ) ; \n + return delegateService . build ( ) ; \n } \n \n @ Override", "msg": "Prevent double wrapping directories in MockDirectoryWrapper\n"}
{"diff": "a / src / main / java / org / jboss / netty / handler / logging / LoggingHandler . java \n  b / src / main / java / org / jboss / netty / handler / logging / LoggingHandler . java \n public void handleDownstream ( ChannelHandlerContext ctx , ChannelEvent e ) \n } \n \n protected void log ( ChannelEvent e ) { \n - String msg = e . toString ( ) ; \n if ( logger . isDebugEnabled ( ) ) { \n + String msg = e . toString ( ) ; \n + \n / / Append hex dump if necessary . \n if ( hexDump & & e instanceof MessageEvent ) { \n MessageEvent me = ( MessageEvent ) e ;", "msg": "Tiny optimization - no need to create a string when there ' s nothing to log\n"}
{"diff": "a / src / main / java / org / elasticsearch / indices / flush / SyncedFlushService . java \n  b / src / main / java / org / elasticsearch / indices / flush / SyncedFlushService . java \n public void handleResponse ( PreSyncedFlushResponse response ) { \n \n @ Override \n public void handleException ( TransportException exp ) { \n - logger . trace ( \" { } error while performing pre synced flush on [ { } ] , skipping \" , shardId , exp , shard ) ; \n + logger . trace ( \" { } error while performing pre synced flush on [ { } ] , skipping \" , exp , shardId , shard ) ; \n if ( countDown . countDown ( ) ) { \n listener . onResponse ( commitIds ) ; \n }", "msg": "fix log message . exception first , parameters later\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / packages / ClassObjectConstructor . java \n  b / src / main / java / com / google / devtools / build / lib / packages / ClassObjectConstructor . java \n \n + \" Note : Some providers , defined internally , do not allow instance creation \" \n + \" < / li > \" \n + \" < li > It is a < i > key < / i > to access a provider instance on a \" \n - + \" < a href = \\ \" lib / Target . html \\ \" > Target < / a > \" \n + + \" < a href = \\ \" Target . html \\ \" > Target < / a > \" \n + \" < pre class = \\ \" language - python \\ \" > DataInfo = provider ( ) \\ n \" \n + \" def _rule_impl ( ctx ) \\ n \" \n + \" . . . ctx . attr . dep [ DataInfo ] < / pre > \"", "msg": "Fixed relative link in documentation to Provider\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / skyframe / SkyFunctions . java \n  b / src / main / java / com / google / devtools / build / lib / skyframe / SkyFunctions . java \n \n SkyFunctionName . createHermetic ( \" PACKAGE_ERROR_MESSAGE \" ) ; \n public static final SkyFunctionName TARGET_MARKER = \n SkyFunctionName . createHermetic ( \" TARGET_MARKER \" ) ; \n - / / Non - hermetic because accesses package locator \n + / / Semi - hermetic because accesses package locator \n public static final SkyFunctionName TARGET_PATTERN = \n - SkyFunctionName . createNonHermetic ( \" TARGET_PATTERN \" ) ; \n + SkyFunctionName . createSemiHermetic ( \" TARGET_PATTERN \" ) ; \n static final SkyFunctionName TARGET_PATTERN_ERROR = \n SkyFunctionName . createHermetic ( \" TARGET_PATTERN_ERROR \" ) ; \n public static final SkyFunctionName PREPARE_DEPS_OF_PATTERNS =", "msg": "Make TARGET_PATTERN semi - hermetic . It ' s depended on by RegisteredToolchainsFunction , so it affects a lot .\n"}
{"diff": "a / guava / src / com / google / common / base / Objects . java \n  b / guava / src / com / google / common / base / Objects . java \n private Objects ( ) { } \n * \n * < p > < b > Note for Java 7 and later : < / b > This method should be treated as \n * deprecated ; use { @ link java . util . Objects # equals } instead . \n - * \n * / \n @ CheckReturnValue \n public static boolean equal ( @ Nullable Object a , @ Nullable Object b ) { \n public static boolean equal ( @ Nullable Object a , @ Nullable Object b ) { \n * \n * < p > < b > Note for Java 7 and later : < / b > This method should be treated as \n * deprecated ; use { @ link java . util . Objects # hash } instead . \n - * \n * / \n public static int hashCode ( @ Nullable Object . . . objects ) { \n return Arrays . hashCode ( objects ) ;", "msg": "Revert base . Objects - > j . u . Objects deprecations until we do the bulk of the migrations ourselves ( blocked : see bug ) .\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / runtime / BlazeCommandDispatcher . java \n  b / src / main / java / com / google / devtools / build / lib / runtime / BlazeCommandDispatcher . java \n private BlazeCommandResult execExclusively ( \n } \n return result ; \n } catch ( Throwable e ) { \n + outErr . printErr ( \n + \" Internal error thrown during build . Printing stack trace : \" \n + + Throwables . getStackTraceAsString ( e ) ) ; \n e . printStackTrace ( ) ; \n BugReport . printBug ( outErr , e ) ; \n BugReport . sendBugReport ( e , args , env . getCrashData ( ) ) ;", "msg": "Log Throwables that happened during the build to the outErr of the BlazeCommandDispatcher . This way they can be logged in the BEP .\n"}
{"diff": "a / core / src / main / java / org / elasticsearch / index / IndexService . java \n  b / core / src / main / java / org / elasticsearch / index / IndexService . java \n \n private final AtomicBoolean deleted = new AtomicBoolean ( false ) ; \n private final IndexSettings indexSettings ; \n \n - @ Inject \n public IndexService ( IndexSettings indexSettings , NodeEnvironment nodeEnv , \n SimilarityService similarityService , \n ShardStoreDeleter shardStoreDeleter ,", "msg": "IndexService : remove unneed inject annotation from\n"}
{"diff": "a / x - pack / plugin / transform / qa / single - node - tests / src / test / java / org / elasticsearch / xpack / transform / integration / TransformRobustnessIT . java \n  b / x - pack / plugin / transform / qa / single - node - tests / src / test / java / org / elasticsearch / xpack / transform / integration / TransformRobustnessIT . java \n public void testTaskRemovalAfterInternalIndexGotDeleted ( ) throws Exception { \n \n / / the task is gone \n assertEquals ( 0 , getNumberOfTransformTasks ( ) ) ; \n + \n + / / delete the transform because the task might have written a state doc , cleanup fails if the index isn ' t empty \n + deleteTransform ( transformId ) ; \n } \n \n @ SuppressWarnings ( \" unchecked \" )", "msg": "delete the transform to delete any docs which might have been written by the ( )\n"}
{"diff": "a / selenium / src / java / org / openqa / selenium / WebDriverCommandProcessor . java \n  b / selenium / src / java / org / openqa / selenium / WebDriverCommandProcessor . java \n public Object call ( ) throws Exception { \n } ) ; \n } \n \n + public boolean isMethodAvailable ( String methodName ) { \n + return seleneseMethods . containsKey ( methodName ) ; \n + } \n + \n + public void addMethod ( String methodName , SeleneseCommand command ) { \n + seleneseMethods . put ( methodName , command ) ; \n + } \n + \n public Map < String , SeleneseCommand > getMethodMap ( ) { \n return seleneseMethods ; \n }", "msg": "PatrickLightbody Removing leaky access in favor of Simon ' s suggested changes , documented here http : / / code . google . com / p / selenium / source / detail ? r = 7953\n"}
{"diff": "new file mode 100644 \n index 0000000 . . 81904bc \n  / dev / null \n  b / src / main / java / com / seriouscompany / business / java / fizzbuzz / packagenamingpackage / interfaces / strategies / FizzBuzzOutputStrategy . java \n \n + package com . seriouscompany . business . java . fizzbuzz . packagenamingpackage . interfaces . strategies ; \n + \n + public interface FizzBuzzOutputStrategy { \n + \n + public void output ( String output ) ; \n + \n + }", "msg": "Adding a much needed output strategy to get away from that old , crusty , System . out construct\n"}
{"diff": "a / core / src / main / java / hudson / cli / DeleteNodeCommand . java \n  b / core / src / main / java / hudson / cli / DeleteNodeCommand . java \n \n \n import hudson . Extension ; \n import hudson . model . Node ; \n + import org . acegisecurity . AccessDeniedException ; \n import jenkins . model . Jenkins ; \n import org . kohsuke . args4j . Argument ; \n \n - import java . nio . file . AccessDeniedException ; \n import java . util . HashSet ; \n import java . util . List ; \n import java . util . logging . Logger ;", "msg": "CLI delete - node : correction of handling an exception occurred during execution when not enough rights are on\n"}
{"diff": "a / core / src / main / java / hudson / model / UpdateCenter . java \n  b / core / src / main / java / hudson / model / UpdateCenter . java \n public Thread newThread ( Runnable r ) { \n * Returns true if it ' s time for us to check for new version . \n * / \n public boolean isDue ( ) { \n + if ( neverUpdate ) return false ; \n if ( dataTimestamp = = - 1 ) \n dataTimestamp = getDataFile ( ) . file . lastModified ( ) ; \n long now = System . currentTimeMillis ( ) ; \n public PageDecoratorImpl ( ) { \n private static final long DAY = DAYS . toMillis ( 1 ) ; \n \n private static final Logger LOGGER = Logger . getLogger ( UpdateCenter . class . getName ( ) ) ; \n + \n + public static boolean neverUpdate = Boolean . getBoolean ( UpdateCenter . class . getName ( ) + \" . never \" ) ; \n }", "msg": "added a hook to skip update center updates . This is primarily added for testing .\n"}
{"diff": "a / gdx / src / com / badlogic / gdx / graphics / g3d / shaders / CompositeShader . java \n  b / gdx / src / com / badlogic / gdx / graphics / g3d / shaders / CompositeShader . java \n private void init ( Renderable renderable ) { \n } \n } \n \n + @ Override \n + public void init ( ) { \n + } \n + \n @ Override \n public int compareTo ( Shader other ) { \n return 0 ;", "msg": "CompositeShader , add unimplemented method to fix warning\n"}
{"diff": "a / core / src / main / java / hudson / slaves / SlaveComputer . java \n  b / core / src / main / java / hudson / slaves / SlaveComputer . java \n protected void kill ( ) { \n \n public RetentionStrategy getRetentionStrategy ( ) { \n Slave n = getNode ( ) ; \n - return n = = null ? RetentionStrategy . INSTANCE : n . getRetentionStrategy ( ) ; \n + return n = = null ? RetentionStrategy . NOOP : n . getRetentionStrategy ( ) ; \n } \n \n / * *", "msg": "SlaveComputer . getRetentionStrategy was using Always when there was no node , leading to launches of unused agent JVMs .\n"}
{"diff": "a / caching / src / main / java / com / iluwatar / caching / AppManager . java \n  b / caching / src / main / java / com / iluwatar / caching / AppManager . java \n public static void initDb ( boolean useMongoDb ) { \n public static void initCachingPolicy ( CachingPolicy policy ) { \n cachingPolicy = policy ; \n if ( cachingPolicy = = CachingPolicy . BEHIND ) { \n - Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( new Runnable ( ) { \n - @ Override \n - public void run ( ) { \n - CacheStore . flushCache ( ) ; \n - } \n - } ) ) ; \n + Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( CacheStore : : flushCache ) ) ; \n } \n CacheStore . clearCache ( ) ; \n }", "msg": "Caching pattern : Refactor shutdown hook to use method reference\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / rules / python / PyCommon . java \n  b / src / main / java / com / google / devtools / build / lib / rules / python / PyCommon . java \n public Artifact createPycFile ( \n SpawnAction . Builder builder = new SpawnAction . Builder ( ) \n . setResources ( PY_COMPILE_RESOURCE_SET ) \n . setExecutable ( pythonBinary ) \n - . setProgressMessage ( \" Compiling Python \" ) \n + . setProgressMessage ( \" Compiling Python \" + source . prettyPrint ( ) ) \n . addInputArgument ( \n ruleContext . getPrerequisiteArtifact ( pythonPrecompileAttribute , Mode . HOST ) ) \n . setMnemonic ( \" PyCompile \" ) ;", "msg": "Improve progress message of the actions triggered by - - precompile_python .\n"}
{"diff": "a / flink - quickstart / flink - tez - quickstart / src / main / resources / archetype - resources / src / main / java / Driver . java \n  b / flink - quickstart / flink - tez - quickstart / src / main / resources / archetype - resources / src / main / java / Driver . java \n \n - # set ( $ hash = ' # ' ) \n - \n package $ { package } ; \n \n / * \n \n \n public class Driver { \n \n - private static final DecimalFormat formatter = new DecimalFormat ( \" $ { hash } $ { hash } $ { hash } . $ { hash } $ { hash } % \" ) ; \n + private static final DecimalFormat formatter = new DecimalFormat ( \" # # # . # # % \" ) ; \n \n public static void main ( String [ ] args ) { \n int exitCode = - 1 ;", "msg": "[ tez ] remove unused hash variable\n"}
{"diff": "similarity index 98 % \n rename from transport / src / main / java / io / netty / channel / group / ImmediateEventExecutor . java \n rename to common / src / main / java / io / netty / util / concurrent / ImmediateEventExecutor . java \n  a / transport / src / main / java / io / netty / channel / group / ImmediateEventExecutor . java \n  b / common / src / main / java / io / netty / util / concurrent / ImmediateEventExecutor . java \n \n * License for the specific language governing permissions and limitations \n * under the License . \n * / \n - package io . netty . channel . group ; \n + package io . netty . util . concurrent ; \n \n import io . netty . util . concurrent . AbstractEventExecutor ; \n import io . netty . util . concurrent . DefaultPromise ;", "msg": "[ ] Move ImmediateEventExecutor to common and let it access via a static public field\n"}
{"diff": "a / core / src / main / java / hudson / scm / SCM . java \n  b / core / src / main / java / hudson / scm / SCM . java \n protected final String nullify ( String s ) { \n \n return r ; \n } \n + \n + @ Deprecated \n + public static List < SCMDescriptor < ? > > _for ( final AbstractProject project ) { \n + return _for ( ( Job ) project ) ; \n + } \n }", "msg": "Need to retain original signature of _for ( AbstractProject ) for binary compatibility .\n"}
{"diff": "a / graal / com . oracle . graal . compiler . common / src / com / oracle / graal / compiler / common / type / ArithmeticOpTable . java \n  b / graal / com . oracle . graal . compiler . common / src / com / oracle / graal / compiler / common / type / ArithmeticOpTable . java \n private ArithmeticOpTable ( UnaryOp < Neg > neg , BinaryOp < Add > add , BinaryOp < Sub > sub \n this . floatConvert = new FloatConvertOp [ FloatConvert . values ( ) . length ] ; \n floatConvert . forEach ( op - > this . floatConvert [ op . getFloatConvert ( ) . ordinal ( ) ] = op ) ; \n \n - this . hash = Objects . hash ( neg , add , sub , mul , div , rem , not , and , or , xor , shl , shr , ushr , abs , sqrt , zeroExtend , signExtend , narrow , floatConvert ) ; \n + this . hash = Objects . hash ( neg , add , sub , mul , div , rem , not , and , or , xor , shl , shr , ushr , abs , sqrt , zeroExtend , signExtend , narrow ) ; \n } \n \n @ Override", "msg": "made some hash codes stable across VM executions to support replay compilation\n"}
{"diff": "a / graal / com . oracle . graal . compiler . test / src / com / oracle / graal / compiler / test / GraalCompilerTest . java \n  b / graal / com . oracle . graal . compiler . test / src / com / oracle / graal / compiler / test / GraalCompilerTest . java \n protected static String getCanonicalGraphString ( StructuredGraph graph , boolean e \n } \n result . append ( \" \\ n \" ) ; \n for ( Node node : schedule . getBlockToNodesMap ( ) . get ( block ) ) { \n - if ( node . recordsUsages ( ) ) { \n + if ( node . isAlive ( ) & & node . recordsUsages ( ) ) { \n if ( ! excludeVirtual | | ! ( node instanceof VirtualObjectNode | | node instanceof ProxyNode ) ) { \n int id ; \n if ( canonicalId . get ( node ) ! = null ) {", "msg": "handle dead - code eliminated nodes in GraalCOmpilerTest . getCanonicalGraphString\n"}
{"diff": "a / spring - boot - project / spring - boot - test / src / test / java / org / springframework / boot / test / util / TestPropertyValuesTests . java \n  b / spring - boot - project / spring - boot - test / src / test / java / org / springframework / boot / test / util / TestPropertyValuesTests . java \n public void applyToSystemPropertySource ( ) throws Exception { \n Type . SYSTEM_ENVIRONMENT ) ; \n assertThat ( this . environment . getProperty ( \" foo . bar \" ) ) . isEqualTo ( \" BAZ \" ) ; \n assertThat ( this . environment . getPropertySources ( ) . contains ( \n - \" test - \" + StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ) ) . isTrue ( ) ; \n + \" test - \" + StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ) ) \n + . isTrue ( ) ; \n } \n \n @ Test", "msg": "Polish \" Remove a redundant dash in TestPropertyValues . Type \"\n"}
{"diff": "a / core / src / main / java / hudson / security / Permission . java \n  b / core / src / main / java / hudson / security / Permission . java \n public String toString ( ) { \n * Generic delete access . \n * / \n public static final Permission DELETE = new Permission ( Permission . class , \" Generic Delete \" , WRITE ) ; \n + \n + / * * \n + * Generic configuration access . \n + * / \n + public static final Permission CONFIGURE = new Permission ( Permission . class , \" Generic Configure \" , WRITE ) ; \n }", "msg": "add configuration as it ' s a common pattern seen in multiple places .\n"}
{"diff": "a / graal / com . oracle . graal . lir / src / com / oracle / graal / lir / alloc / trace / lsra / TraceLinearScanLifetimeAnalysisPhase . java \n  b / graal / com . oracle . graal . lir / src / com / oracle / graal / lir / alloc / trace / lsra / TraceLinearScanLifetimeAnalysisPhase . java \n private Analyser ( TraceLinearScan linearScan , TraceBuilderResult < ? > traceBuilderR \n \n private void analyze ( ) { \n countInstructions ( ) ; \n - allocator . printLir ( \" Before register allocation \" , true ) ; \n buildIntervals ( ) ; \n + allocator . printLir ( \" Before register allocation \" , true ) ; \n } \n \n private boolean sameTrace ( AbstractBlockBase < ? > a , AbstractBlockBase < ? > b ) {", "msg": "TraceRA : fix block printing for trace interval dumps .\n"}
{"diff": "a / core / src / main / java / hudson / model / Cause . java \n  b / core / src / main / java / hudson / model / Cause . java \n public String getShortDescription ( ) { \n private transient Cause upstreamCause ; \n private List < Cause > upstreamCauses = new ArrayList < Cause > ( ) ; \n \n + / / for backward bytecode compatibility \n + public UpstreamCause ( AbstractBuild < ? , ? > up ) { \n + this ( ( Run < ? , ? > ) up ) ; \n + } \n + \n public UpstreamCause ( Run < ? , ? > up ) { \n upstreamBuild = up . getNumber ( ) ; \n upstreamProject = up . getParent ( ) . getName ( ) ;", "msg": "readd the AbstractBuild constructor for UpstreamCause to maintain\n"}
{"diff": "a / gdx / src / com / badlogic / gdx / math / Rectangle . java \n  b / gdx / src / com / badlogic / gdx / math / Rectangle . java \n public void set ( float x , float y , float width , float height ) { \n } \n \n / * * \n - * @ param x0 point x coordinate \n - * @ param y0 point y coordinate \n + * @ param x point x coordinate \n + * @ param y point y coordinate \n * @ return whether the point is contained in the rectangle \n * / \n public boolean contains ( float x , float y ) {", "msg": "[ fixed ] warning in Rectangle documentation .\n"}
{"diff": "a / core / src / main / java / jenkins / model / lazy / AbstractLazyLoadRunMap . java \n  b / core / src / main / java / jenkins / model / lazy / AbstractLazyLoadRunMap . java \n private Index ( Index rhs ) { \n * / \n private File dir ; \n \n + @ Restricted ( NoExternalUse . class ) / / subclassing other than by RunMap does not guarantee compatibility \n protected AbstractLazyLoadRunMap ( File dir ) { \n initBaseDir ( dir ) ; \n }", "msg": "Making various changes to ALLRM incompatible to subclasses , so be explicit that this is distinct from RunMap only for purposes of clarity and testing .\n"}
{"diff": "a / core / src / main / java / org / elasticsearch / common / cache / Cache . java \n  b / core / src / main / java / org / elasticsearch / common / cache / Cache . java \n void setRemovalListener ( RemovalListener < K , V > removalListener ) { \n * / \n protected long now ( ) { \n / / System . nanoTime takes non - negligible time , so we only use it if we need it \n + / / use System . nanoTime because we want relative time , not absolute time \n return entriesExpireAfterAccess | | entriesExpireAfterWrite ? System . nanoTime ( ) : 0 ; \n }", "msg": "Clarify use of System . nanoTime for measuring eviction times\n"}
{"diff": "a / codec - http / src / main / java / io / netty / handler / codec / http / websocketx / WebSocketClientHandshaker08 . java \n  b / codec - http / src / main / java / io / netty / handler / codec / http / websocketx / WebSocketClientHandshaker08 . java \n public void finishHandshake ( Channel channel , HttpResponse response ) { \n String subprotocol = response . getHeader ( Names . SEC_WEBSOCKET_PROTOCOL ) ; \n setActualSubprotocol ( subprotocol ) ; \n \n + setHandshakeComplete ( ) ; \n + \n channel . getPipeline ( ) . replace ( HttpResponseDecoder . class , \" ws - decoder \" , \n new WebSocket08FrameDecoder ( false , allowExtensions , this . getMaxFramePayloadLength ( ) ) ) ; \n \n - setHandshakeComplete ( ) ; \n } \n }", "msg": "Add a replace ( . . ) method to FrameDecoder and also to ReplayDecoder as it now extend FrameDecoder . This also fix\n"}
{"diff": "a / core / src / main / java / hudson / cli / GroovyCommand . java \n  b / core / src / main / java / hudson / cli / GroovyCommand . java \n protected int run ( ) throws Exception { \n private String loadScript ( ) throws CmdLineException , IOException , InterruptedException { \n if ( script = = null ) \n throw new CmdLineException ( null , \" No script is specified \" ) ; \n + if ( script . equals ( \" = \" ) ) \n + return IOUtils . toString ( stdin ) ; \n + \n return channel . call ( new Callable < String , IOException > ( ) { \n public String call ( ) throws IOException { \n - if ( script . equals ( \" = \" ) ) \n - return IOUtils . toString ( System . in ) ; \n - \n File f = new File ( script ) ; \n if ( f . exists ( ) ) \n return FileUtils . readFileToString ( f ) ;", "msg": "should read from stdin as the caller might be feeding it from elsewhere\n"}
{"diff": "a / src / main / java / org / elasticsearch / gateway / local / LocalGateway . java \n  b / src / main / java / org / elasticsearch / gateway / local / LocalGateway . java \n public void reset ( ) throws Exception { \n \n @ Override \n public void clusterChanged ( final ClusterChangedEvent event ) { \n - / / nothing to do until we actually recover from the gateway or any other block indicates we need to disable persistency \n - if ( event . state ( ) . blocks ( ) . disableStatePersistence ( ) ) { \n - return ; \n - } \n / / order is important , first metaState , and then shardsState \n / / so dangling indices will be recorded \n metaState . clusterChanged ( event ) ;", "msg": "propagate cluster event to shard and meta states in local gateway even when state persistence is disabled , so they can act on it if needed\n"}
{"diff": "a / spring - core / src / main / java / org / springframework / core / annotation / AnnotationUtils . java \n  b / spring - core / src / main / java / org / springframework / core / annotation / AnnotationUtils . java \n \n private static final Map < Class < ? > , Set < Method > > annotatedBaseTypeCache = \n new ConcurrentReferenceHashMap < > ( 256 ) ; \n \n + @ Deprecated / / just here for older tool versions trying to reflectively clear the cache \n + private static final Map < Class < ? > , ? > annotatedInterfaceCache = annotatedBaseTypeCache ; \n + \n private static final Map < Class < ? extends Annotation > , Boolean > synthesizableCache = \n new ConcurrentReferenceHashMap < > ( 256 ) ;", "msg": "AnnotationUtils . annotatedInterfaceCache available as deprecated field\n"}
{"diff": "a / core / src / main / java / jenkins / model / Jenkins . java \n  b / core / src / main / java / jenkins / model / Jenkins . java \n public Computer createComputer ( ) { \n \n private synchronized TaskBuilder loadTasks ( ) throws IOException { \n File projectsDir = new File ( root , \" jobs \" ) ; \n - if ( ! projectsDir . isDirectory ( ) & & ! projectsDir . mkdirs ( ) ) { \n + if ( ! projectsDir . getCanonicalFile ( ) . isDirectory ( ) & & ! projectsDir . mkdirs ( ) ) { \n if ( projectsDir . exists ( ) ) \n throw new IOException ( projectsDir + \" is not a directory \" ) ; \n throw new IOException ( \" Unable to create \" + projectsDir + \" \\ nPermission issue ? Please create this directory manually . \" ) ;", "msg": "[ FIXED JENKINS - 12458 ] support symlink for jobs subdirectory\n"}
{"diff": "a / java / server / src / org / openqa / selenium / grid / commands / Hub . java \n  b / java / server / src / org / openqa / selenium / grid / commands / Hub . java \n \n import static java . net . HttpURLConnection . HTTP_OK ; \n import static org . openqa . selenium . grid . config . StandardGridRoles . EVENT_BUS_ROLE ; \n import static org . openqa . selenium . grid . config . StandardGridRoles . HTTPD_ROLE ; \n + import static org . openqa . selenium . grid . config . StandardGridRoles . ROUTER_ROLE ; \n import static org . openqa . selenium . remote . http . Route . combine ; \n \n @ AutoService ( CliCommand . class ) \n public String getDescription ( ) { \n \n @ Override \n public Set < Role > getConfigurableRoles ( ) { \n - return ImmutableSet . of ( EVENT_BUS_ROLE , HTTPD_ROLE ) ; \n + return ImmutableSet . of ( EVENT_BUS_ROLE , HTTPD_ROLE , ROUTER_ROLE ) ; \n } \n \n @ Override", "msg": "[ grid ] Adding router role to Hub , this enables the flags on the CLI\n"}
{"diff": "a / guava / src / com / google / common / net / HttpHeaders . java \n  b / guava / src / com / google / common / net / HttpHeaders . java \n private HttpHeaders ( ) { } \n public static final String EXPECT = \" Expect \" ; \n / * * The HTTP { @ code From } header field name . * / \n public static final String FROM = \" From \" ; \n + / * * \n + * The HTTP { @ code Follow - Only - When - Prerender - Shown } < / a > header field name . \n + * \n + * @ since 17 . 0 \n + * / \n + @ Beta \n + public static final String FOLLOW_ONLY_WHEN_PRERENDER_SHOWN = \" Follow - Only - When - Prerender - Shown \" ; \n / * * The HTTP { @ code Host } header field name . * / \n public static final String HOST = \" Host \" ; \n / * * The HTTP { @ code If - Match } header field name . * /", "msg": "Add Follow - OnlyWhenPrerender - Shown http header constant .\n"}
{"diff": "a / gdx / src / com / badlogic / gdx / scenes / scene2d / actors / FastImage . java \n  b / gdx / src / com / badlogic / gdx / scenes / scene2d / actors / FastImage . java \n \n private float sScaleY ; \n private float sWidth ; \n private float sHeight ; \n - private Sprite sprite = new Sprite ( ) ; \n - boolean updated = false ; \n + private Sprite sprite = new Sprite ( ) ; \n \n public FastImage ( String name ) { \n super ( name ) ; \n public FastImage ( String name , TextureRegion region ) { \n } \n } \n \n - private void updateSprite ( ) { \n - if ( updated ) return ; \n + private void updateSprite ( ) { \n if ( sX ! = x | | sY ! = y ) { \n sprite . setPosition ( x , y ) ; \n sX = x ; \n private void updateSprite ( ) { \n sHeight = height ; \n } \n \n - sprite . setRegion ( region ) ; \n - updated = true ; \n + sprite . setRegion ( region ) ; \n } \n \n @ Override protected boolean touchDown ( float x , float y , int pointer ) {", "msg": "[ fixed ] updated check in FastImage . Bollocks .\n"}
{"diff": "a / java / server / test / org / openqa / selenium / grid / distributor / DistributorTest . java \n  b / java / server / test / org / openqa / selenium / grid / distributor / DistributorTest . java \n private void waitForAllNodesToHaveCapacity ( Distributor distributor , int nodeCoun \n . pollingEvery ( Duration . ofMillis ( 100 ) ) \n . until ( d - > { \n Set < NodeStatus > nodes = d . getStatus ( ) . getNodes ( ) ; \n - return nodes . size ( ) = = nodeCount & & nodes . stream ( ) . allMatch ( NodeStatus : : hasCapacity ) ; \n + return nodes . size ( ) = = nodeCount & & nodes . stream ( ) . allMatch ( \n + node - > node . getAvailability ( ) = = UP & & node . hasCapacity ( ) ) ; \n } ) ; \n } catch ( TimeoutException ex ) { \n Set < NodeStatus > nodes = distributor . getStatus ( ) . getNodes ( ) ;", "msg": "[ java ] Adding more waits to make DistributorTest stable\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / buildtool / BuildRequest . java \n  b / src / main / java / com / google / devtools / build / lib / buildtool / BuildRequest . java \n public ProgressReportIntervalConverter ( ) { \n } \n } \n \n - @ VisibleForTesting public static final int MAX_JOBS = 2000 ; \n - private static final int JOBS_TOO_HIGH_WARNING = 1000 ; \n + @ VisibleForTesting public static final int MAX_JOBS = 3000 ; \n + private static final int JOBS_TOO_HIGH_WARNING = 1500 ; \n \n private final UUID id ; \n private final LoadingCache < Class < ? extends OptionsBase > , Optional < OptionsBase > > optionsCache ;", "msg": "Bump the blaze max jobs and warning threshold to keep up with the times .\n"}
{"diff": "a / common / src / main / java / io / netty / util / ResourceLeakDetector . java \n  b / common / src / main / java / io / netty / util / ResourceLeakDetector . java \n \n \n public final class ResourceLeakDetector < T > { \n \n - private static volatile boolean disabled ; \n + private static boolean disabled ; \n \n private static final InternalLogger logger = InternalLoggerFactory . getInstance ( ResourceLeakDetector . class ) ;", "msg": "[ ] No need for volatile as it is not needed to be precise\n"}
{"diff": "a / graal / com . oracle . graal . truffle / src / com / oracle / graal / truffle / OptimizedCallTarget . java \n  b / graal / com . oracle . graal . truffle / src / com / oracle / graal / truffle / OptimizedCallTarget . java \n private void interpreterCall ( ) { \n } \n } \n \n - public void compile ( ) { \n + public final void compile ( ) { \n if ( ! isCompiling ( ) ) { \n compiling = true ; \n runtime . compile ( this , TruffleBackgroundCompilation . getValue ( ) & & ! TruffleCompilationExceptionsAreThrown . getValue ( ) ) ;", "msg": "Make method final to improve code that has a MethodHandle to it\n"}
{"diff": "a / gdx / src / com / badlogic / gdx / math / CatmullRomSpline . java \n  b / gdx / src / com / badlogic / gdx / math / CatmullRomSpline . java \n public float approximate ( final T in , final int near ) { \n P3 = in ; \n n = n > 0 ? n - 1 : spanCount - 1 ; \n } \n - float L1 = P1 . dst ( P2 ) ; \n - float L2 = P3 . dst ( P2 ) ; \n - float L3 = P3 . dst ( P1 ) ; \n - float s = ( L2 * L2 + L1 * L1 - L3 * L3 ) / ( 2 * L1 ) ; \n + float L1Sqr = P1 . dst2 ( P2 ) ; \n + float L2Sqr = P3 . dst2 ( P2 ) ; \n + float L3Sqr = P3 . dst2 ( P1 ) ; \n + float L1 = ( float ) Math . sqrt ( L1Sqr ) ; \n + float s = ( L2Sqr + L1Sqr - L3Sqr ) / ( 2f * L1 ) ; \n float u = MathUtils . clamp ( ( L1 - s ) / L1 , 0f , 1f ) ; \n return ( ( float ) n + u ) / spanCount ; \n }", "msg": "Small optimization to avoid unnecessary square roots\n"}
{"diff": "a / flink - runtime / src / main / java / org / apache / flink / runtime / jobmaster / slotpool / SlotSharingManager . java \n  b / flink - runtime / src / main / java / org / apache / flink / runtime / jobmaster / slotpool / SlotSharingManager . java \n public boolean release ( Throwable cause ) { \n if ( parent ! = null ) { \n / / we remove ourselves from our parent if we no longer have children \n parent . releaseChild ( getGroupId ( ) ) ; \n - } else { \n + } else if ( allTaskSlots . remove ( getSlotRequestId ( ) ) ! = null ) { \n / / we are the root node - - > remove the root node from the list of task slots \n - allTaskSlots . remove ( getSlotRequestId ( ) ) ; \n \n if ( ! slotContextFuture . isDone ( ) | | slotContextFuture . isCompletedExceptionally ( ) ) { \n synchronized ( lock ) {", "msg": "[ hotfix ] Avoid redundant slot release operations\n"}
{"diff": "a / substratevm / src / com . oracle . svm . hosted / src / com / oracle / svm / hosted / ClassValueFeature . java \n  b / substratevm / src / com . oracle . svm . hosted / src / com / oracle / svm / hosted / ClassValueFeature . java \n private static boolean hasValue ( ClassValue < ? > v , Class < ? > c ) { \n try { \n Map < ? , ? > map = ( Map < ? , ? > ) CLASS_VALUE_MAP . get ( c ) ; \n final Object id = IDENTITY . get ( v ) ; \n - final boolean res = map . containsKey ( id ) ; \n + final boolean res = map ! = null & & map . containsKey ( id ) ; \n return res ; \n } catch ( RuntimeException ex ) { \n throw ex ;", "msg": "handle null entry in ClassValue map\n"}
{"diff": "a / okcurl / src / main / java / com / squareup / okhttp / curl / Main . java \n  b / okcurl / src / main / java / com / squareup / okhttp / curl / Main . java \n private static String protocols ( ) { \n } ) ) ; \n } \n \n + @ Option ( name = { \" - X \" , \" - - request \" } , description = \" Specify request command to use \" , \n + allowedValues = { \" GET \" , \" HEAD \" } ) \n + public String method = \" GET \" ; \n + \n @ Option ( name = { \" - H \" , \" - - header \" } , description = \" Custom header to pass to server \" ) \n public List < String > headers ; \n \n private OkHttpClient getConfiguredClient ( ) { \n \n private Request getConfiguredRequest ( ) { \n Request . Builder request = new Request . Builder ( ) ; \n + request . method ( method , null ) ; \n request . url ( url ) ; \n if ( headers ! = null ) { \n for ( String header : headers ) {", "msg": "Add - X to okcurl , permitting HEAD requests .\n"}
{"diff": "a / transport / src / main / java / io / netty / channel / MessageList . java \n  b / transport / src / main / java / io / netty / channel / MessageList . java \n public T get ( int index ) { \n return elements [ index ] ; \n } \n \n + / * * \n + * Returns the first message in this list . \n + * \n + * @ throws NoSuchElementException if this list is empty \n + * / \n + public T first ( ) { \n + if ( size ! = 0 ) { \n + return elements [ 0 ] ; \n + } else { \n + throw new NoSuchElementException ( ) ; \n + } \n + } \n + \n + / * * \n + * Returns the last message in this list . \n + * \n + * @ throws NoSuchElementException if this list is empty \n + * / \n + public T last ( ) { \n + if ( size ! = 0 ) { \n + return elements [ size - 1 ] ; \n + } else { \n + throw new NoSuchElementException ( ) ; \n + } \n + } \n + \n / * * \n * Sets the message on the given index . \n * /", "msg": "Add MessageList . first ( ) and last ( ) for convenience .\n"}
{"diff": "a / core / src / com / google / zxing / oned / rss / expanded / decoders / FieldParser . java \n  b / core / src / com / google / zxing / oned / rss / expanded / decoders / FieldParser . java \n \n { \" 8100 \" , 6 } , \n { \" 8101 \" , 10 } , \n { \" 8102 \" , 2 } , \n - { \" 8110 \" , VARIABLE_LENGTH , 30 } , \n + { \" 8110 \" , VARIABLE_LENGTH , 70 } , \n + { \" 8200 \" , VARIABLE_LENGTH , 70 } , \n } ; \n \n private FieldParser ( ) {", "msg": "Issue 1432 errata from GS1 spec and support for additional var length product field 8200\n"}
{"diff": "a / flink - runtime / src / main / java / org / apache / flink / runtime / registration / RegisteredRpcConnection . java \n  b / flink - runtime / src / main / java / org / apache / flink / runtime / registration / RegisteredRpcConnection . java \n public RegisteredRpcConnection ( Logger log , String targetAddress , F fencingToken , \n / / Life cycle \n / / mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm \n \n - @ SuppressWarnings ( \" unchecked \" ) \n public void start ( ) { \n checkState ( ! closed , \" The RPC connection is already closed \" ) ; \n checkState ( ! isConnected ( ) & & pendingRegistration = = null , \" The RPC connection is already started \" ) ;", "msg": "[ hotfix ] [ runtime ] Remove redundant suppression\n"}
{"diff": "a / truffle / src / com . oracle . truffle . nfi / src / com / oracle / truffle / nfi / LibFFIType . java \n  b / truffle / src / com . oracle . truffle . nfi / src / com / oracle / truffle / nfi / LibFFIType . java \n static LibFFIType createArrayType ( NFIContext ctx , NativeSimpleType simpleType ) { \n } \n \n private static Number asNumber ( Object object ) { \n - if ( object instanceof Number ) { \n + if ( object instanceof Byte | | \n + object instanceof Short | | \n + object instanceof Integer | | \n + object instanceof Long | | \n + object instanceof Float | | \n + object instanceof Double ) { \n return ( Number ) object ; \n } else if ( object instanceof Boolean ) { \n return ( Boolean ) object ? 1 : 0 ;", "msg": "Make type check more precise to disallow custom Number subclasses in native interop .\n"}
{"diff": "a / org . springframework . jms / src / main / java / org / springframework / jms / connection / JmsTransactionManager . java \n  b / org . springframework . jms / src / main / java / org / springframework / jms / connection / JmsTransactionManager . java \n \n * @ see TransactionAwareConnectionFactoryProxy \n * @ see org . springframework . jms . core . JmsTemplate \n * / \n + @ SuppressWarnings ( \" serial \" ) \n public class JmsTransactionManager extends AbstractPlatformTransactionManager \n implements ResourceTransactionManager , InitializingBean { \n \n protected void doBegin ( Object transaction , TransactionDefinition definition ) { \n getConnectionFactory ( ) , txObject . getResourceHolder ( ) ) ; \n } \n catch ( JMSException ex ) { \n - if ( session ! = null ) { \n - try { \n - session . close ( ) ; \n - } \n - catch ( Throwable ex2 ) { \n - / / ignore \n - } \n - } \n if ( con ! = null ) { \n try { \n con . close ( ) ;", "msg": "Prune dead code from JmsTransactionManager # doBegin\n"}
{"diff": "a / core / src / main / java / org / elasticsearch / bootstrap / Bootstrap . java \n  b / core / src / main / java / org / elasticsearch / bootstrap / Bootstrap . java \n private void stop ( ) { \n keepAliveLatch . countDown ( ) ; \n } \n } \n + \n + / * * Calls doMain ( ) , but with special formatting of errors * / \n + public static void main ( String [ ] args ) throws StartupError { \n + try { \n + doMain ( args ) ; \n + } catch ( Throwable t ) { \n + throw new StartupError ( t ) ; \n + } \n + } \n \n - public static void main ( String [ ] args ) throws Throwable { \n + public static void doMain ( String [ ] args ) throws Throwable { \n BootstrapCLIParser bootstrapCLIParser = new BootstrapCLIParser ( ) ; \n CliTool . ExitStatus status = bootstrapCLIParser . execute ( args ) ; \n \n public static void main ( String [ ] args ) throws Throwable { \n Loggers . enableConsoleLogging ( ) ; \n } \n \n - throw new StartupError ( e ) ; \n + throw e ; \n } \n }", "msg": "Use StartupError to format all exceptions hitting the console\n"}
{"diff": "a / spring - aop / src / main / java / org / springframework / aop / framework / AopContext . java \n  b / spring - aop / src / main / java / org / springframework / aop / framework / AopContext . java \n public static Object currentProxy ( ) throws IllegalStateException { \n Object proxy = currentProxy . get ( ) ; \n if ( proxy = = null ) { \n throw new IllegalStateException ( \n - \" Cannot find current proxy : Set ' exposeProxy ' property on Advised to ' true ' to make it available . \" ) ; \n + \" Cannot find current proxy : Set ' exposeProxy ' property on Advised to ' true ' to make it available . \" + \n + \" Also Check AopContext . currentProxy ( ) invoke in the origin thread . \" ) ; \n } \n return proxy ; \n }", "msg": "Improve exception message in AopContext . currentProxy ( )\n"}
{"diff": "a / src / main / java / io / vertx / core / impl / DeploymentManager . java \n  b / src / main / java / io / vertx / core / impl / DeploymentManager . java \n public synchronized void doUndeploy ( ContextInternal undeployingContext , Handler < \n status = ST_UNDEPLOYED ; \n AtomicInteger undeployCount = new AtomicInteger ( ) ; \n int numToUndeploy = verticles . size ( ) ; \n + if ( parent ! = null ) { \n + parent . removeChild ( this ) ; \n + } \n for ( VerticleHolder verticleHolder : verticles ) { \n ContextImpl context = verticleHolder . context ; \n context . runOnContext ( v - > { \n public synchronized void doUndeploy ( ContextInternal undeployingContext , Handler < \n verticleHolder . verticle . stop ( stopFuture ) ; \n } catch ( Throwable t ) { \n stopFuture . fail ( t ) ; \n - } finally { \n - / / Remove the deployment from any parents \n - if ( parent ! = null ) { \n - parent . removeChild ( this ) ; \n - } \n } \n } ) ; \n }", "msg": "Remove child deployment before stopping verticles when the verticle deployement status becomes undeployed to avoid race condition with concurrent undeployment of the verticle\n"}
{"diff": "a / graal / com . oracle . graal . truffle . hotspot / src / com / oracle / graal / truffle / hotspot / nfi / HotSpotNativeFunctionHandle . java \n  b / graal / com . oracle . graal . truffle . hotspot / src / com / oracle / graal / truffle / hotspot / nfi / HotSpotNativeFunctionHandle . java \n \n import com . oracle . graal . debug . Debug ; \n import com . oracle . graal . debug . Debug . Scope ; \n import com . oracle . nfi . api . NativeFunctionHandle ; \n + import com . oracle . truffle . api . CompilerDirectives ; \n \n public class HotSpotNativeFunctionHandle implements NativeFunctionHandle { \n \n public Object call ( Object . . . args ) { \n traceResult ( res ) ; \n return res ; \n } catch ( InvalidInstalledCodeException e ) { \n + CompilerDirectives . transferToInterpreter ( ) ; \n throw JVMCIError . shouldNotReachHere ( \" Execution of GNFI Callstub failed : \" + name ) ; \n } \n }", "msg": "Add CompilerDirectives # transferToInterpreter to catch block in NFI call method .\n"}
{"diff": "a / server / src / main / java / org / elasticsearch / index / analysis / SynonymTokenFilterFactory . java \n  b / server / src / main / java / org / elasticsearch / index / analysis / SynonymTokenFilterFactory . java \n public SynonymTokenFilterFactory ( IndexSettings indexSettings , Environment env , A \n \n if ( settings . get ( \" ignore_case \" ) ! = null ) { \n deprecationLogger . deprecated ( \n - \" This tokenize synonyms with whatever tokenizer and token filters appear before it in the chain . \" + \n - \" If you need ignore case with this filter , you should set lowercase filter before this \" ) ; \n + \" The ignore_case option on the synonym_graph filter is deprecated . \" + \n + \" Instead , insert a lowercase filter in the filter chain before the synonym_graph filter . \" ) ; \n } \n \n this . expand = settings . getAsBoolean ( \" expand \" , true ) ;", "msg": "Improve wording in deprecation message ( )\n"}
{"diff": "a / guava / src / com / google / common / collect / ImmutableMultiset . java \n  b / guava / src / com / google / common / collect / ImmutableMultiset . java \n public Builder ( ) { \n } \n } \n \n - @ WeakOuter \n static final class ElementSet < E > extends ImmutableSet . Indexed < E > { \n private final List < Entry < E > > entries ; \n + / / TODO ( cpovirk ) : @ Weak ? \n private final Multiset < E > delegate ; \n \n ElementSet ( List < Entry < E > > entries , Multiset < E > delegate ) {", "msg": "Remove @ WeakOuter from ImmutableMultiset . ElementSet . @ WeakOuter is useful for inner classes but not for static nested classes .\n"}
{"diff": "a / core / src / main / java / org / elasticsearch / common / cache / Cache . java \n  b / core / src / main / java / org / elasticsearch / common / cache / Cache . java \n public void invalidateAll ( ) { \n weight = 0 ; \n } \n } finally { \n - for ( int i = 0 ; i < NUMBER_OF_SEGMENTS ; i + + ) { \n + for ( int i = NUMBER_OF_SEGMENTS - 1 ; i > = 0 ; i - - ) { \n if ( haveSegmentLock [ i ] ) { \n segments [ i ] . segmentLock . writeLock ( ) . unlock ( ) ; \n }", "msg": "Release locks in reverse order of acquisition\n"}
{"diff": "a / library / src / main / java / com / bumptech / glide / load / engine / DecodeJob . java \n  b / library / src / main / java / com / bumptech / glide / load / engine / DecodeJob . java \n public void onDataFetcherReady ( Key sourceKey , Object data , DataFetcher < ? > fetche \n @ Override \n public void onDataFetcherFailed ( Key attemptedKey , Exception e , DataFetcher < ? > fetcher , \n DataSource dataSource ) { \n + fetcher . cleanup ( ) ; \n GlideException exception = new GlideException ( \" Fetching data failed \" , e ) ; \n exception . setLoggingDetails ( attemptedKey , dataSource , fetcher . getDataClass ( ) ) ; \n exceptions . add ( exception ) ;", "msg": "Close the url connection after receiving an Http error when trying to load a\n"}
{"diff": "a / remoting / src / main / java / hudson / remoting / forward / CopyThread . java \n  b / remoting / src / main / java / hudson / remoting / forward / CopyThread . java \n \n import java . io . IOException ; \n import java . io . InputStream ; \n import java . io . OutputStream ; \n + import java . util . logging . Level ; \n + import java . util . logging . Logger ; \n \n / * * \n * Copies a stream and close them at EOF . \n \n * @ author Kohsuke Kawaguchi \n * / \n final class CopyThread extends Thread { \n + private static final Logger LOGGER = Logger . getLogger ( CopyThread . class . getName ( ) ) ; \n private final InputStream in ; \n private final OutputStream out ; \n \n public void run ( ) { \n out . close ( ) ; \n } \n } catch ( IOException e ) { \n - / / TODO : what to do ? \n + LOGGER . log ( Level . WARNING , \" Exception while copying in thread : \" + getName ( ) , e ) ; \n } \n } \n }", "msg": "Log out exceptions that happen in copy threads .\n"}
{"diff": "a / flink - runtime / src / test / java / org / apache / flink / runtime / blob / BlobServerGetTest . java \n  b / flink - runtime / src / test / java / org / apache / flink / runtime / blob / BlobServerGetTest . java \n public void testGetFailsDuringStreaming ( ) { \n try { \n byte [ ] remainder = new byte [ data . length - 2 * receiveBuffer . length ] ; \n BlobUtils . readFully ( is , remainder , 0 , remainder . length , null ) ; \n - fail ( ) ; \n + / / we tolerate that this succeeds , as the receiver socket may have buffered \n + / / everything already \n } \n catch ( IOException e ) { \n / / expected", "msg": "[ blob manager ] Fix flakey test .\n"}
{"diff": "a / spring - boot - autoconfigure / src / main / java / org / springframework / boot / autoconfigure / security / SecurityFilterAutoConfiguration . java \n  b / spring - boot - autoconfigure / src / main / java / org / springframework / boot / autoconfigure / security / SecurityFilterAutoConfiguration . java \n \n * \n * @ author Rob Winch \n * @ author Phillip Webb \n + * @ author Andy Wilkinson \n * @ since 1 . 3 \n * / \n @ Configuration \n public DelegatingFilterProxyRegistrationBean securityFilterChainRegistration ( \n \n private EnumSet < DispatcherType > getDispatcherTypes ( \n SecurityProperties securityProperties ) { \n + if ( securityProperties . getFilterDispatcherTypes ( ) = = null ) { \n + return null ; \n + } \n Set < DispatcherType > dispatcherTypes = new HashSet < DispatcherType > ( ) ; \n for ( String dispatcherType : securityProperties . getFilterDispatcherTypes ( ) ) { \n dispatcherTypes . add ( DispatcherType . valueOf ( dispatcherType ) ) ;", "msg": "Handle null security filter dispatcher types gracefully\n"}
{"diff": "a / imagepipeline - base / src / main / java / com / facebook / imageformat / ImageFormatChecker . java \n  b / imagepipeline - base / src / main / java / com / facebook / imageformat / ImageFormatChecker . java \n public ImageFormat determineImageFormat ( final InputStream is ) throws IOException \n } \n } \n } \n - return mDefaultFormatChecker . determineFormat ( imageHeaderBytes , headerSize ) ; \n + ImageFormat format = mDefaultFormatChecker . determineFormat ( imageHeaderBytes , headerSize ) ; \n + if ( format = = null ) { \n + format = ImageFormat . UNKNOWN ; \n + } \n + return format ; \n } \n \n private void updateMaxHeaderLength ( ) {", "msg": "Added null check so that we always return an ImageFormat\n"}
{"diff": "a / java / client / src / org / openqa / selenium / android / AndroidDriver . java \n  b / java / client / src / org / openqa / selenium / android / AndroidDriver . java \n \n \n / * * \n * The default constructor assumes the remote server is listening at \n - * http : / / localhost : 8080 / hub \n + * http : / / localhost : 8080 / wd / hub \n * / \n public AndroidDriver ( ) { \n this ( getDefaultUrl ( ) ) ;", "msg": "DanielWagnerHall : Updating javadoc since this changed a couple of releases ago\n"}
{"diff": "a / java / client / test / org / openqa / selenium / environment / webserver / CookieServlet . java \n  b / java / client / test / org / openqa / selenium / environment / webserver / CookieServlet . java \n protected void doGet ( HttpServletRequest request , HttpServletResponse response ) \n \n } else if ( \" deleteAll \" . equals ( action ) ) { \n for ( Cookie cookie : request . getCookies ( ) ) { \n - System . out . println ( cookie ) ; \n cookie . setValue ( \" \" ) ; \n cookie . setPath ( \" / \" ) ; \n cookie . setMaxAge ( 0 ) ;", "msg": "Deleting redundant logging to console in tests\n"}
{"diff": "a / picasso / src / main / java / com / squareup / picasso / RequestCreator . java \n  b / picasso / src / main / java / com / squareup / picasso / RequestCreator . java \n public void fetch ( ) { \n } \n if ( data . hasImage ( ) ) { \n Request finalData = picasso . transformRequest ( data . build ( ) ) ; \n - String key = createKey ( finalData ) ; \n + String key = createKey ( finalData , new StringBuilder ( ) ) ; \n \n Action action = new FetchAction ( picasso , finalData , skipMemoryCache , key ) ; \n picasso . enqueueAndSubmit ( action ) ;", "msg": "Use new string builder for fetch ( ) requests\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / buildtool / BuildTool . java \n  b / src / main / java / com / google / devtools / build / lib / buildtool / BuildTool . java \n private void dumpSkyframeStateAfterBuild ( \n / * includeActionCmdLine = * / false , \n / * includeArtifacts = * / true , \n / * actionFilters = * / null , \n - / * includeParamFiles = * / true , \n + / * includeParamFiles = * / false , \n aqueryOutputHandler ) ; \n ( ( SequencedSkyframeExecutor ) env . getSkyframeExecutor ( ) ) . dumpSkyframeState ( actionGraphDump ) ; \n aqueryOutputHandler . close ( ) ;", "msg": "Disable param files for aquery - dump - after - build .\n"}
{"diff": "a / compiler / src / org . graalvm . compiler . truffle . runtime / src / org / graalvm / compiler / truffle / runtime / OptimizedIndirectCallNode . java \n  b / compiler / src / org . graalvm . compiler . truffle . runtime / src / org / graalvm / compiler / truffle / runtime / OptimizedIndirectCallNode . java \n public Object call ( CallTarget target , Object . . . arguments ) { \n Node prev = encapsulating . set ( null ) ; \n try { \n return ( ( OptimizedCallTarget ) target ) . callIndirect ( prev , arguments ) ; \n + } catch ( Throwable t ) { \n + GraalRuntimeAccessor . LANGUAGE . onThrowable ( prev , null , t , null ) ; \n + throw OptimizedCallTarget . rethrow ( t ) ; \n } finally { \n encapsulating . set ( prev ) ; \n }", "msg": "[ GR - 25371 ] Add missing call to onThrowable ( ) for the uncached OptimizedIndirectCallNode\n"}
{"diff": "a / java / server / src / org / openqa / selenium / remote / server / DefaultDriverSessions . java \n  b / java / server / src / org / openqa / selenium / remote / server / DefaultDriverSessions . java \n public DefaultDriverSessions ( ) { \n this ( Platform . getCurrent ( ) , new DefaultDriverFactory ( ) ) ; \n } \n \n + public DefaultDriverSessions ( \n + DriverFactory factory , Map < Capabilities , Class < ? extends WebDriver > > drivers ) { \n + this . factory = factory ; \n + for ( Map . Entry < Capabilities , Class < ? extends WebDriver > > entry : drivers . entrySet ( ) ) { \n + registerDriver ( entry . getKey ( ) , entry . getValue ( ) ) ; \n + } \n + } \n + \n protected DefaultDriverSessions ( Platform runningOn , DriverFactory factory ) { \n this . factory = factory ; \n registerDefaults ( runningOn ) ;", "msg": "Support configuring a Selenium server without the default set of driver configurations .\n"}
{"diff": "a / qa / full - cluster - restart / src / test / java / org / elasticsearch / upgrades / FullClusterRestartIT . java \n  b / qa / full - cluster - restart / src / test / java / org / elasticsearch / upgrades / FullClusterRestartIT . java \n public void testRecovery ( ) throws IOException { \n shouldHaveTranslog = randomBoolean ( ) ; \n \n indexRandomDocuments ( count , true , true , i - > jsonBuilder ( ) . startObject ( ) . field ( \" field \" , \" value \" ) . endObject ( ) ) ; \n + \n + / / make sure all recoveries are done \n + ensureNoInitializingShards ( ) ; \n / / Explicitly flush so we ' re sure to have a bunch of documents in the Lucene index \n client ( ) . performRequest ( \" POST \" , \" / _flush \" ) ; \n if ( shouldHaveTranslog ) {", "msg": "FullClusterRestartIT . testRecovery should wait for all initializing shards\n"}
{"diff": "a / truffle / com . oracle . truffle . api / src / com / oracle / truffle / api / impl / Accessor . java \n  b / truffle / com . oracle . truffle . api / src / com / oracle / truffle / api / impl / Accessor . java \n protected Object invoke ( Object obj , Object [ ] args ) throws IOException { \n throw new IOException ( \" No symbol invoker found ! \" ) ; \n } \n \n + / * * \n + * Don ' t call me . I am here only to let NetBeans debug any Truffle project . \n + * \n + * @ param args \n + * / \n + public static void main ( String . . . args ) { \n + throw new IllegalStateException ( ) ; \n + } \n }", "msg": "Allows debugging and executing any project ' s unittest from inside of NetBeans . Added - - attach localhost : 8000 option to allow the JVM to attach to IDE ' s ( and any other ) JPDA server .\n"}
{"diff": "a / transport - native - epoll / src / main / java / io / netty / channel / epoll / EpollChannelOption . java \n  b / transport - native - epoll / src / main / java / io / netty / channel / epoll / EpollChannelOption . java \n \n public static final ChannelOption < Boolean > IP_FREEBIND = ChannelOption . valueOf ( \" IP_FREEBIND \" ) ; \n public static final ChannelOption < Integer > TCP_FASTOPEN = valueOf ( T , \" TCP_FASTOPEN \" ) ; \n public static final ChannelOption < Integer > TCP_DEFER_ACCEPT = ChannelOption . valueOf ( T , \" TCP_DEFER_ACCEPT \" ) ; \n - public static final ChannelOption < Integer > TCP_QUICKACK = ChannelOption . valueOf ( T , \" TCP_QUICKACK \" ) ; \n + public static final ChannelOption < Boolean > TCP_QUICKACK = ChannelOption . valueOf ( T , \" TCP_QUICKACK \" ) ; \n \n public static final ChannelOption < DomainSocketReadMode > DOMAIN_SOCKET_READ_MODE = \n ChannelOption . valueOf ( T , \" DOMAIN_SOCKET_READ_MODE \" ) ;", "msg": "[ ] Fix type of EpollChannelOption . TCP_QUICKACK\n"}
{"diff": "a / core / src / main / java / org / elasticsearch / index / query / TermsQueryBuilder . java \n  b / core / src / main / java / org / elasticsearch / index / query / TermsQueryBuilder . java \n protected Query doToQuery ( QueryShardContext context ) throws IOException { \n if ( termsLookup . index ( ) = = null ) { \n termsLookup . index ( context . index ( ) . name ( ) ) ; \n } \n - terms = context . indexQueryParserService ( ) . handleTermsLookup ( termsLookup ) ; \n + terms = context . handleTermsLookup ( termsLookup ) ; \n } else { \n terms = values ; \n }", "msg": "Internal : call context . handleTermsLookup rather than context . indexQueryParserService ( ) . handleTermsLookup ( ) in TermsQueryBuilder # toQuery\n"}
{"diff": "a / gson / src / main / java / com / google / gson / JsonPrimitive . java \n  b / gson / src / main / java / com / google / gson / JsonPrimitive . java \n private static boolean isPrimitiveOrString ( Object target ) { \n } \n return false ; \n } \n + \n + @ Override \n + public int hashCode ( ) { \n + return ( value = = null ) ? 31 : value . hashCode ( ) ; \n + } \n + \n + @ Override \n + public boolean equals ( Object obj ) { \n + if ( this = = obj ) return true ; \n + if ( obj = = null ) return false ; \n + if ( getClass ( ) ! = obj . getClass ( ) ) return false ; \n + JsonPrimitive other = ( JsonPrimitive ) obj ; \n + if ( value = = null ) { \n + if ( other . value ! = null ) return false ; \n + } else if ( ! value . equals ( other . value ) ) return false ; \n + return true ; \n + } \n }", "msg": "Implementing hashcode and equals for JsonPrimitives as value type equality .\n"}
{"diff": "a / core / src / main / java / hudson / model / Hudson . java \n  b / core / src / main / java / hudson / model / Hudson . java \n public Object getTarget ( ) { \n | | rest . startsWith ( \" / accessDenied \" ) \n | | rest . startsWith ( \" / signup \" ) \n | | rest . startsWith ( \" / jnlpJars / \" ) \n + | | rest . startsWith ( \" / tcpSlaveAgentListener \" ) \n | | rest . startsWith ( \" / securityRealm \" ) ) \n return this ; / / URLs that are always visible without READ permission \n throw e ;", "msg": "Allow anonymous access to the path of slave agent listener . It must be used by only slave agents . It would NOT mean to publish JNLP files including secret key .\n"}
{"diff": "a / lib / java / com / google / android / material / textfield / TextInputLayout . java \n  b / lib / java / com / google / android / material / textfield / TextInputLayout . java \n private void assignBoxBackgroundByMode ( ) { \n / / Make boxBackground a CutoutDrawable if in outline mode , there is a hint , and \n / / boxBackground isn ' t already a CutoutDrawable . \n boxBackground = new CutoutDrawable ( ) ; \n - } else if ( ! ( boxBackground instanceof GradientDrawable ) ) { \n - / / Otherwise , make boxBackground a GradientDrawable if it isn ' t already . \n + } else if ( boxBackground = = null ) { \n + / / Otherwise , make boxBackground a GradientDrawable if it hasn ' t yet been initialized . \n boxBackground = new GradientDrawable ( ) ; \n } \n }", "msg": "Use null check instead of instanceOf for boxBackground ' s GradientDrawable initialization .\n"}
{"diff": "a / compiler / src / org . graalvm . compiler . truffle . runtime / src / org / graalvm / compiler / truffle / runtime / OptimizedCallTarget . java \n  b / compiler / src / org . graalvm . compiler . truffle . runtime / src / org / graalvm / compiler / truffle / runtime / OptimizedCallTarget . java \n private boolean maybeSetNeedsSplit ( int depth , List < Node > toDump ) { \n if ( TruffleRuntimeOptions . getValue ( SharedTruffleRuntimeOptions . TruffleExperimentalSplittingDumpDecisions ) ) { \n pullOutParentChain ( onlyCaller , toDump ) ; \n } \n - needsSplit | = callerTarget . maybeSetNeedsSplit ( depth + 1 , toDump ) ; \n + if ( callerTarget . maybeSetNeedsSplit ( depth + 1 , toDump ) ) { \n + needsSplit = true ; \n + } \n } \n } \n } else {", "msg": "More thread - safe assignment for needs split .\n"}
{"diff": "a / library / extractor / src / main / java / com / google / android / exoplayer2 / extractor / rawcc / RawCcExtractor . java \n  b / library / extractor / src / main / java / com / google / android / exoplayer2 / extractor / rawcc / RawCcExtractor . java \n public RawCcExtractor ( Format format ) { \n public void init ( ExtractorOutput output ) { \n output . seekMap ( new SeekMap . Unseekable ( C . TIME_UNSET ) ) ; \n trackOutput = output . track ( 0 , C . TRACK_TYPE_TEXT ) ; \n - output . endTracks ( ) ; \n trackOutput . format ( format ) ; \n + output . endTracks ( ) ; \n } \n \n @ Override", "msg": "Change order of RawCcExtractor init to call format before endTracks .\n"}
{"diff": "a / app / src / main / java / org / thoughtcrime / securesms / jobs / PushProcessMessageJob . java \n  b / app / src / main / java / org / thoughtcrime / securesms / jobs / PushProcessMessageJob . java \n private boolean shouldIgnore ( @ Nullable SignalServiceContent content ) \n return sender . isBlocked ( ) ; \n } else if ( content . getTypingMessage ( ) . isPresent ( ) ) { \n if ( content . getTypingMessage ( ) . get ( ) . getGroupId ( ) . isPresent ( ) ) { \n - GroupId groupId = GroupId . push ( content . getTypingMessage ( ) . get ( ) . getGroupId ( ) . get ( ) ) ; \n - return Recipient . externalGroup ( context , groupId ) . isBlocked ( ) ; \n + GroupId groupId = GroupId . push ( content . getTypingMessage ( ) . get ( ) . getGroupId ( ) . get ( ) ) ; \n + Recipient groupRecipient = Recipient . externalGroup ( context , groupId ) ; \n + return groupRecipient . isBlocked ( ) | | ! groupRecipient . isActiveGroup ( ) ; \n } else { \n return sender . isBlocked ( ) ; \n }", "msg": "Do not show typing indicators for inactive groups .\n"}
{"diff": "a / modules / elasticsearch / src / main / java / org / elasticsearch / index / translog / memory / MemoryTranslog . java \n  b / modules / elasticsearch / src / main / java / org / elasticsearch / index / translog / memory / MemoryTranslog . java \n \n } \n \n @ Override public int size ( ) { \n - return operations . size ( ) ; \n + return operationCounter . get ( ) ; \n } \n \n @ Override public ByteSizeValue estimateMemorySize ( ) {", "msg": "use the atomic integer counter to represent the size\n"}
{"diff": "a / hystrix - core / src / test / java / com / netflix / hystrix / HystrixObservableCommandTest . java \n  b / hystrix - core / src / test / java / com / netflix / hystrix / HystrixObservableCommandTest . java \n public Boolean call ( Boolean b ) { \n return b ; \n } \n \n - } ) . finallyDo ( new Action0 ( ) { \n + } ) . doAfterTerminate ( new Action0 ( ) { \n \n @ Override \n public void call ( ) { \n public Boolean call ( Boolean b ) { \n return b ; \n } \n \n - } ) . finallyDo ( new Action0 ( ) { \n + } ) . doAfterTerminate ( new Action0 ( ) { \n \n @ Override \n public void call ( ) { \n public Boolean call ( Boolean b ) { \n return b ; \n } \n \n - } ) . finallyDo ( new Action0 ( ) { \n + } ) . doAfterTerminate ( new Action0 ( ) { \n \n @ Override \n public void call ( ) {", "msg": "Switch usage of Observable . finallyDo to Observable . doAfterTerminate\n"}
{"diff": "a / plugins / org . jkiss . dbeaver . core / src / org / jkiss / dbeaver / ui / controls / itemlist / DatabaseObjectListControl . java \n  b / plugins / org . jkiss . dbeaver . core / src / org / jkiss / dbeaver / ui / controls / itemlist / DatabaseObjectListControl . java \n public void run ( ) \n } ; \n copyAction . setEnabled ( ! getSelectionProvider ( ) . getSelection ( ) . isEmpty ( ) ) ; \n manager . add ( copyAction ) ; \n + manager . add ( new Separator ( ) ) ; \n + fillCustomActions ( manager ) ; \n } \n } ) ; \n menuMgr . setRemoveAllWhenShown ( true ) ;", "msg": "Database list control context menu refactoring ( fill custom actions )\n"}
{"diff": "a / plugins / org . jkiss . dbeaver . model / src / org / jkiss / dbeaver / model / sql / SQLUtils . java \n  b / plugins / org . jkiss . dbeaver . model / src / org / jkiss / dbeaver / model / sql / SQLUtils . java \n public static void appendOrderString ( @ NotNull DBDDataFilter filter , @ NotNull DBP \n for ( DBDAttributeConstraint co : filter . getOrderConstraints ( ) ) { \n if ( hasOrder ) query . append ( ' , ' ) ; \n String orderString = null ; \n - if ( co . getAttribute ( ) = = null | | co . getAttribute ( ) instanceof DBDAttributeBindingMeta ) { \n + if ( co . getAttribute ( ) = = null | | co . getAttribute ( ) instanceof DBDAttributeBindingMeta | | co . getAttribute ( ) instanceof DBDAttributeBindingType ) { \n String orderColumn = co . getAttributeName ( ) ; \n if ( co . getAttribute ( ) = = null | | PATTERN_SIMPLE_NAME . matcher ( orderColumn ) . matches ( ) ) { \n / / It is a simple column .", "msg": "SQL ordering fix ( do not use indexed columns for type attributes )\n"}
{"diff": "a / core / src / main / java / hudson / console / ConsoleNote . java \n  b / core / src / main / java / hudson / console / ConsoleNote . java \n \n * { @ link ConsoleNote } always sticks to a particular point in the console output . \n * \n * < p > \n - * This design allows descendant processes of Hudson to emit { @ link ConsoleNote } s . For example , Ant forked \n - * by a shell forked by Hudson can put an encoded note in its stdout , and Hudson will correctly understands that . \n * The preamble and postamble includes a certain ANSI escape sequence designed in such a way to minimize garbage \n * if this output is observed by a human being directly . \n *", "msg": "Deleting claimed ability in Javadoc which is no longer supportable .\n"}
{"diff": "a / projects / com . oracle . truffle . llvm . nodes / src / com / oracle / truffle / llvm / nodes / func / LLVMDispatchNode . java \n  b / projects / com . oracle . truffle . llvm . nodes / src / com / oracle / truffle / llvm / nodes / func / LLVMDispatchNode . java \n protected Object doCachedNative ( VirtualFrame frame , LLVMFunctionDescriptor descr \n \n protected TruffleObject bindSymbol ( VirtualFrame frame , LLVMFunctionDescriptor descriptor ) { \n CompilerAsserts . neverPartOfCompilation ( ) ; \n - assert descriptor . getNativeFunction ( ) ! = null ; \n + assert descriptor . getNativeFunction ( ) ! = null : descriptor . getName ( ) ; \n return LLVMNativeCallUtils . bindNativeSymbol ( LLVMNativeCallUtils . getBindNode ( ) , descriptor . getNativeFunction ( ) , getSignature ( ) ) ; \n }", "msg": "Improve assertion error message in native function binding .\n"}
{"diff": "a / gson / src / main / java / com / google / gson / DefaultTypeAdapters . java \n  b / gson / src / main / java / com / google / gson / DefaultTypeAdapters . java \n \n map . register ( Enum . class , wrapDeserializer ( ENUM_TYPE_ADAPTER ) ) ; \n map . register ( URL . class , wrapDeserializer ( URL_TYPE_ADAPTER ) ) ; \n map . register ( URI . class , wrapDeserializer ( URI_TYPE_ADAPTER ) ) ; \n - map . register ( UUID . class , UUUID_TYPE_ADAPTER ) ; \n + map . register ( UUID . class , wrapDeserializer ( UUUID_TYPE_ADAPTER ) ) ; \n map . register ( Locale . class , wrapDeserializer ( LOCALE_TYPE_ADAPTER ) ) ; \n map . register ( Collection . class , wrapDeserializer ( COLLECTION_TYPE_ADAPTER ) ) ; \n map . register ( Map . class , wrapDeserializer ( MAP_TYPE_ADAPTER ) ) ;", "msg": "Wrapping UUID deserializer in exception wrapper to make it consistent with other deserializers\n"}
{"diff": "a / spring - web / src / test / java / org / springframework / http / server / reactive / AbstractHttpHandlerIntegrationTests . java \n  b / spring - web / src / test / java / org / springframework / http / server / reactive / AbstractHttpHandlerIntegrationTests . java \n \n return new Object [ ] [ ] { \n { new JettyHttpServer ( ) } , \n { new RxNettyHttpServer ( ) } , \n - { new ReactorHttpServer ( ) } , \n + / / { new ReactorHttpServer ( ) } , \n { new TomcatHttpServer ( base . getAbsolutePath ( ) ) } , \n { new UndertowHttpServer ( ) } \n } ;", "msg": "Temp disabling reactor - netty to unblock pipeline\n"}
{"diff": "a / java / client / src / org / openqa / selenium / support / ui / FluentWait . java \n  b / java / client / src / org / openqa / selenium / support / ui / FluentWait . java \n public FluentWait ( T input , Clock clock , Sleeper sleeper ) { \n * @ param types The types of exceptions to ignore . \n * @ return A self reference . \n * / \n - public FluentWait < T > ignoreAll ( Collection < Class < ? extends Throwable > > types ) { \n + public < K extends Throwable > FluentWait < T > ignoreAll ( Collection < Class < ? extends K > > types ) { \n ignoredExceptions . addAll ( types ) ; \n return this ; \n }", "msg": "JasonLeyba : Generic trickery to make a method in FluentWait friendlier .\n"}
{"diff": "a / spring - boot - project / spring - boot - autoconfigure / src / main / java / org / springframework / boot / autoconfigure / flyway / FlywayProperties . java \n  b / spring - boot - project / spring - boot - autoconfigure / src / main / java / org / springframework / boot / autoconfigure / flyway / FlywayProperties . java \n \n * use vendor - specific locations . \n * / \n private List < String > locations = new ArrayList < > ( \n - Collections . singletonList ( \" db / migration \" ) ) ; \n + Collections . singletonList ( \" classpath : db / migration \" ) ) ; \n \n / * * \n * Check that migration scripts location exists .", "msg": "Use explicit classpath : prefix for Flyway location\n"}
{"diff": "a / src / main / java / io / reactivex / Single . java \n  b / src / main / java / io / reactivex / Single . java \n \n / * * \n * Hides the identity of the current Single , including the Disposable that is sent \n * to the downstream via { @ code onSubscribe ( ) } . \n + * < p > \n + * < img width = \" 640 \" height = \" 458 \" src = \" https : / / raw . github . com / wiki / ReactiveX / RxJava / images / rx - operators / Single . hide . png \" alt = \" \" > \n * < dl > \n * < dt > < b > Scheduler : < / b > < / dt > \n * < dd > { @ code hide } does not operate by default on a particular { @ link Scheduler } . < / dd >", "msg": "Add marble diagram for Single . hide operator ( )\n"}
{"diff": "a / core / src / main / java / hudson / model / Run . java \n  b / core / src / main / java / hudson / model / Run . java \n public void reload ( ) throws IOException { \n protected void onLoad ( ) { \n for ( Action a : getAllActions ( ) ) { \n if ( a instanceof RunAction2 ) { \n - ( ( RunAction2 ) a ) . onLoad ( this ) ; \n + try { \n + ( ( RunAction2 ) a ) . onLoad ( this ) ; \n + } catch ( RuntimeException x ) { \n + LOGGER . log ( WARNING , \" failed to load \" + a + \" from \" + getDataFile ( ) , x ) ; \n + getActions ( ) . remove ( a ) ; / / if possible ; might be in an inconsistent state \n + } \n } else if ( a instanceof RunAction ) { \n ( ( RunAction ) a ) . onLoad ( ) ; \n }", "msg": "Better robustness when action loading fails .\n"}
{"diff": "a / core / src / main / java / jenkins / util / SystemProperties . java \n  b / core / src / main / java / jenkins / util / SystemProperties . java \n \n \n import edu . umd . cs . findbugs . annotations . CheckForNull ; \n import edu . umd . cs . findbugs . annotations . Nullable ; \n + import edu . umd . cs . findbugs . annotations . SuppressFBWarnings ; \n import hudson . EnvVars ; \n import java . util . logging . Level ; \n import java . util . logging . Logger ; \n public SystemProperties ( ) { } \n * Called by the servlet container to initialize the { @ link ServletContext } . \n * / \n @ Override \n + @ SuppressFBWarnings ( value = \" ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD \" , \n + justification = \" Currently Jenkins instance may have one ond only one context \" ) \n public void contextInitialized ( ServletContextEvent event ) { \n theContext = event . getServletContext ( ) ; \n }", "msg": "Suppress warning about writing static SystemProperties # theContext from a non - static method\n"}
{"diff": "a / handler / src / main / java / io / netty / handler / timeout / IdleStateHandler . java \n  b / handler / src / main / java / io / netty / handler / timeout / IdleStateHandler . java \n public void channelRead ( ChannelHandlerContext ctx , Object msg ) throws Exception \n \n @ Override \n public void channelReadComplete ( ChannelHandlerContext ctx ) throws Exception { \n - if ( readerIdleTimeNanos > 0 | | allIdleTimeNanos > 0 ) { \n + if ( ( readerIdleTimeNanos > 0 | | allIdleTimeNanos > 0 ) & & reading ) { \n lastReadTime = System . nanoTime ( ) ; \n reading = false ; \n }", "msg": "Only set lastReadTime if an read actually happened before in IdleStateHandler .\n"}
{"diff": "a / library / core / src / main / java / com / google / android / exoplayer2 / upstream / Loader . java \n  b / library / core / src / main / java / com / google / android / exoplayer2 / upstream / Loader . java \n public void handleMessage ( Message msg ) { \n callback . onLoadCanceled ( loadable , nowMs , durationMs , false ) ; \n break ; \n case MSG_END_OF_SOURCE : \n - callback . onLoadCompleted ( loadable , nowMs , durationMs ) ; \n + try { \n + callback . onLoadCompleted ( loadable , nowMs , durationMs ) ; \n + } catch ( RuntimeException e ) { \n + / / This should never happen , but handle it anyway . \n + Log . e ( TAG , \" Unexpected exception handling load completed \" , e ) ; \n + fatalError = new UnexpectedLoaderException ( e ) ; \n + } \n break ; \n case MSG_IO_EXCEPTION : \n currentError = ( IOException ) msg . obj ; \n public void handleMessage ( Message msg ) { \n start ( getRetryDelayMillis ( ) ) ; \n } \n break ; \n + default : \n + / / Never happens . \n + break ; \n } \n }", "msg": "Be more robust against load callback failures\n"}
{"diff": "a / library / core / src / main / java / com / google / android / exoplayer2 / extractor / mkv / MatroskaExtractor . java \n  b / library / core / src / main / java / com / google / android / exoplayer2 / extractor / mkv / MatroskaExtractor . java \n public int read ( ExtractorInput input , PositionHolder seekPosition ) throws IOExce \n currentTrack . number = ( int ) value ; \n break ; \n case ID_FLAG_DEFAULT : \n - currentTrack . flagForced = value = = 1 ; \n + currentTrack . flagDefault = value = = 1 ; \n break ; \n case ID_FLAG_FORCED : \n - currentTrack . flagDefault = value = = 1 ; \n + currentTrack . flagForced = value = = 1 ; \n break ; \n case ID_TRACK_TYPE : \n currentTrack . type = ( int ) value ;", "msg": "flip flag values to their proper names so that trackselector parameters can be useful\n"}
{"diff": "a / src / test / java / org / elasticsearch / bwcompat / BasicBackwardsCompatibilityTest . java \n  b / src / test / java / org / elasticsearch / bwcompat / BasicBackwardsCompatibilityTest . java \n public void testIndexUpgradeSingleNode ( ) throws Exception { \n for ( int i = 0 ; i < numIters ; i + + ) { \n assertHitCount ( client ( ) . prepareCount ( ) . get ( ) , numDocs ) ; \n } \n - ensureGreen ( ) ; / / wait for all the relocation \n assertVersionCreated ( compatibilityVersion ( ) , \" test \" ) ; \n }", "msg": "[ TEST ] Don ' t wait for relocations - the ensureYellow ( ) call does that already\n"}
{"diff": "a / sdk / src / org . graalvm . launcher / src / org / graalvm / launcher / Launcher . java \n  b / sdk / src / org . graalvm . launcher / src / org / graalvm / launcher / Launcher . java \n boolean parsePolyglotOption ( String defaultOptionPrefix , Map < String , String > opti \n } catch ( IllegalArgumentException e ) { \n throw abort ( String . format ( \" Invalid argument % s specified . % s ' \" , arg , e . getMessage ( ) ) ) ; \n } \n - options . put ( key , value ) ; \n + / / use the full name of the found descriptor \n + options . put ( descriptor . getName ( ) , value ) ; \n return true ; \n } \n }", "msg": "Use the full name of the option when it ' s found using the default option prefix\n"}
{"diff": "a / projects / com . oracle . truffle . llvm . parser / src / com / oracle / truffle / llvm / parser / listeners / Function . java \n  b / projects / com . oracle . truffle . llvm . parser / src / com / oracle / truffle / llvm / parser / listeners / Function . java \n private void createInvoke ( long [ ] args ) { \n if ( calleeType instanceof PointerType ) { \n functionType = ( FunctionType ) ( ( PointerType ) calleeType ) . getPointeeType ( ) ; \n } else { \n - throw new AssertionError ( \" Cannot find Type of invoked function ! \" ) ; \n + throw new AssertionError ( \" Cannot find Type of invoked function : \" + calleeType . toString ( ) ) ; \n } \n }", "msg": "Improve error message when function type cannot be resolved .\n"}
{"diff": "a / src / org / thoughtcrime / securesms / jobmanager / JobSchedulerScheduler . java \n  b / src / org / thoughtcrime / securesms / jobmanager / JobSchedulerScheduler . java \n \n private static final String PREF_NAME = \" JobSchedulerScheduler_prefs \" ; \n private static final String PREF_NEXT_ID = \" pref_next_id \" ; \n \n - private static final int MAX_ID = 1000 ; \n + private static final int MAX_ID = 75 ; \n \n private final Application application ;", "msg": "Reduce the possible number of unique jobs to avoid crash .\n"}
{"diff": "a / common / test / java / org / openqa / selenium / internal / InProject . java \n  b / common / test / java / org / openqa / selenium / internal / InProject . java \n \n + / * \n + Copyright 2010 WebDriver committers \n + Copyright 2010 Google Inc . \n + \n + Licensed under the Apache License , Version 2 . 0 ( the \" License \" ) ; \n + you may not use this file except in compliance with the License . \n + You may obtain a copy of the License at \n + \n + http : / / www . apache . org / licenses / LICENSE - 2 . 0 \n + \n + Unless required by applicable law or agreed to in writing , software \n + distributed under the License is distributed on an \" AS IS \" BASIS , \n + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . \n + See the License for the specific language governing permissions and \n + limitations under the License . \n + * / \n + \n package org . openqa . selenium . internal ; \n \n import java . io . File ;", "msg": "SimonStewart : Adding missing copyright header\n"}
{"diff": "a / library / core / src / main / java / com / google / android / exoplayer2 / drm / ErrorStateDrmSession . java \n  b / library / core / src / main / java / com / google / android / exoplayer2 / drm / ErrorStateDrmSession . java \n \n import com . google . android . exoplayer2 . util . Assertions ; \n import java . util . Map ; \n \n - / * * \n - * A { @ link DrmSession } that ' s in a terminal error state . \n - * / \n - / * package * / final class ErrorStateDrmSession < T extends ExoMediaCrypto > implements DrmSession < T > { \n + / * * A { @ link DrmSession } that ' s in a terminal error state . * / \n + public final class ErrorStateDrmSession < T extends ExoMediaCrypto > implements DrmSession < T > { \n \n private final DrmSessionException error ;", "msg": "Create a new package to fork exoplayer v2 DefaultDrmSessionManager and\n"}
{"diff": "a / plugins / org . jkiss . dbeaver . generic / src / org / jkiss / dbeaver / ext / generic / model / GenericTable . java \n  b / plugins / org . jkiss . dbeaver . generic / src / org / jkiss / dbeaver / ext / generic / model / GenericTable . java \n public synchronized Long getRowCount ( DBRProgressMonitor monitor ) \n } \n if ( rowCount = = null ) { \n / / Query row count \n - DBCSession session = getDataSource ( ) . openSession ( monitor , DBCExecutionPurpose . META , \" Read row count \" ) ; \n + DBCSession session = getDataSource ( ) . openSession ( monitor , DBCExecutionPurpose . UTIL , \" Read row count \" ) ; \n try { \n rowCount = countData ( session , null ) ; \n }", "msg": "Use main connection for generic table row count\n"}
{"diff": "a / modules / elasticsearch / src / main / java / org / elasticsearch / common / lucene / all / AllTokenStream . java \n  b / modules / elasticsearch / src / main / java / org / elasticsearch / common / lucene / all / AllTokenStream . java \n public AllEntries allEntries ( ) { \n if ( ! input . incrementToken ( ) ) { \n return false ; \n } \n - float boost = allEntries . current ( ) . boost ( ) ; \n - if ( boost ! = 1 . 0f ) { \n - payloadAttribute . setPayload ( new Payload ( encodeFloat ( boost ) ) ) ; \n - } else { \n - payloadAttribute . setPayload ( null ) ; \n + if ( allEntries . current ( ) ! = null ) { \n + float boost = allEntries . current ( ) . boost ( ) ; \n + if ( boost ! = 1 . 0f ) { \n + payloadAttribute . setPayload ( new Payload ( encodeFloat ( boost ) ) ) ; \n + } else { \n + payloadAttribute . setPayload ( null ) ; \n + } \n } \n return true ; \n }", "msg": "when using keyword based analayzer on _all , an NPE is thrown since there is no current entry , ignore it ( it does not make sense to have keywork analyzer on _all field . . . )\n"}
{"diff": "a / plugins / org . jkiss . dbeaver . ui / src / org / jkiss / dbeaver / ui / controls / TextWithOpenFolder . java \n  b / plugins / org . jkiss . dbeaver . ui / src / org / jkiss / dbeaver / ui / controls / TextWithOpenFolder . java \n public TextWithOpenFolder ( Composite parent , String title ) { \n \n protected void openBrowser ( ) { \n DirectoryDialog dialog = new DirectoryDialog ( getShell ( ) , SWT . NONE ) ; \n - dialog . setText ( title ) ; \n + if ( title ! = null ) { \n + dialog . setText ( title ) ; \n + } \n dialog . setFilterPath ( getText ( ) ) ; \n String selected = dialog . open ( ) ; \n if ( selected ! = null ) {", "msg": "Text with open folder control fix ( title is optional )\n"}
{"diff": "a / substratevm / src / com . oracle . svm . core . graal / src / com / oracle / svm / core / graal / snippets / NonSnippetLowerings . java \n  b / substratevm / src / com . oracle . svm . core . graal / src / com / oracle / svm / core / graal / snippets / NonSnippetLowerings . java \n public void lower ( GetClassNode node , LoweringTool tool ) { \n StampProvider stampProvider = tool . getStampProvider ( ) ; \n LoadHubNode loadHub = node . graph ( ) . unique ( new LoadHubNode ( stampProvider , node . getObject ( ) ) ) ; \n node . replaceAtUsagesAndDelete ( loadHub ) ; \n + tool . getLowerer ( ) . lower ( loadHub , tool ) ; \n } \n }", "msg": "Lower GetClass recursively as it can be used in a snippet .\n"}
{"diff": "a / remote / server / src / java / org / openqa / selenium / remote / server / DriverSessions . java \n  b / remote / server / src / java / org / openqa / selenium / remote / server / DriverSessions . java \n \n import java . util . concurrent . ConcurrentHashMap ; \n \n public class DriverSessions { \n - private DriverFactory factory ; \n + private DriverFactory factory = new DriverFactory ( ) ; \n \n private static Map < SessionId , Session > sessionIdToDriver = \n new ConcurrentHashMap < SessionId , Session > ( ) ;", "msg": "SimonStewart : Fixing the build . Lesson learned : never check in in a hurry .\n"}
{"diff": "a / core / src / main / java / jenkins / model / DownloadSettings . java \n  b / core / src / main / java / jenkins / model / DownloadSettings . java \n public DailyCheck ( ) { \n if ( get ( ) . isUseBrowser ( ) ) { \n return ; \n } \n + boolean due = false ; \n + for ( UpdateSite site : Jenkins . getInstance ( ) . getUpdateCenter ( ) . getSites ( ) ) { \n + if ( site . isDue ( ) ) { \n + due = true ; \n + break ; \n + } \n + } \n + if ( ! due ) { \n + return ; \n + } \n HttpResponse rsp = Jenkins . getInstance ( ) . getPluginManager ( ) . doCheckUpdatesServer ( ) ; \n if ( rsp instanceof FormValidation ) { \n listener . error ( ( ( FormValidation ) rsp ) . renderHtml ( ) ) ;", "msg": "Only do a server - side metadata check if at least one update site claims to be due for a check .\n"}
{"diff": "a / elasticsearch / x - pack / watcher / src / main / java / org / elasticsearch / xpack / watcher / watch / Watch . java \n  b / elasticsearch / x - pack / watcher / src / main / java / org / elasticsearch / xpack / watcher / watch / Watch . java \n \n \n private final transient AtomicLong nonceCounter = new AtomicLong ( ) ; \n \n - private transient long version = Versions . NOT_SET ; \n + private transient long version = Versions . MATCH_ANY ; \n \n public Watch ( String id , Trigger trigger , ExecutableInput input , ExecutableCondition condition , @ Nullable ExecutableTransform transform , \n @ Nullable TimeValue throttlePeriod , ExecutableActions actions , @ Nullable Map < String , Object > metadata ,", "msg": "Use Versions . MATCH_ANY rather than NOT_SET now that NOT_SET is gone .\n"}
{"diff": "a / pact / pact - runtime / src / main / java / eu / stratosphere / pact / runtime / task / DataSinkTask . java \n  b / pact / pact - runtime / src / main / java / eu / stratosphere / pact / runtime / task / DataSinkTask . java \n public int getMaximumNumberOfSubtasks ( ) \n return 1 ; \n } \n / / If the path points to a directory we allow an infinity number of subtasks \n - if ( f . isDir ( ) ) \n + if ( f . isDir ( ) ) { \n return - 1 ; \n - else \n + } \n + else { \n + / / path points to an existing file . delete it , to prevent errors appearing \n + / / when overwriting the file ( HDFS causes non - deterministic errors there ) \n + fs . delete ( path , false ) ; \n return 1 ; \n + } \n } \n catch ( FileNotFoundException fnfex ) { \n / / The exception is thrown if the requested file / directory does not exist .", "msg": "Existing files output files removed before program execution starts , to prevent overwrite errors\n"}
{"diff": "a / server / src / internalClusterTest / java / org / elasticsearch / cluster / ClusterHealthIT . java \n  b / server / src / internalClusterTest / java / org / elasticsearch / cluster / ClusterHealthIT . java \n public void clusterStateProcessed ( String source , ClusterState oldState , ClusterS \n } \n } \n \n + @ AwaitsFix ( bugUrl = \" https : / / github . com / elastic / elasticsearch / issues / 62690 \" ) \n public void testHealthOnMasterFailover ( ) throws Exception { \n final String node = internalCluster ( ) . startDataOnlyNode ( ) ; \n boolean withIndex = randomBoolean ( ) ;", "msg": "Mute ClusterHealthIT . testHealthOnMasterFailover while we await a fix .\n"}
{"diff": "a / truffle / src / com . oracle . truffle . api . interop . java / src / com / oracle / truffle / api / interop / java / ToJavaNode . java \n  b / truffle / src / com . oracle . truffle . api . interop . java / src / com / oracle / truffle / api / interop / java / ToJavaNode . java \n private Object convertImpl ( Object value , TypeAndClass < ? > targetType , Object lang \n return convertedValue ; \n } \n } \n - if ( languageContext ! = null & & ( targetType . clazz = = Object . class | | targetType . clazz = = Value . class ) ) { \n + if ( languageContext ! = null & & targetType . clazz = = Value . class ) { \n convertedValue = value instanceof Value ? value : JavaInterop . toHostValue ( value , languageContext ) ; \n } else if ( JavaObject . isJavaInstance ( targetType . clazz , value ) ) { \n convertedValue = JavaObject . valueOf ( value ) ;", "msg": "JavaInterop : change semantics such that host objects are passed to Java methods unwrapped if the type is Object .\n"}
{"diff": "a / codec - http / src / main / java / io / netty / handler / codec / http / CookieEncoder . java \n  b / codec - http / src / main / java / io / netty / handler / codec / http / CookieEncoder . java \n public void addCookie ( Cookie cookie ) { \n * Encodes the { @ link Cookie } s which were added by { @ link # addCookie ( Cookie ) } \n * so far into an HTTP header value . If no { @ link Cookie } s were added , \n * an empty string is returned . \n + * \n + * < strong > Be aware that calling this method will clear the contends of the { @ link CookieEncoder } < / strong > \n * / \n public String encode ( ) { \n String answer ;", "msg": "Add some javadocs notes that explain the behavior of CookieEncoder . encode ( ) . See\n"}
{"diff": "a / library / src / main / java / com / bumptech / glide / manager / RequestManagerRetriever . java \n  b / library / src / main / java / com / bumptech / glide / manager / RequestManagerRetriever . java \n \n import com . bumptech . glide . RequestManager ; \n import com . bumptech . glide . util . Preconditions ; \n import com . bumptech . glide . util . Util ; \n + import java . util . Collection ; \n import java . util . HashMap ; \n - import java . util . List ; \n import java . util . Map ; \n \n / * * \n public RequestManager get ( View view ) { \n return get ( fragment ) ; \n } \n \n - private static void findAllSupportFragmentsWithViews ( @ Nullable List < Fragment > topLevelFragments , \n + private static void findAllSupportFragmentsWithViews ( \n + @ Nullable Collection < Fragment > topLevelFragments , \n Map < View , Fragment > result ) { \n if ( topLevelFragments = = null ) { \n return ;", "msg": "Change findAllSupportFragmentsWithViews to return a collection instead of list .\n"}
{"diff": "a / core / src / main / java / hudson / console / AnnotatedLargeText . java \n  b / core / src / main / java / hudson / console / AnnotatedLargeText . java \n public long writeLogTo ( long start , OutputStream out ) throws IOException { \n \n / * * \n * Calls { @ link LargeText # writeLogTo ( long , OutputStream ) } without stripping annotations as { @ link # writeLogTo ( long , OutputStream ) } would . \n - * @ inheritDoc \n * @ since 1 . 577 \n * / \n public long writeRawLogTo ( long start , OutputStream out ) throws IOException {", "msg": "AnnotatedLargeText : remove invalid @ inheritDoc\n"}
{"diff": "a / graal / com . oracle . graal . hotspot / src / com / oracle / graal / hotspot / stubs / Stub . java \n  b / graal / com . oracle . graal . hotspot / src / com / oracle / graal / hotspot / stubs / Stub . java \n \n * / \n public abstract class Stub { \n \n + private static final List < Stub > stubs = new ArrayList < > ( ) ; \n + \n / * * \n * The linkage information for a call to this stub from compiled code . \n * / \n public boolean preservesRegisters ( ) { \n public Stub ( HotSpotProviders providers , HotSpotForeignCallLinkage linkage ) { \n this . linkage = linkage ; \n this . providers = providers ; \n + stubs . add ( this ) ; \n + } \n + \n + / * * \n + * Gets an immutable view of all stubs that have been created . \n + * / \n + public static Collection < Stub > getStubs ( ) { \n + return Collections . unmodifiableList ( stubs ) ; \n } \n \n / * *", "msg": "provide Stub . getStubs ( ) method to access all installed stubs\n"}
{"diff": "a / samples / zoomable / src / main / java / com / facebook / samples / zoomable / GestureListenerWrapper . java \n  b / samples / zoomable / src / main / java / com / facebook / samples / zoomable / GestureListenerWrapper . java \n \n / * * \n * Wrapper for SimpleOnGestureListener as GestureDetector does not allow changing its listener . \n * / \n - class GestureListenerWrapper extends GestureDetector . SimpleOnGestureListener { \n + public class GestureListenerWrapper extends GestureDetector . SimpleOnGestureListener { \n \n private GestureDetector . SimpleOnGestureListener mDelegate ;", "msg": "Bring zoomable control to dedupe gallery view\n"}
{"diff": "a / spring - beans / src / main / java / org / springframework / beans / factory / xml / BeanDefinitionParserDelegate . java \n  b / spring - beans / src / main / java / org / springframework / beans / factory / xml / BeanDefinitionParserDelegate . java \n public BeanDefinitionHolder decorateIfRequired ( \n return decorated ; \n } \n } \n - else if ( namespaceUri . startsWith ( \" https : / / www . springframework . org / \" ) ) { \n + else if ( namespaceUri . startsWith ( \" http : / / www . springframework . org / \" ) ) { \n error ( \" Unable to locate Spring NamespaceHandler for XML schema namespace [ \" + namespaceUri + \" ] \" , node ) ; \n } \n else {", "msg": "URL Cleanup - fix undesirable code change\n"}
{"diff": "a / pact / pact - compiler / src / main / java / eu / stratosphere / pact / compiler / plan / OptimizerNode . java \n  b / pact / pact - compiler / src / main / java / eu / stratosphere / pact / compiler / plan / OptimizerNode . java \n private PactType ( Class < ? extends Contract > clazz ) { \n public static PactType getType ( Class < ? extends Contract > pactClass ) { \n PactType [ ] values = PactType . values ( ) ; \n for ( int i = 0 ; i < values . length ; i + + ) { \n - if ( pactClass = = values [ i ] . clazz ) { \n + if ( values [ i ] . clazz . isAssignableFrom ( pactClass ) ) { \n return values [ i ] ; \n } \n }", "msg": "Made optimizer able to handle subclass contracts .\n"}
{"diff": "a / core / src / main / java / org / elasticsearch / transport / local / LocalTransport . java \n  b / core / src / main / java / org / elasticsearch / transport / local / LocalTransport . java \n public void sendRequest ( final DiscoveryNode node , final long requestId , final St \n transportServiceAdapter . sent ( data . length ) ; \n transportServiceAdapter . onRequestSent ( node , requestId , action , request , options ) ; \n targetTransport . workers ( ) . execute ( ( ) - > { \n - ThreadContext threadContext = threadPool . getThreadContext ( ) ; \n + ThreadContext threadContext = targetTransport . threadPool . getThreadContext ( ) ; \n try ( ThreadContext . StoredContext context = threadContext . stashContext ( ) ) { \n targetTransport . messageReceived ( data , action , LocalTransport . this , version , requestId ) ; \n }", "msg": "Use targetTransport . threadPool to stash context not the local one\n"}
{"diff": "a / graal / org . graalvm . compiler . printer / src / org / graalvm / compiler / printer / GraalDebugConfigCustomizer . java \n  b / graal / org . graalvm . compiler . printer / src / org / graalvm / compiler / printer / GraalDebugConfigCustomizer . java \n private static GraphPrinter createNetworkPrinter ( OptionValues options ) throws IO \n * / \n return null ; \n } catch ( IOException e ) { \n - throw new IOException ( String . format ( \" Could not connect to the IGV on % s : % d \" , host , port ) , e ) ; \n + if ( ! Options . PrintIdealGraphFile . hasBeenSet ( options ) ) { \n + TTY . println ( String . format ( \" Could not connect to the IGV on % s : % d - falling back to file dumping . . . \" , host , port ) ) ; \n + return createFilePrinter ( options ) ; \n + } else { \n + throw new IOException ( String . format ( \" Could not connect to the IGV on % s : % d \" , host , port ) , e ) ; \n + } \n } \n }", "msg": "automatically fall back to dumping graphs to files when IGV is unavailable / unreachable\n"}
{"diff": "a / truffle / com . oracle . truffle . dsl . processor / src / com / oracle / truffle / dsl / processor / LanguageRegistrationProcessor . java \n  b / truffle / com . oracle . truffle . dsl . processor / src / com / oracle / truffle / dsl / processor / LanguageRegistrationProcessor . java \n \n import com . oracle . truffle . api . * ; \n import com . oracle . truffle . api . TruffleLanguage . Registration ; \n \n - @ SupportedAnnotationTypes ( \" com . oracle . truffle . api . * \" ) \n + @ SupportedAnnotationTypes ( \" com . oracle . truffle . api . TruffleLanguage . Registration \" ) \n public final class LanguageRegistrationProcessor extends AbstractProcessor { \n private final List < TypeElement > registrations = new ArrayList < > ( ) ;", "msg": "Restrict LanguageRegistrationProcessor to process Registration annotation . \\ nFixes problems where it would consume DSL annotations .\n"}
{"diff": "a / library / src / main / java / com / bumptech / glide / RequestBuilder . java \n  b / library / src / main / java / com / bumptech / glide / RequestBuilder . java \n private Request buildRequestRecursive ( Target < TranscodeType > target , \n thumbPriority , \n thumbOverrideWidth , \n thumbOverrideHeight , \n - requestOptions ) ; \n + thumbnailBuilder . requestOptions ) ; \n isThumbnailBuilt = false ; \n coordinator . setRequests ( fullRequest , thumbRequest ) ; \n return coordinator ;", "msg": "Use the thumb builder \u2019 s RequestOptions when building the thumb request .\n"}
{"diff": "a / graal / com . oracle . graal . truffle . hotspot / src / com / oracle / graal / truffle / hotspot / HotSpotTruffleRuntime . java \n  b / graal / com . oracle . graal . truffle . hotspot / src / com / oracle / graal / truffle / hotspot / HotSpotTruffleRuntime . java \n public void run ( ) { \n } \n } \n } ; \n - if ( mayBeAsynchronous ) { \n - Future < ? > future = compileQueue . submit ( r ) ; \n - this . compilations . put ( optimizedCallTarget , future ) ; \n - } else { \n - r . run ( ) ; \n + Future < ? > future = compileQueue . submit ( r ) ; \n + this . compilations . put ( optimizedCallTarget , future ) ; \n + \n + if ( ! mayBeAsynchronous ) { \n + try { \n + future . get ( ) ; \n + } catch ( InterruptedException | ExecutionException e ) { \n + / / silently ignored \n + } \n } \n }", "msg": "use compilation thread even for synchronous Truffle compilations\n"}
{"diff": "a / delegation / src / main / java / com / iluwatar / delegation / simple / printers / HPPrinter . java \n  b / delegation / src / main / java / com / iluwatar / delegation / simple / printers / HPPrinter . java \n \n \n / * * \n * Specialised Implementation of { @ link Printer } for a HP Printer , in \n - * this case the message to be printed is appended to \" HP Printer : \" \n + * this case the message to be printed is appended to \" HP Printer : \" \n * \n * @ see Printer \n * /", "msg": "CheckStyle reporting strange error about classname , suspect caching , forcing a clean build\n"}
{"diff": "a / samples / showcase / src / main / java / com / facebook / fresco / samples / showcase / MainActivity . java \n  b / samples / showcase / src / main / java / com / facebook / fresco / samples / showcase / MainActivity . java \n private void handleNavigationItemClick ( int itemId ) { \n fragment = new SettingsFragment ( ) ; \n break ; \n default : \n - throw new IllegalArgumentException ( \" No example with this id ! \" ) ; \n + / / Default to the welcome fragment \n + fragment = new WelcomeFragment ( ) ; \n } \n showFragment ( fragment ) ;", "msg": "Default Showcase app to the welcome screen if fragment ID invalid\n"}
{"diff": "a / pact / pact - tests / src / test / java / eu / stratosphere / pact / test / util / minicluster / NepheleMiniCluster . java \n  b / pact / pact - tests / src / test / java / eu / stratosphere / pact / test / util / minicluster / NepheleMiniCluster . java \n private void initJobManager ( ) throws Exception \n \" < property > \" , \n \" < key > \" + ConfigConstants . JOB_EXECUTION_RETRIES_KEY + \" < / key > \" , \n \" < value > 0 < / value > \" , \n - \" < / property > \" , \n + \" < / property > \" , \n \" < property > \" , \n \" < key > taskmanager . setup . usediscovery < / key > \" , \n \" < value > false < / value > \" ,", "msg": "Pact Tests now run with disabled fault tolerance , for immediate visibility of failures .\n"}
{"diff": "a / java / client / test / org / openqa / selenium / environment / DomainHelper . java \n  b / java / client / test / org / openqa / selenium / environment / DomainHelper . java \n private boolean isIpv4Address ( String string ) { \n } \n \n public boolean isValidHostname ( String hostname ) { \n - return ! isIpv4Address ( hostname ) & & ! \" localhost \" . equals ( hostname ) ; \n + return isIpv4Address ( hostname ) | | \" localhost \" . equals ( hostname ) ; \n } \n \n public String getHostName ( ) {", "msg": "SimonStewart : Making the logic for isValidHostname support short - circuiting\n"}
{"diff": "a / graal / com . oracle . graal . loop / src / com / oracle / graal / loop / phases / LoopSafepointEliminationPhase . java \n  b / graal / com . oracle . graal . loop / src / com / oracle / graal / loop / phases / LoopSafepointEliminationPhase . java \n protected void run ( StructuredGraph graph , MidTierContext context ) { \n loops . detectedCountedLoops ( ) ; \n for ( LoopEx loop : loops . countedLoops ( ) ) { \n if ( loop . lirLoop ( ) . children . isEmpty ( ) & & loop . counted ( ) . getKind ( ) = = Kind . Int ) { \n - loop . counted ( ) . createOverFlowGuard ( ) ; \n + boolean hasSafepoint = false ; \n for ( LoopEndNode loopEnd : loop . loopBegin ( ) . loopEnds ( ) ) { \n - loopEnd . disableSafepoint ( ) ; \n + hasSafepoint | = loopEnd . canSafepoint ( ) ; \n + } \n + if ( hasSafepoint ) { \n + loop . counted ( ) . createOverFlowGuard ( ) ; \n + for ( LoopEndNode loopEnd : loop . loopBegin ( ) . loopEnds ( ) ) { \n + loopEnd . disableSafepoint ( ) ; \n + } \n } \n } \n }", "msg": "only create overflow guards for loops that have safepoints\n"}
{"diff": "a / core / src / main / java / hudson / model / AbstractItem . java \n  b / core / src / main / java / hudson / model / AbstractItem . java \n public synchronized void delete ( ) throws IOException , InterruptedException { \n * Does the real job of deleting the item . \n * / \n protected void performDelete ( ) throws IOException , InterruptedException { \n + getConfigFile ( ) . delete ( ) ; \n Util . deleteRecursive ( getRootDir ( ) ) ; \n }", "msg": "delete the config file first , so that even if the request doesn ' t fully complete , the job won ' t be resurrected .\n"}
{"diff": "a / src / test / java / io / vertx / test / core / DatagramTest . java \n  b / src / test / java / io / vertx / test / core / DatagramTest . java \n public void testSendAfterCloseFails ( ) { \n \n @ Test \n public void testBroadcast ( ) { \n + if ( USE_NATIVE_TRANSPORT ) { \n + return ; \n + } \n peer1 = vertx . createDatagramSocket ( new DatagramSocketOptions ( ) . setBroadcast ( true ) ) ; \n peer2 = vertx . createDatagramSocket ( new DatagramSocketOptions ( ) . setBroadcast ( true ) ) ; \n peer2 . exceptionHandler ( t - > fail ( t . getMessage ( ) ) ) ; \n public void testPause ( ) { \n \n @ Test \n public void testMulticastJoinLeave ( ) throws Exception { \n + if ( USE_NATIVE_TRANSPORT ) { \n + return ; \n + } \n Buffer buffer = TestUtils . randomBuffer ( 128 ) ; \n String groupAddress = \" 230 . 0 . 0 . 1 \" ; \n String iface = NetworkInterface . getByInetAddress ( InetAddress . getByName ( \" 127 . 0 . 0 . 1 \" ) ) . getName ( ) ;", "msg": "Exclude broadcast / multicast datagram tests for native transports\n"}
{"diff": "a / java / client / src / org / openqa / selenium / remote / http / W3CHttpCommandCodec . java \n  b / java / client / src / org / openqa / selenium / remote / http / W3CHttpCommandCodec . java \n public W3CHttpCommandCodec ( ) { \n \" if ( ! form . ownerDocument ) { throw Error ( ' Unable to find owning document ' ) ; } \\ n \" + \n \" var e = form . ownerDocument . createEvent ( ' Event ' ) ; \\ n \" + \n \" e . initEvent ( ' submit ' , true , true ) ; \\ n \" + \n - \" if ( form . dispatchEvent ( e ) ) { HTMLFormElement . prototype . submit . call ( form ) } \\ n \" , \n + \" if ( form . ownerDocument . dispatchEvent ( e ) ) { HTMLFormElement . prototype . submit . call ( form ) } \\ n \" , \n asElement ( parameters . get ( \" id \" ) ) ) ; \n \n default :", "msg": "[ java ] Dispatch form \" submit \" event on window to prevent a form double submission\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / rules / proto / ProtoCompileActionBuilder . java \n  b / src / main / java / com / google / devtools / build / lib / rules / proto / ProtoCompileActionBuilder . java \n private FilesToRunProvider getLangPluginTarget ( ) { \n * / \n public static void registerActions ( \n RuleContext ruleContext , \n - Map < String , ToolchainInvocation > toolchainInvocations , \n + ImmutableMap < String , ToolchainInvocation > toolchainInvocations , \n SupportData supportData , \n Iterable < Artifact > outputs , \n String flavorName , \n public static void registerActions ( \n * / \n @ VisibleForTesting \n static CustomCommandLine createCommandLineFromToolchains ( \n - Map < String , ToolchainInvocation > toolchainInvocations , \n + ImmutableMap < String , ToolchainInvocation > toolchainInvocations , \n SupportData supportData , \n boolean allowServices , \n ImmutableList < String > protocOpts ) {", "msg": "ProtoCompileActionBuilder takes ImmutableMap for toolchains , which has a predictable iteration order .\n"}
{"diff": "a / core / src / main / java / hudson / model / Run . java \n  b / core / src / main / java / hudson / model / Run . java \n public void setResult ( Result r ) { \n / / result can only get worse \n if ( result = = null ) { \n result = r ; \n - LOGGER . info ( toString ( ) + \" : result is set to \" + r + \" by \" + caller ) ; \n + LOGGER . fine ( toString ( ) + \" : result is set to \" + r + \" by \" + caller ) ; \n } else { \n if ( r . isWorseThan ( result ) ) { \n - LOGGER . info ( toString ( ) + \" : result is set to \" + r + \" by \" + caller ) ; \n + LOGGER . fine ( toString ( ) + \" : result is set to \" + r + \" by \" + caller ) ; \n result = r ; \n } \n }", "msg": "reducing these log levels because they tend to fill up the log view .\n"}
{"diff": "a / src / main / java / io / vertx / core / http / impl / HttpClientImpl . java \n  b / src / main / java / io / vertx / core / http / impl / HttpClientImpl . java \n void getConnectionForRequest ( String peerHost , boolean ssl , int port , String host \n / * * \n * @ return the vertx , for use in package related classes only . \n * / \n - VertxInternal getVertx ( ) { \n + public VertxInternal getVertx ( ) { \n return vertx ; \n }", "msg": "Provide access to the Vertx instance so WebClient can use it\n"}
{"diff": "a / graal / com . oracle . max . graal . lir / src / com / oracle / max / graal / lir / asm / TargetMethodAssembler . java \n  b / graal / com . oracle . max . graal . lir / src / com / oracle / max / graal / lir / asm / TargetMethodAssembler . java \n public CiTargetMethod finishTargetMethod ( Object name , boolean isStub ) { \n Debug . metric ( \" DataPatches \" ) . add ( targetMethod . dataReferences . size ( ) ) ; \n Debug . metric ( \" ExceptionHandlersEmitted \" ) . add ( targetMethod . exceptionHandlers . size ( ) ) ; \n \n - Debug . log ( \" Finished target method % s , isStub % d \" , name , isStub ) ; \n + Debug . log ( \" Finished target method % s , isStub % b \" , name , isStub ) ; \n / * \n if ( GraalOptions . PrintAssembly & & ! TTY . isSuppressed ( ) & & ! isStub ) { \n Util . printSection ( \" Target Method \" , Util . SECTION_CHARACTER ) ;", "msg": "explicitly exclude com . oracle . max . graal . tests from graal class path to make JUnit tests work\n"}
{"diff": "a / src / main / java / com / google / devtools / build / lib / query2 / SkyQueryEnvironment . java \n  b / src / main / java / com / google / devtools / build / lib / query2 / SkyQueryEnvironment . java \n public boolean apply ( Target target ) { \n @ ThreadSafe \n @ Override \n public ThreadSafeMutableSet < Target > getBuildFiles ( \n - QueryExpression caller , \n - ThreadSafeMutableSet < Target > nodes , \n - boolean buildFiles , \n - boolean loads ) \n - throws QueryException { \n + QueryExpression caller , ThreadSafeMutableSet < Target > nodes , boolean buildFiles , boolean loads ) \n + throws QueryException , InterruptedException { \n ThreadSafeMutableSet < Target > dependentFiles = createThreadSafeMutableSet ( ) ; \n Set < PackageIdentifier > seenPackages = new HashSet < > ( ) ; \n / / Keep track of seen labels , to avoid adding a fake subinclude label that also exists as a", "msg": "Declare QueryEnvironment # getBuildFiles to throw InterruptedException\n"}
{"diff": "a / sulong / projects / com . oracle . truffle . llvm . runtime / src / com / oracle / truffle / llvm / runtime / interop / LLVMForeignCallNode . java \n  b / sulong / projects / com . oracle . truffle . llvm . runtime / src / com / oracle / truffle / llvm / runtime / interop / LLVMForeignCallNode . java \n public LLVMForeignCallNode ( LLVMLanguage language , LLVMFunctionDescriptor functio \n this . returnBaseType = getReturnBaseType ( interopType ) ; \n this . getStack = LLVMGetStackFromThreadNode . create ( ) ; \n this . callNode = DirectCallNode . create ( getCallTarget ( function ) ) ; \n - this . callNode . forceInlining ( ) ; \n this . prepareValueForEscape = LLVMDataEscapeNode . create ( function . getLLVMFunction ( ) . getType ( ) . getReturnType ( ) ) ; \n this . packArguments = PackForeignArgumentsNodeGen . create ( function . getLLVMFunction ( ) . getType ( ) , interopType , sourceType ) ; \n }", "msg": "Do not force - inline call to function in foreign call node\n"}
{"diff": "a / lib / java / com / google / android / material / tabs / TabLayoutMediator . java \n  b / lib / java / com / google / android / material / tabs / TabLayoutMediator . java \n public void detach ( ) { \n attached = false ; \n } \n \n + / * * \n + * Returns whether the { @ link TabLayout } and the { @ link ViewPager2 } are linked together . \n + * / \n + public boolean isAttached ( ) { \n + return attached ; \n + } \n + \n @ SuppressWarnings ( \" WeakerAccess \" ) \n void populateTabsFromPagerAdapter ( ) { \n tabLayout . removeAllTabs ( ) ;", "msg": "[ Tab ] Added getter in TabLayoutMediator to return whether a TabLayout and a ViewPager2 are linked together .\n"}
{"diff": "a / src / main / java / org / elasticsearch / index / gateway / none / NoneIndexShardGateway . java \n  b / src / main / java / org / elasticsearch / index / gateway / none / NoneIndexShardGateway . java \n public void recover ( boolean indexShouldExists , RecoveryStatus recoveryStatus ) th \n / / in the none case , we simply start the shard \n / / clean the store , there should be nothing there . . . \n try { \n - logger . info ( \" deleting shard content \" ) ; \n + logger . debug ( \" cleaning shard content before creation \" ) ; \n indexShard . store ( ) . deleteContent ( ) ; \n } catch ( IOException e ) { \n logger . warn ( \" failed to clean store before starting shard \" , e ) ;", "msg": "better log message for none gateway , also make it debug level\n"}
{"diff": "a / sulong / projects / com . oracle . truffle . llvm . parser / src / com / oracle / truffle / llvm / parser / metadata / debuginfo / DIScopeBuilder . java \n  b / sulong / projects / com . oracle . truffle . llvm . parser / src / com / oracle / truffle / llvm / parser / metadata / debuginfo / DIScopeBuilder . java \n public LLVMSourceLocation build ( ) { \n \n @ Override \n public void visit ( MDLocation md ) { \n - if ( md . getInlinedAt ( ) ! = MDVoidNode . INSTANCE ) { \n - loc = buildLocation ( md . getInlinedAt ( ) ) ; \n - localCache . put ( md , loc ) ; \n - return ; \n - } \n - \n parent = buildLocation ( md . getScope ( ) ) ; \n kind = LLVMSourceLocation . Kind . LINE ; \n file = fileExtractor . extractFile ( md ) ;", "msg": "Remove workaround for source location reporting of inlined functions .\n"}
{"diff": "a / truffle / com . oracle . truffle . dsl . processor / src / com / oracle / truffle / dsl / processor / parser / NodeParser . java \n  b / truffle / com . oracle . truffle . dsl . processor / src / com / oracle / truffle / dsl / processor / parser / NodeParser . java \n private NodeData parseNodeData ( TypeElement templateType , List < TypeElement > typeH \n child = children . get ( childIndex ) ; \n shortCircuit = shortCircuits . contains ( NodeExecutionData . createIndexedName ( child , varArgsIndex ) ) ; \n } \n - executions . add ( new NodeExecutionData ( child , i , varArgsIndex , shortCircuit ) ) ; \n + if ( child ! = null ) { \n + executions . add ( new NodeExecutionData ( child , i , varArgsIndex , shortCircuit ) ) ; \n + } \n } \n return executions ; \n }", "msg": "Make parsing more robust against errors .\n"}

{"diff": "a / None \n  b / examples/rich-feed.php \n+<?php \n +/* \n + * This file is part of the feed-io package. \n + * \n + * (c) Alexandre Debril <alex.debril@gmail.com> \n + * \n + * For the full copyright and license information, please view the LICENSE \n + * file that was distributed with this source code. \n + */ \n + \n +require __DIR__.DIRECTORY_SEPARATOR.'bootstrap.php'; \n + \n +$feedIo = \\FeedIo\\Factory::create()->getFeedIo(); \n + \n +$result = $feedIo->read('https://debril.org/feed/'); \n + \n +echo \"feed title : {$result->getFeed()->getTitle()} \\n \"; \n + \n +foreach ($result->getFeed() as $item) { \n + echo \"item title : {$item->getTitle()} \\n \"; \n + \n + foreach ($item->getAllElements() as $element) { \n + echo \"element name : \" . $element->getName() . PHP_EOL; \n + \n + foreach( $element->getAllElements() as $subElement) { \n + echo \"sub element name : \" . $subElement->getName() . PHP_EOL; \n + echo \"sub element value : \" . $subElement->getValue() . PHP_EOL; \n + } \n + } \n + \n +}", "msg": "added rich feed parsing example"}
{"diff": "a / src/FeedIo/Formatter/XmlFormatter.php \n  b / src/FeedIo/Formatter/XmlFormatter.php \n@@ -81,7 +81,7 @@ class XmlFormatter implements FormatterInterface \n $rules = $this->getAllRules($ruleSet, $node); \n foreach ($rules as $rule) { \n - $rule->addElement($document, $rootElement, $node); \n + $rule->apply($document, $rootElement, $node); \n } \n }", "msg": "Use the appropriate method"}
{"diff": "a / examples/change-user-agent.php \n  b / examples/change-user-agent.php \n@@ -19,7 +19,8 @@ $stack->push( \n $client = new \\FeedIo\\Adapter\\Guzzle\\Client( \n new GuzzleHttp\\Client([ \n 'handler' => $stack \n - ]) \n + ]), \n + 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36' \n ); \n $feedIo = new \\FeedIo\\FeedIo($client, $logger);", "msg": "Inject a custom user-agent through __construct"}
{"diff": "a / src/FeedIo/Explorer.php \n  b / src/FeedIo/Explorer.php \n@@ -51,7 +51,15 @@ class Explorer \n $this->logger->info(\"discover feeds from {$url}\"); \n $stream = $this->client->getResponse($url, new \\DateTime); \n - return $this->extractFeeds($stream->getBody()); \n + $internalErrors = libxml_use_internal_errors(true); \n + $entityLoaderDisabled = libxml_disable_entity_loader(true); \n + \n + $feeds = $this->extractFeeds($stream->getBody()); \n + \n + libxml_use_internal_errors($internalErrors); \n + libxml_disable_entity_loader($entityLoaderDisabled); \n + \n + return $feeds; \n } \n /**", "msg": "HTML errors management"}
{"diff": "a / src/FeedIo/Standard/Rss.php \n  b / src/FeedIo/Standard/Rss.php \n@@ -115,7 +115,7 @@ class Rss extends XmlAbstract \n $ruleSet = parent::buildBaseRuleSet(); \n $ruleSet \n ->add(new Link()) \n - ->add(new Description()) \n + ->add(new Description(), ['content:encoded']) \n ->add($this->getModifiedSinceRule(static::DATE_NODE_TAGNAME, ['lastBuildDate', 'lastPubDate'])) \n ->add(new Category());", "msg": "set 'content:encoded' as an alias of 'description'. Fix"}
{"diff": "a / src/FeedIo/Rule/Language.php \n  b / src/FeedIo/Rule/Language.php \n@@ -17,7 +17,7 @@ class Language extends RuleAbstract \n public function setProperty(NodeInterface $node, \\DOMElement $element): void \n { \n if ($node instanceof FeedInterface) { \n - $node->set(static::NODE_NAME, $element->nodeValue); \n + $node->setLanguage($element->nodeValue); \n } \n }", "msg": "Actually set language instead of dyn attribute"}
{"diff": "a / src/FeedIo/Factory.php \n  b / src/FeedIo/Factory.php \n@@ -39,6 +39,7 @@ class Factory \n 'config' => [], \n ] \n ): Factory { \n + @trigger_error('Using the factory is deprecated since 5.2 and will be removed in 6.0', \\E_USER_DEPRECATED); \n $factory = new self(); \n $clientBuilder = new GuzzleClientBuilder($factory->extractConfig($clientConfig));", "msg": "Deprecate the factory"}
{"diff": "a / src/Argument.php \n  b / src/Argument.php \n@@ -37,7 +37,7 @@ final class Argument \n public function __construct(\\ReflectionParameter $parameter, string $name) \n { \n - $type = $parameter->getType(); \n + $type = $this->getType($parameter); \n $isOptional = $parameter->isOptional(); \n $this->isDefaultAvailable = $parameter->isDefaultValueAvailable() || $isOptional; \n if ($isOptional) { \n @@ -105,4 +105,14 @@ private function setDefaultValue(\\ReflectionParameter $parameter) \n $this->default = null; \n } \n } \n + \n + private function getType(\\ReflectionParameter $parameter) : string \n + { \n + $type = $parameter->getType(); \n + if ($type instanceof \\ReflectionType && in_array((string) $type, ['bool', 'int', 'string', 'array'], true)) { \n + return ''; \n + } \n + \n + return (string) $type; \n + } \n }", "msg": "ignore scalar type for binding"}
{"diff": "a / src/Name.php \n  b / src/Name.php \n@@ -67,7 +67,7 @@ private function setName(string $name) \n } \n // single name \n // @Named(name) \n - if ($name === self::ANY || preg_match('/^[a-zA-Z0-9_]+$/', $name)) { \n + if ($name === self::ANY || preg_match('/^\\w+$/', $name)) { \n $this->name = $name; \n return;", "msg": "bettere regex expression"}
{"diff": "a / tests/ContainerTest.php \n  b / tests/ContainerTest.php \n@@ -134,7 +134,7 @@ public function testMoveUnbound() \n public function testAbstractClassUnbound() \n { \n try { \n - $this->container->getInstance(FakeAbstract::class, Name::ANY); \n + $this->container->getInstance('_INVALID_INTERFACE_', Name::ANY); \n } catch (\\Exception $e) { \n $this->assertSame(Unbound::class, get_class($e)); \n }", "msg": "use explicit invalid class name"}
{"diff": "a / src/AbstractModule.php \n  b / src/AbstractModule.php \n@@ -68,7 +68,7 @@ public function override(self $module) \n */ \n public function getContainer() : Container \n { \n - if (! $this->container) { \n + if (! $this->container instanceof Container) { \n $this->activate(); \n }", "msg": "validate Container class"}
{"diff": "a / src/NewInstance.php \n  b / src/NewInstance.php \n@@ -54,7 +54,7 @@ public function __construct( \n public function __invoke(Container $container) \n { \n // constructor injection \n - $instance = $this->arguments ? (new \\ReflectionClass($this->class))->newInstanceArgs($this->arguments->inject($container)) : new $this->class; \n + $instance = $this->arguments instanceof Arguments ? (new \\ReflectionClass($this->class))->newInstanceArgs($this->arguments->inject($container)) : new $this->class; \n // setter injection \n ($this->setterMethods)($instance, $container);", "msg": "validate Arguments class"}
{"diff": "a / src/MethodInvocationProvider.php \n  b / src/MethodInvocationProvider.php \n@@ -14,7 +14,7 @@ class MethodInvocationProvider implements ProviderInterface \n */ \n private $invocation; \n - public function set(MethodInvocation $invocation) : void \n + public function set(MethodInvocation $invocation) \n { \n $this->invocation = $invocation; \n }", "msg": "remove return type\naop may return"}
{"diff": "a / src/compiler/DiCompiler.php \n  b / src/compiler/DiCompiler.php \n@@ -35,10 +35,10 @@ final class DiCompiler implements InjectorInterface \n /** @var FilePutContents */ \n private $filePutContents; \n - public function __construct(?AbstractModule $module = null, string $scriptDir = '') \n + public function __construct(AbstractModule $module, string $scriptDir) \n { \n $this->scriptDir = $scriptDir ?: sys_get_temp_dir(); \n - $this->container = $module ? $module->getContainer() : new Container(); \n + $this->container = $module->getContainer(); \n $this->dependencyCompiler = new DependencyCode($this->container); \n $this->module = $module; \n $this->dependencySaver = new DependencySaver($scriptDir);", "msg": "Null default unnecessary"}
{"diff": "a / src/WP_CLI/CommandWithUpgrade.php \n  b / src/WP_CLI/CommandWithUpgrade.php \n@@ -615,8 +615,10 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command { \n // Add `url` for plugin or theme on wordpress.org. \n foreach ( $items as $index => $item_object ) { \n + if ( $item_object instanceof \\stdClass ) { \n $item_object->url = \"https://wordpress.org/{$plural}/{$item_object->slug}/\"; \n } \n + } \n if ( 'table' === $format ) { \n $count = \\WP_CLI\\Utils\\get_flag_value( $api->info, 'results', 'unknown' );", "msg": "Limit addition of URL property when item is a class\nSee"}
{"diff": "a / src/WP_CLI/CommandWithUpgrade.php \n  b / src/WP_CLI/CommandWithUpgrade.php \n@@ -210,7 +210,7 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command { \n } \n } \n - if ( $result ) { \n + if ( ! is_wp_error( $result ) && ! empty( $this->fetcher->get_many( array( $slug ) ) ) ) { \n $this->chained_command = true; \n if ( \\WP_CLI\\Utils\\get_flag_value( $assoc_args, 'activate-network' ) ) { \n \\WP_CLI::log( \"Network-activating '$slug'...\" ); \n @@ -658,4 +658,3 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command { \n } \n } \n -", "msg": "Handle extension activation for WP error or on not found"}
{"diff": "a / src/Theme_Command.php \n  b / src/Theme_Command.php \n@@ -753,9 +753,12 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { \n * \n * ## OPTIONS \n * \n - * <theme>... \n + * [<theme>...] \n * : One or more themes to delete. \n * \n + * [--all] \n + * : If set, all themes will be deleted except active theme. \n + * \n * [--force] \n * : To delete active theme use this. \n * \n @@ -769,6 +772,12 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { \n */ \n public function delete( $args, $assoc_args ) { \n + $all = Utils\\get_flag_value( $assoc_args, 'all', false ); \n + \n + if ( ! ( $args = $this->check_optional_args_and_all( $args, $all, 'delete' ) ) ) { \n + return; \n + } \n + \n $force = Utils\\get_flag_value( $assoc_args, 'force', false ); \n $successes = $errors = 0;", "msg": "Add --all option to delete all themes"}
{"diff": "a / src/WP_CLI/Fetchers/Theme.php \n  b / src/WP_CLI/Fetchers/Theme.php \n@@ -19,12 +19,16 @@ class Theme extends Base { \n * @return object|false \n */ \n public function get( $name ) { \n - $theme = wp_get_theme( $name ); \n - \n - if ( ! $theme->exists() ) { \n + // Workaround to equalize folder naming conventions across Win/Mac/Linux \n + // Returns false if theme stylesheet doesn't exactly match existing themes. \n + $existing_themes = wp_get_themes(); \n + $existing_stylesheets = array_keys( $existing_themes ); \n + if ( ! in_array( $name, $existing_stylesheets, true ) ) { \n return false; \n } \n + $theme = $existing_themes[ $name ]; \n + \n return $theme; \n } \n }", "msg": "Workaround to equalize folder naming conventions across Win/Mac/Linux for WPCLI Themes"}
{"diff": "a / src/Plugin_Command.php \n  b / src/Plugin_Command.php \n@@ -380,7 +380,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { \n * : If set, all plugins will be deactivated. \n * \n * [--exclude=<name>] \n - * : Comma separated list of plugin names that should be excluded from deactivation. \n + * : Comma separated list of plugin slugs that should be excluded from deactivation. \n * \n * [--network] \n * : If set, the plugin will be deactivated for the entire multisite network.", "msg": "Use `slugs` for consistency"}
{"diff": "a / Dumper/YamlFileDumper.php \n  b / Dumper/YamlFileDumper.php \n@@ -23,6 +23,13 @@ use Symfony\\Component\\Translation\\Exception\\LogicException; \n */ \n class YamlFileDumper extends FileDumper \n { \n + private $extension; \n + \n + public function __construct(/**string */$extension = 'yml') \n + { \n + $this->extension = $extension; \n + } \n + \n /** \n * {@inheritdoc} \n */ \n @@ -50,6 +57,6 @@ class YamlFileDumper extends FileDumper \n */ \n protected function getExtension() \n { \n - return 'yml'; \n + return $this->extension; \n } \n }", "msg": "[FrameworkBundle] Allow .yaml file extension everywhere"}
{"diff": "a / Command/XliffLintCommand.php \n  b / Command/XliffLintCommand.php \n@@ -26,6 +26,8 @@ use Symfony\\Component\\Console\\Style\\SymfonyStyle; \n */ \n class XliffLintCommand extends Command \n { \n + protected static $defaultName = 'lint:xliff'; \n + \n private $format; \n private $displayCorrectFiles; \n private $directoryIteratorProvider; \n @@ -45,7 +47,6 @@ class XliffLintCommand extends Command \n protected function configure() \n { \n $this \n - ->setName('lint:xliff') \n ->setDescription('Lints a XLIFF file and outputs encountered errors') \n ->addArgument('filename', null, 'A file or a directory or STDIN') \n ->addOption('format', null, InputOption::VALUE_REQUIRED, 'The output format', 'txt')", "msg": "[Console] Add protected static $defaultName to set the default name of a Command"}
{"diff": "a / Loader/YamlFileLoader.php \n  b / Loader/YamlFileLoader.php \n@@ -39,10 +39,18 @@ class YamlFileLoader extends FileLoader \n $this->yamlParser = new YamlParser(); \n } \n + $prevErrorHandler = set_error_handler(function ($level, $message, $script, $line) use ($resource, &$prevErrorHandler) { \n + $message = E_USER_DEPRECATED === $level ? preg_replace('/ on line \\d+/', ' in \"'.$resource.'\"$0', $message) : $message; \n + \n + return $prevErrorHandler ? $prevErrorHandler($level, $message, $script, $line) : false; \n + }); \n + \n try { \n $messages = $this->yamlParser->parse(file_get_contents($resource), Yaml::PARSE_KEYS_AS_STRINGS); \n } catch (ParseException $e) { \n throw new InvalidResourceException(sprintf('Error parsing YAML, invalid file \"%s\"', $resource), 0, $e); \n + } finally { \n + restore_error_handler(); \n } \n return $messages;", "msg": "include file and line number in deprecation"}
{"diff": "a / DependencyInjection/TranslatorPass.php \n  b / DependencyInjection/TranslatorPass.php \n@@ -80,8 +80,15 @@ class TranslatorPass implements CompilerPassInterface \n ->replaceArgument(3, $loaders) \n ; \n - if ($container->hasParameter('twig.default_path')) { \n + if (!$container->hasParameter('twig.default_path')) { \n + return; \n + } \n + \n + if ($container->hasDefinition($this->debugCommandServiceId)) { \n $container->getDefinition($this->debugCommandServiceId)->replaceArgument(4, $container->getParameter('twig.default_path')); \n + } \n + \n + if ($container->hasDefinition($this->updateCommandServiceId)) { \n $container->getDefinition($this->updateCommandServiceId)->replaceArgument(5, $container->getParameter('twig.default_path')); \n } \n }", "msg": "modify definitions only if the do exist\nIf the `TranslatorPass` is used an application without the Console\ncomponent, the commands will not be registered. Thus, their service\ndefinitions must not be modified."}
{"diff": "a / Dumper/XliffFileDumper.php \n  b / Dumper/XliffFileDumper.php \n@@ -146,7 +146,11 @@ class XliffFileDumper extends FileDumper \n foreach ($messages->all($domain) as $source => $target) { \n $translation = $dom->createElement('unit'); \n $translation->setAttribute('id', strtr(substr(base64_encode(hash('sha256', $source, true)), 0, 7), '/+', '._')); \n - $translation->setAttribute('name', $source); \n + $name = $source; \n + if (strlen($source) > 80) { \n + $name = substr(md5($source), -7); \n + } \n + $translation->setAttribute('name', $name); \n $metadata = $messages->getMetadata($source, $domain); \n // Add notes section", "msg": "Make sure to trim source if it is too long"}
{"diff": "a / Tests/Command/XliffLintCommandTest.php \n  b / Tests/Command/XliffLintCommandTest.php \n@@ -121,7 +121,7 @@ EOF; \n </xliff> \n XLIFF; \n - $filename = sprintf('%s/xliff-lint-test/messages.en.xlf', sys_get_temp_dir()); \n + $filename = sprintf('%s/translation-xliff-lint-test/messages.en.xlf', sys_get_temp_dir()); \n file_put_contents($filename, $xliffContent); \n $this->files[] = $filename; \n @@ -150,8 +150,8 @@ XLIFF; \n protected function setUp() \n { \n - @mkdir(sys_get_temp_dir().'/xliff-lint-test'); \n $this->files = array(); \n + @mkdir(sys_get_temp_dir().'/translation-xliff-lint-test'); \n } \n protected function tearDown() \n @@ -161,6 +161,6 @@ XLIFF; \n unlink($file); \n } \n } \n - rmdir(sys_get_temp_dir().'/xliff-lint-test'); \n + rmdir(sys_get_temp_dir().'/translation-xliff-lint-test'); \n } \n }", "msg": "[AppVeyor] Fix race condition in tests"}
{"diff": "a / Loader/XliffFileLoader.php \n  b / Loader/XliffFileLoader.php \n@@ -58,7 +58,7 @@ class XliffFileLoader implements LoaderInterface \n $xliffVersion = XliffUtils::getVersionNumber($dom); \n if ($errors = XliffUtils::validateSchema($dom)) { \n - throw new InvalidResourceException(sprintf('Invalid resource provided: \"%s\"; Errors: %s', $xliffVersion, XliffUtils::getErrorsAsString($errors))); \n + throw new InvalidResourceException(sprintf('Invalid resource provided: \"%s\"; Errors: %s', $resource, XliffUtils::getErrorsAsString($errors))); \n } \n if ('1.2' === $xliffVersion) {", "msg": "[Translator] Add resource path to exception message for schema validation errors"}
{"diff": "a / LoggingTranslator.php \n  b / LoggingTranslator.php \n@@ -84,6 +84,10 @@ class LoggingTranslator implements TranslatorInterface, LegacyTranslatorInterfac \n { \n $prev = $this->translator->getLocale(); \n $this->translator->setLocale($locale); \n + if ($prev === $locale) { \n + return; \n + } \n + \n $this->logger->debug(sprintf('The locale of the translator has changed from \"%s\" to \"%s\".', $prev, $locale)); \n }", "msg": "Do not log or call the proxy function when the locale is the same"}
{"diff": "a / Loader/PoFileLoader.php \n  b / Loader/PoFileLoader.php \nnamespace Symfony\\Component\\Translation\\Loader; \n /** \n - * @copyright Copyright (c) 2010, Union of RAD http://union-of-rad.org (http://lithify.me/) \n + * @copyright Copyright (c) 2010, Union of RAD https://github.com/UnionOfRAD/lithium \n * @copyright Copyright (c) 2012, Clemens Tolboom \n */ \n class PoFileLoader extends FileLoader \n @@ -20,7 +20,7 @@ class PoFileLoader extends FileLoader \n /** \n * Parses portable object (PO) format. \n * \n - * From http://www.gnu.org/software/gettext/manual/gettext.html#PO-Files \n + * From https://www.gnu.org/software/gettext/manual/gettext.html#PO-Files \n * we should be able to parse files having: \n * \n * white-space", "msg": "[Translation] Use HTTPS and fix a url"}
{"diff": "a / Command/XliffLintCommand.php \n  b / Command/XliffLintCommand.php \n@@ -83,9 +83,9 @@ EOF \n $filenames = (array) $input->getArgument('filename'); \n $this->format = $input->getOption('format'); \n $this->displayCorrectFiles = $output->isVerbose(); \n - $hasStdin = '-' === ($filenames[0] ?? ''); \n + $hasStdin = ['-'] === $filenames; \n - if ($hasStdin || 0 === \\count($filenames)) { \n + if ($hasStdin || !$filenames) { \n if (!$hasStdin && 0 !== ftell(STDIN)) { // remove 0 !== ftell(STDIN) check in 5.0 \n throw new RuntimeException('Please provide a filename or pipe file content to STDIN.'); \n }", "msg": "Require exact match when reading from stdin with a dash"}
{"diff": "a / IdentityTranslator.php \n  b / IdentityTranslator.php \n@@ -24,6 +24,7 @@ class IdentityTranslator implements LegacyTranslatorInterface, TranslatorInterfa \n { \n use TranslatorTrait { \n trans as private doTrans; \n + setLocale as private doSetLocale; \n } \n private $selector; \n @@ -45,6 +46,14 @@ class IdentityTranslator implements LegacyTranslatorInterface, TranslatorInterfa \n return $this->doTrans($id, $parameters, $domain, $locale); \n } \n + /** \n + * {@inheritdoc} \n + */ \n + public function setLocale($locale) \n + { \n + $this->doSetLocale($locale); \n + } \n + \n /** \n * {@inheritdoc} \n *", "msg": "[Translator] fix compat with translation-contracts v2"}
{"diff": "a / MessageCatalogue.php \n  b / MessageCatalogue.php \n@@ -130,7 +130,9 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf \n if (!isset($this->messages[$domain])) { \n $this->messages[$domain] = $messages; \n } else { \n - $this->messages[$domain] = array_replace($this->messages[$domain], $messages); \n + foreach ($messages as $id => $message) { \n + $this->messages[$domain][$id] = $message; \n + } \n } \n }", "msg": "[Translator] Performance improvement in MessageCatalogue and catalogue operations."}
{"diff": "a / Translator.php \n  b / Translator.php \n@@ -24,6 +24,9 @@ use Symfony\\Component\\Translation\\Loader\\LoaderInterface; \n use Symfony\\Contracts\\Translation\\LocaleAwareInterface; \n use Symfony\\Contracts\\Translation\\TranslatorInterface; \n +// Help opcache.preload discover always-needed symbols \n +class_exists(MessageCatalogue::class); \n + \n /** \n * @author Fabien Potencier <fabien@symfony.com> \n */", "msg": "[DI] add tags `container.preload`/`.no_preload` to declare extra classes to preload/services to not preload"}
{"diff": "a / src/Tenancy/Providers/TenantProvider.php \n  b / src/Tenancy/Providers/TenantProvider.php \n@@ -16,9 +16,9 @@ namespace Tenancy\\Providers; \n use Illuminate\\Contracts\\Foundation\\Application; \n use Illuminate\\Support\\ServiceProvider; \n +use Illuminate\\Contracts\\Support\\DeferrableProvider; \n use Tenancy\\Identification\\Contracts\\ResolvesTenants; \n use Tenancy\\Identification\\Contracts\\Tenant; \n -use Illuminate\\Contracts\\Support\\DeferrableProvider; \n class TenantProvider extends ServiceProvider implements DeferrableProvider \n {", "msg": "Change the order of dependencies\nLooks better, makes more sense"}
{"diff": "a / src/Affects/Routes/Events/ConfigureRoutes.php \n  b / src/Affects/Routes/Events/ConfigureRoutes.php \nnamespace Tenancy\\Affects\\Routes\\Events; \n +use Illuminate\\Routing\\RouteCollection; \n use Illuminate\\Routing\\Router; \n use Tenancy\\Identification\\Events\\Resolved; \n use Tenancy\\Identification\\Events\\Switched; \n @@ -34,4 +35,30 @@ class ConfigureRoutes \n $this->event = $event; \n $this->router = $router; \n } \n + \n + /** \n + * Flush all tenant routes for this request. \n + * \n + * @return $this \n + */ \n + public function flush() \n + { \n + $this->router->setRoutes(new RouteCollection()); \n + \n + return $this; \n + } \n + \n + /** \n + * Adds routes from a routes.php file to the current request. \n + * \n + * @param array $attributes \n + * @param string $path \n + * @return $this \n + */ \n + public function fromFile(array $attributes, string $path) \n + { \n + $this->router->group($attributes, $path); \n + \n + return $this; \n + } \n }", "msg": "simplified use of ConfigureRoutes"}
{"diff": "a / src/Tenancy/Database/Events/Drivers/Configuring.php \n  b / src/Tenancy/Database/Events/Drivers/Configuring.php \n@@ -52,6 +52,17 @@ class Configuring \n return $this; \n } \n + public function useConfig(string $path) \n + { \n + if (! file_exists($path)) { \n + throw new \\InvalidArgumentException(\"Cannot set up tenant connection configuration, file $path does not exist.\"); \n + } \n + \n + $this->configuration = include $path; \n + \n + return $this; \n + } \n + \n protected function defaults(Tenant $tenant, array &$configuration): array \n { \n if ($tenant->isDirty($tenant->getTenantKeyName())) {", "msg": "add ability to set up connection configuration using file"}
{"diff": "a / tests/unit/Database/Mysql/MysqlDriverTest.php \n  b / tests/unit/Database/Mysql/MysqlDriverTest.php \n@@ -44,10 +44,7 @@ class MysqlDriverTest extends DatabaseDriverTestCase \n $event->configuration); \n }); \n $this->events->listen([Creating::class, Updating::class, Deleting::class], function ($event) { \n - $event->useConfig( \n - __DIR__.DIRECTORY_SEPARATOR.'database.php', \n - array_merge($event->configuration, ['host' => '%']) \n - ); \n + $event->configuration['host'] = '%'; \n }); \n } \n }", "msg": "Lets not use a removed function"}
{"diff": "a / Twig/Extension/MediaExtension.php \n  b / Twig/Extension/MediaExtension.php \n@@ -56,9 +56,9 @@ class MediaExtension extends \\Twig_Extension implements \\Twig_Extension_InitRunt \n public function getTokenParsers() \n { \n return array( \n - new MediaTokenParser(get_class()), \n - new ThumbnailTokenParser(get_class()), \n - new PathTokenParser(get_class()), \n + new MediaTokenParser(get_called_class()), \n + new ThumbnailTokenParser(get_called_class()), \n + new PathTokenParser(get_called_class()), \n ); \n }", "msg": "Allow MediaExtension to be extended\nChange get_class() to get_called_class() to support extending the MediaExtension"}
{"diff": "a / src/Model/MediaInterface.php \n  b / src/Model/MediaInterface.php \n@@ -261,7 +261,7 @@ interface MediaInterface \n /** \n * Set cdn_flush_identifier. \n * \n - * @param bool $cdnFlushIdentifier \n + * @param string $cdnFlushIdentifier \n */ \n public function setCdnFlushIdentifier($cdnFlushIdentifier);", "msg": "Document actual type in docblock\nThis will make SA tools happier."}
{"diff": "a / src/Controller/Api/MediaController.php \n  b / src/Controller/Api/MediaController.php \n@@ -357,7 +357,7 @@ class MediaController \n */ \n protected function getMedium($id = null) \n { \n - $media = $this->mediaManager->findOneBy(['id' => $id]); \n + $media = $this->mediaManager->find($id); \n if (null === $media) { \n throw new NotFoundHttpException(sprintf('Media (%d) was not found', $id));", "msg": "Used find method to get entity by ID"}
{"diff": "a / Chunk/ErrorChunk.php \n  b / Chunk/ErrorChunk.php \n@@ -28,7 +28,6 @@ class ErrorChunk implements ChunkInterface \n public function __construct(int $offset, \\Throwable $error = null) \n { \n - $didThrow = false; \n $this->offset = $offset; \n $this->error = $error; \n $this->errorMessage = null !== $error ? $error->getMessage() : 'Reading from the response stream reached the inactivity timeout.';", "msg": "[HttpClient] Remove unused local variable"}
{"diff": "a / CachingHttpClient.php \n  b / CachingHttpClient.php \nnamespace Symfony\\Component\\HttpClient; \n -use Psr\\Log\\LoggerInterface; \n use Symfony\\Component\\HttpClient\\Response\\MockResponse; \n use Symfony\\Component\\HttpClient\\Response\\ResponseStream; \n use Symfony\\Component\\HttpFoundation\\Request; \n @@ -39,7 +38,7 @@ class CachingHttpClient implements HttpClientInterface \n private $cache; \n private $defaultOptions = self::OPTIONS_DEFAULTS; \n - public function __construct(HttpClientInterface $client, StoreInterface $store, array $defaultOptions = [], LoggerInterface $logger = null) \n + public function __construct(HttpClientInterface $client, StoreInterface $store, array $defaultOptions = []) \n { \n if (!class_exists(HttpClientKernel::class)) { \n throw new \\LogicException(sprintf('Using \"%s\" requires that the HttpKernel component version 4.3 or higher is installed, try running \"composer require symfony/http-kernel:^4.3\".', __CLASS__));", "msg": "[HttpClient] remove unused argument"}
{"diff": "a / Response/CurlResponse.php \n  b / Response/CurlResponse.php \n@@ -167,6 +167,7 @@ final class CurlResponse implements ResponseInterface \n if (!\\in_array(curl_getinfo($this->handle, CURLINFO_PRIVATE), ['headers', 'content'], true)) { \n rewind($this->debugBuffer); \n $info['debug'] = stream_get_contents($this->debugBuffer); \n + curl_setopt($this->handle, CURLOPT_VERBOSE, false); \n fclose($this->debugBuffer); \n $this->debugBuffer = null; \n $this->finalInfo = $info;", "msg": "[HttpClient] fix unregistering the debug buffer when using curl"}
{"diff": "a / NativeHttpClient.php \n  b / NativeHttpClient.php \n@@ -203,7 +203,7 @@ final class NativeHttpClient implements HttpClientInterface, LoggerAwareInterfac \n ]; \n $proxy = self::getProxy($options['proxy'], $url); \n - $noProxy = $_SERVER['no_proxy'] ?? $_SERVER['NO_PROXY'] ?? ''; \n + $noProxy = $options['no_proxy'] ?? $_SERVER['no_proxy'] ?? $_SERVER['NO_PROXY'] ?? ''; \n $noProxy = $noProxy ? preg_split('/[\\s,]+/', $noProxy) : []; \n $resolveRedirect = self::createRedirectResolver($options, $host, $proxy, $noProxy, $info, $onProgress);", "msg": "[HttpClient] Fixed NO_PROXY option ignored in NativeHttpClient::request() method"}
{"diff": "a / Response/ResponseTrait.php \n  b / Response/ResponseTrait.php \n@@ -104,7 +104,6 @@ trait ResponseTrait \n if (null === $this->content) { \n $content = null; \n - $chunk = null; \n foreach (self::stream([$this]) as $chunk) { \n if (!$chunk->isLast()) {", "msg": "[4.3] Remove unused local variables"}
{"diff": "a / Internal/HttplugWaitLoop.php \n  b / Internal/HttplugWaitLoop.php \n@@ -72,7 +72,7 @@ final class HttplugWaitLoop \n goto check_duration; \n } \n - if ([$request, $promise] = $this->promisePool[$response] ?? null) { \n + if ([, $promise] = $this->promisePool[$response] ?? null) { \n unset($this->promisePool[$response]); \n $promise->resolve($this->createPsr7Response($response, true)); \n }", "msg": "[5.0] Remove some unused variables"}
{"diff": "a / Response/NativeResponse.php \n  b / Response/NativeResponse.php \n@@ -36,8 +36,6 @@ final class NativeResponse implements ResponseInterface, StreamableInterface \n private $remaining; \n private $buffer; \n private $multi; \n - private $debugBuffer; \n - private $shouldBuffer; \n private $pauseExpiry = 0; \n /**", "msg": "[HttpClient] Remove unused and redundant properties"}
{"diff": "a / CachingHttpClient.php \n  b / CachingHttpClient.php \n@@ -42,7 +42,7 @@ class CachingHttpClient implements HttpClientInterface, ResetInterface \n public function __construct(HttpClientInterface $client, StoreInterface $store, array $defaultOptions = []) \n { \n if (!class_exists(HttpClientKernel::class)) { \n - throw new \\LogicException(sprintf('Using \"%s\" requires that the HttpKernel component version 4.3 or higher is installed, try running \"composer require symfony/http-kernel:^4.3\".', __CLASS__)); \n + throw new \\LogicException(sprintf('Using \"%s\" requires that the HttpKernel component version 4.3 or higher is installed, try running \"composer require symfony/http-kernel:^5.4\".', __CLASS__)); \n } \n $this->client = $client;", "msg": "Improve recommendation message for \"composer req\""}
{"diff": "a / Response/HttplugPromise.php \n  b / Response/HttplugPromise.php \nnamespace Symfony\\Component\\HttpClient\\Response; \n -use function GuzzleHttp\\Promise\\promise_for; \n +use GuzzleHttp\\Promise\\Create; \n use GuzzleHttp\\Promise\\PromiseInterface as GuzzlePromiseInterface; \n use Http\\Promise\\Promise as HttplugPromiseInterface; \n use Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface; \n @@ -74,7 +74,7 @@ final class HttplugPromise implements HttplugPromiseInterface \n } \n return static function ($value) use ($callback) { \n - return promise_for($callback($value)); \n + return Create::promiseFor($callback($value)); \n }; \n } \n }", "msg": "[HttpClient] Remove deprecated usage of GuzzleHttp\\Promise\\promise_for"}
{"diff": "a / Tests/RetryableHttpClientTest.php \n  b / Tests/RetryableHttpClientTest.php \n@@ -225,4 +225,22 @@ class RetryableHttpClientTest extends TestCase \n $this->assertNotNull($delay); \n $this->assertSame((int) ($retryAfter * 1000), $delay); \n } \n + \n + public function testRetryOnErrorAssertContent() \n + { \n + $client = new RetryableHttpClient( \n + new MockHttpClient([ \n + new MockResponse('', ['http_code' => 500]), \n + new MockResponse('Test out content', ['http_code' => 200]), \n + ]), \n + new GenericRetryStrategy([500], 0), \n + 1 \n + ); \n + \n + $response = $client->request('GET', 'http://example.com/foo-bar'); \n + \n + self::assertSame(200, $response->getStatusCode()); \n + self::assertSame('Test out content', $response->getContent()); \n + self::assertSame('Test out content', $response->getContent(), 'Content should be buffered'); \n + } \n }", "msg": "[HttpClient] Add test case for seeking into the content of RetryableHttpClient responses"}
{"diff": "a / tests/NoMajorGlitchesTest.php \n  b / tests/NoMajorGlitchesTest.php \n@@ -29,6 +29,12 @@ class NoMajorGlitchesTest extends TestCase { \n return $items; \n } \n + // Light World \n + public function testLinksHouseCannotHaveGloves() { \n + $this->assertFalse($this->world->getLocation(\"[cave-040] Link's House\")->fill(Item::get('PowerGlove'), $this->allItems())); \n + $this->assertFalse($this->world->getLocation(\"[cave-040] Link's House\")->fill(Item::get('TitansMitt'), $this->allItems())); \n + } \n + \n // Death Mountain \n public function testDarkWorldEastDeathMountainCanNeverHaveTitansMitt() { \n $no_mitt = $this->allItemsExcept(['TitansMitt']);", "msg": "adding test\ntrying to trigger travis-ci"}
{"diff": "a / resources/views/randomizer.blade.php \n  b / resources/views/randomizer.blade.php \n@@ -585,8 +585,8 @@ var ROM = ROM || (function(blob, loaded_callback) { \n u_array[0xDD308 + i] = spr[0x7000 + i]; \n } \n resolve(this); \n - }); \n - }; \n + }.bind(this)); \n + }.bind(this); \n this.parsePatch = function(patch, progressCallback) { \n return new Promise(function(resolve, reject) {", "msg": "bulk seed generation\nfixes"}
{"diff": "a / app/Randomizer.php \n  b / app/Randomizer.php \n@@ -679,7 +679,7 @@ class Randomizer { \n \"saltations\", \"saltbushes\", \"saltcellar\", \"saltshaker\", \"salubrious\", \"sandgrouse\", \"sandlotter\", \n \"sandstorms\", \"sandwiched\", \"sauerkraut\", \"schipperke\", \"schismatic\", \"schizocarp\", \"schmalzier\", \n \"schmeering\", \"schmoosing\", \"shibboleth\", \"shovelnose\", \"sahananana\", \"sarararara\", \"salamander\", \n - \"sharshalah\", \"shahabadoo\", \n + \"sharshalah\", \"shahabadoo\", \"sassafrass\" \n ])); \n $rom->setKakarikoTownCredits(\"$name's homecoming\");", "msg": "Add a Saha name\nKliff mentioned \"Sassafrass\" and I noticed that it's not in the code as an option. This will add it."}
{"diff": "a / resources/views/custom/_switches.blade.php \n  b / resources/views/custom/_switches.blade.php \n@section('switches') \n +<div class=\"panel panel-success\"> \n + <div class=\"panel-heading\"> \n + <h3 class=\"panel-title\">Settings</h3> \n + </div> \n + <div class=\"panel-body\"> \n <div class=\"col-md-6 pb-5\"> \n <input id=\"cust-prize-crossworld\" type=\"checkbox\" name=\"data[alttp.custom.prize.crossWorld]\" \n class=\"custom-switch\" value=\"true\" checked data-toggle=\"toggle\" data-on=\"Yes\" data-off=\"No\" data-size=\"small\"> \n <input id=\"custom-rupoor-deduct\" type=\"number\" class=\"form-control custom-value\" placeholder=\"rupees\" name=\"data[alttp.custom.item.value.Rupoor]\" /> \n </div> \n </div> \n + </div> \n +</div> \n <script> \n $(function() { \n // Custom switch dependencies", "msg": "move settings into a panel to be more like all the other sections"}
{"diff": "a / resources/views/about.blade.php \n  b / resources/views/about.blade.php \n</div> \n <h1>Where do I download this?</h1> \n <div class=\"well\"> \n - <p>The VT Randomizer is a web based ROM patcher. Simply upload your ROM of the base game and the website does the all the work, \n + <p>The VT Randomizer is a web based ROM patcher. Simply provide your ROM of the base game and the website does the all the work, \n giving you back a fully shuffled and guaranteed beatable ROM. With the web based ROM patcher, you can always be sure you \n have the latest features as soon as they're released.</p> \n </div>", "msg": "remove upload reference, provide is better"}
{"diff": "a / app/Location/Npc/Zora.php \n  b / app/Location/Npc/Zora.php \n@@ -129,7 +129,7 @@ class Zora extends Npc { \n case Item::get('Heart'): \n return \"affection for sale\"; \n case Item::get('Arrow'): \n - return \"sewing kit for sale\"; \n + return \"sewing needle for sale\"; \n case Item::get('TenArrows'): \n return \"sewing kit for sale\"; \n case Item::get('SmallMagic'):", "msg": "Single arrow \"sewing needle for sale\"\nIt's singular."}
{"diff": "a / app/Randomizer.php \n  b / app/Randomizer.php \n@@ -232,6 +232,10 @@ class Randomizer { \n array_push($advancement_items, array_pop($nice_items_swords)); \n } \n + if ($this->config('region.takeAnys', false)) { \n + array_pop($nice_items_swords); \n + } \n + \n $nice_items = array_merge($nice_items, $nice_items_swords); \n } \n // put 1 bottle back", "msg": "remove a sword if we are placing one with old man"}
{"diff": "a / app/Enemizer.php \n  b / app/Enemizer.php \n@@ -86,7 +86,7 @@ class Enemizer { \n $system = php_uname('s') == 'Darwin' ? 'osx' : 'linux'; \n $options = [ \n - \"RandomizeEnemies\" => $this->settings['enemy'] ?? true, \n + \"RandomizeEnemies\" => $this->settings['enemy'] ?? false, \n \"RandomizeEnemiesType\" => 3, \n \"RandomizeBushEnemyChance\" => true, \n \"RandomizeEnemyHealthRange\" => (bool) ($this->settings['enemy_health'] ?? false), \n @@ -153,7 +153,7 @@ class Enemizer { \n \"BeesLevel\" => 3, \n \"RandomizeTileTrapPattern\" => true, \n \"RandomizeTileTrapFloorTile\" => false, \n - \"AllowKillableThief\" => $this->settings['enemy'] ?? true, \n + \"AllowKillableThief\" => $this->settings['enemy'] ?? false, \n \"RandomizeSpriteOnHit\" => false, \n \"DebugMode\" => false, \n \"DebugForceEnemy\" => true,", "msg": "default to enemy randomization off, needed for standard"}
{"diff": "a / app/Region/Standard/ThievesTown.php \n  b / app/Region/Standard/ThievesTown.php \n@@ -81,11 +81,6 @@ class ThievesTown extends Region \n return $items->has('Hammer') && $items->has('KeyD4') && $items->has('BigKeyD4'); \n })->setAlwaysAllow(function ($item, $items) { \n - logger()->error(json_encode([ \n - $this->world->config('accessibility'), \n - $item->getName(), \n - $this->world->config('accessibility') !== 'locations' && $item == Item::get('KeyD4', $this->world) && $items->has('Hammer'), \n - ])); \n return $this->world->config('accessibility') !== 'locations' && $item == Item::get('KeyD4', $this->world) && $items->has('Hammer'); \n });", "msg": "remove errant debug log"}
{"diff": "a / app/Boss.php \n  b / app/Boss.php \n@@ -85,7 +85,8 @@ class Boss \n }), \n new static(\"Helmasaur King\", \"Helmasaur\", function ($locations, $items) use ($world) { \n return ($items->canBombThings() || $items->has('Hammer')) \n - && ($items->hasSword(2) || $items->canShootArrows($world)); \n + && ($items->hasSword(2) || $items->canShootArrows($world) \n + || ($world->config('itemPlacement') !== 'basic' && $items->hasSword())); \n }), \n new static(\"Arrghus\", \"Arrghus\", function ($locations, $items) use ($world) { \n return ($world->config('itemPlacement') !== 'basic' || $world->config('mode.weapons') === 'swordless' || $items->hasSword(2))", "msg": "Allow killing Helma with fighter's sword, for advanced item placement."}
{"diff": "a / routes/console.php \n  b / routes/console.php \n@@ -92,6 +92,8 @@ Artisan::command('alttp:dailies {days=7}', function ($days) { \n } \n } \n + $rom->setTournamentType('standard'); \n + \n $patch = $rom->getWriteLog(); \n $spoiler = $world->getSpoiler([ \n 'name' => 'Daily Challenge: ' . $date->toFormattedDateString(),", "msg": "set tournament flag on dailies - fixes"}
{"diff": "a / app/Console/Commands/Randomize.php \n  b / app/Console/Commands/Randomize.php \n@@ -26,6 +26,7 @@ class Randomize extends Command \n . ' {--unrandomized : do not apply randomization to the rom}' \n . ' {--spoiler : generate a spoiler file}' \n . ' {--heartbeep=half : set heart beep speed}' \n + . ' {--heartcolor=red : set heart color}' \n . ' {--skip-md5 : do not validate md5 of base rom}' \n . ' {--tournament : enable tournament mode}' \n . ' {--bulk=1 : generate multiple roms}' \n @@ -124,6 +125,10 @@ class Randomize extends Command \n return 3; \n } \n + if (is_string($this->option('heartcolor'))) { \n + $rom->setHeartColors($this->option('heartcolor')); \n + } \n + \n if (is_string($this->option('heartbeep'))) { \n $rom->setHeartBeepSpeed($this->option('heartbeep')); \n }", "msg": "Implemented CLI support for setting heart color."}
{"diff": "a / config/item.php \n  b / config/item.php \nreturn [ \n 'advancement' => [ \n 'L1Sword' => 0, \n + //'L1SwordAndShield' => 0, // This still downgrades your sword - don't allow it as a random item unless that's fixed \n 'MasterSword' => 0, \n 'ProgressiveSword' => 4, \n 'BossHeartContainer' => 10, \n @@ -15,6 +16,7 @@ return [ \n 'BottleWithFairy' => 0, \n 'Bombos' => 1, \n 'BookOfMudora' => 1, \n + 'Bow' => 0, \n 'BowAndArrows' => 0, \n 'CaneOfSomaria' => 1, \n 'Cape' => 1, \n @@ -40,6 +42,7 @@ return [ \n 'SilverArrowUpgrade' => 0, \n 'ProgressiveGlove' => 2, \n 'ProgressiveBow' => 2, \n + 'Triforce' => 0, \n 'TriforcePiece' => 0, \n 'PowerStar' => 0, \n 'BugCatchingNet' => 1,", "msg": "Add Bow and Triforce to advancement items, so they can be randomly placed."}
{"diff": "a / app/Jobs/SendPatchToDisk.php \n  b / app/Jobs/SendPatchToDisk.php \n@@ -73,7 +73,7 @@ class SendPatchToDisk implements ShouldQueue \n $json = json_encode([ \n 'logic' => $this->seed->logic, \n - 'patch' => json_decode($this->seed->patch), \n + 'patch' => patch_merge_minify(json_decode($this->seed->patch)), \n 'spoiler' => $return_spoiler, \n 'hash' => $this->seed->hash, \n 'size' => $spoiler['meta']['size'] ?? 2,", "msg": "merge and minify patch saved to s3/disk"}
{"diff": "a / bin/command.php \n  b / bin/command.php \n@@ -565,7 +565,7 @@ EOT; \n $ret['description'] = str_replace( '\\/', '/', trim( $ret['description'], PHP_EOL ) ); \n $bits = explode( PHP_EOL, $ret['description'] ); \n $short_desc = array( array_shift( $bits ) ); \n - if ( !empty( $bits[0] ) ) { \n + while ( isset( $bits[0] ) && ! empty( $bits[0] ) ) { \n $short_desc[] = array_shift( $bits ); \n } \n $ret['short_description'] = trim( implode( PHP_EOL, $short_desc ), PHP_EOL );", "msg": "Update short description parsing to for unlimited lines"}
{"diff": "a / Authorization/ExpressionLanguage.php \n  b / Authorization/ExpressionLanguage.php \nnamespace Symfony\\Component\\Security\\Core\\Authorization; \n use Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage as BaseExpressionLanguage; \n -use Symfony\\Component\\ExpressionLanguage\\ParserCache\\ParserCacheInterface; \n /** \n * Adds some function to the default ExpressionLanguage. \n @@ -23,7 +22,10 @@ use Symfony\\Component\\ExpressionLanguage\\ParserCache\\ParserCacheInterface; \n */ \n class ExpressionLanguage extends BaseExpressionLanguage \n { \n - public function __construct(ParserCacheInterface $cache = null, array $providers = array()) \n + /** \n + * {@inheritdoc} \n + */ \n + public function __construct($cache = null, array $providers = array()) \n { \n // prepend the default provider to let users override it easily \n array_unshift($providers, new ExpressionLanguageProvider());", "msg": "[DI][Security] Prevent unwanted deprecation notices when using Expression Languages"}
{"diff": "a / Security.php \n  b / Security.php \n@@ -17,8 +17,10 @@ use Symfony\\Component\\Security\\Core\\User\\UserInterface; \n /** \n * Helper class for commonly-needed security tasks. \n + * \n + * @final \n */ \n -final class Security \n +class Security \n { \n const ACCESS_DENIED_ERROR = '_security.403_error'; \n const AUTHENTICATION_ERROR = '_security.last_error';", "msg": "use final annotation to allow mocking the class"}
{"diff": "a / Encoder/EncoderFactory.php \n  b / Encoder/EncoderFactory.php \n@@ -78,9 +78,7 @@ class EncoderFactory implements EncoderFactoryInterface \n throw new \\InvalidArgumentException(sprintf('\"arguments\" must be set in %s.', json_encode($config))); \n } \n - $reflection = new \\ReflectionClass($config['class']); \n - \n - $encoder = $reflection->newInstanceArgs($config['arguments']); \n + $encoder = new $config['class'](...$config['arguments']); \n if ($isExtra || !\\in_array($config['class'], [NativePasswordEncoder::class, SodiumPasswordEncoder::class], true)) { \n return $encoder;", "msg": "[Security] Avoid unnecessary usage of Reflection"}
{"diff": "a / Security.php \n  b / Security.php \n@@ -13,6 +13,7 @@ namespace Symfony\\Component\\Security\\Core; \n use Psr\\Container\\ContainerInterface; \n use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface; \n +use Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface; \n use Symfony\\Component\\Security\\Core\\User\\UserInterface; \n /** \n @@ -20,7 +21,7 @@ use Symfony\\Component\\Security\\Core\\User\\UserInterface; \n * \n * @final \n */ \n -class Security \n +class Security implements AuthorizationCheckerInterface \n { \n const ACCESS_DENIED_ERROR = '_security.403_error'; \n const AUTHENTICATION_ERROR = '_security.last_error';", "msg": "[Security] class Security implements AuthorizationCheckerInterface\nThe class has the method of AuthorizationCheckerInterface already."}
{"diff": "a / Exception/TooManyLoginAttemptsAuthenticationException.php \n  b / Exception/TooManyLoginAttemptsAuthenticationException.php \n@@ -33,6 +33,7 @@ class TooManyLoginAttemptsAuthenticationException extends AuthenticationExceptio \n { \n return [ \n '%minutes%' => $this->threshold, \n + '%count%' => (int) $this->threshold, \n ]; \n }", "msg": "Provide count argument for TooManyLoginAttemptsAuthenticationException to be able to translate in plural way"}
{"diff": "a / Tests/Validator/Constraints/UserPasswordValidatorTest.php \n  b / Tests/Validator/Constraints/UserPasswordValidatorTest.php \n@@ -45,7 +45,7 @@ abstract class UserPasswordValidatorTest extends ConstraintValidatorTestCase \n */ \n protected $hasherFactory; \n - protected function createValidator(): ConstraintValidatorInterface \n + protected function createValidator(): UserPasswordValidator \n { \n return new UserPasswordValidator($this->tokenStorage, $this->hasherFactory); \n }", "msg": "[Validator] Improve return types in tests"}
{"diff": "a / .devilbox/www/include/lib/container/Memcd.php \n  b / .devilbox/www/include/lib/container/Memcd.php \n@@ -111,6 +111,9 @@ class Memcd extends BaseClass implements BaseInterface \n } \n $this->_memcached->getDelayed($keys); \n $store = $this->_memcached->fetchAll(); \n + if (!is_array($store)) { \n + $store = array(); \n + } \n } \n } \n return $store;", "msg": "Handle false values retrieved from Memcached"}
{"diff": "a / src/Entity/Refund.php \n  b / src/Entity/Refund.php \n@@ -21,7 +21,7 @@ class Refund implements RefundInterface \n /** @var int */ \n private $refundedUnitId; \n - /** @var RefundType */ \n + /** @var string */ \n private $type; \n public function __construct(string $orderNumber, int $amount, int $refundedUnitId, RefundType $type) \n @@ -29,7 +29,7 @@ class Refund implements RefundInterface \n $this->orderNumber = $orderNumber; \n $this->amount = $amount; \n $this->refundedUnitId = $refundedUnitId; \n - $this->type = $type; \n + $this->type = $type->__toString(); \n } \n public function getId(): ?int \n @@ -54,6 +54,6 @@ class Refund implements RefundInterface \n public function getType(): RefundType \n { \n - return $this->type; \n + return new RefundType($this->type); \n } \n }", "msg": "[HotFix] Return proper type in Refund type"}
{"diff": "a / migrations/Version20190517064223.php \n  b / migrations/Version20190517064223.php \n@@ -17,7 +17,7 @@ final class Version20190517064223 extends AbstractMigration \n // this up() migration is auto-generated, please modify it to your needs \n $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \\'mysql\\'.'); \n - $this->addSql('ALTER TABLE sylius_refund_refund CHANGE type type VARCHAR(256) COMMENT \"sylius_refund_refund_type\" NOT NULL COMMENT \\'(DC2Type:sylius_refund_refund_type)\\''); \n + $this->addSql('ALTER TABLE sylius_refund_refund CHANGE type type VARCHAR(256) NOT NULL COMMENT \\'(DC2Type:sylius_refund_refund_type)\\''); \n } \n public function down(Schema $schema): void", "msg": "Migrations: fix compatibility with MySQL 8"}
{"diff": "a / src/Console/Make/MakeProjectorCommand.php \n  b / src/Console/Make/MakeProjectorCommand.php \n@@ -17,7 +17,7 @@ class MakeProjectorCommand extends GeneratorCommand \n { \n parent::handle(); \n - if (! $this->option('sync')) { \n + if (! $this->option('qeueud')) { \n return; \n }", "msg": "Check 'queued' option instead of 'sync'\nThe 'sync' option doesn't exist."}
{"diff": "a / src/AggregateRoot.php \n  b / src/AggregateRoot.php \n@@ -13,6 +13,10 @@ abstract class AggregateRoot \n /** @var array */ \n private $recordedEvents = []; \n + /** \n + * @param string $uuid \n + * @return static \n + */ \n public static function retrieve(string $uuid): AggregateRoot \n { \n $aggregateRoot = (new static()); \n @@ -22,6 +26,10 @@ abstract class AggregateRoot \n return $aggregateRoot->reconstituteFromEvents(); \n } \n + /** \n + * @param ShouldBeStored $domainEvent \n + * @return static \n + */ \n public function recordThat(ShouldBeStored $domainEvent): AggregateRoot \n { \n $this->recordedEvents[] = $domainEvent; \n @@ -31,6 +39,9 @@ abstract class AggregateRoot \n return $this; \n } \n + /** \n + * @return static \n + */ \n public function persist(): AggregateRoot \n { \n $storedEvents = call_user_func(", "msg": "Provide docblocks to AggregateRoot class\nThis fixes the \"method not found\" errors in IDEs and static analysis\ntools like phpstan."}
{"diff": "a / src/AggregateRoot.php \n  b / src/AggregateRoot.php \n@@ -29,7 +29,7 @@ abstract class AggregateRoot \n */ \n public static function retrieve(string $uuid): self \n { \n - $aggregateRoot = resolve(static::class); \n + $aggregateRoot = app(static::class); \n $aggregateRoot->uuid = $uuid;", "msg": "lumen support\n'resolve()' helper does not exist in Lumen."}
{"diff": "a / src/StoredEvents/Models/EloquentStoredEventQueryBuilder.php \n  b / src/StoredEvents/Models/EloquentStoredEventQueryBuilder.php \n@@ -36,4 +36,18 @@ class EloquentStoredEventQueryBuilder extends Builder \n return $this; \n } \n + \n + public function whereProperty(string $property, mixed $value): self \n + { \n + $this->whereJsonContains(column: \"event_properties->{$property}\", value: $value); \n + \n + return $this; \n + } \n + \n + public function wherePropertyIsNot(string $property, mixed $value): self \n + { \n + $this->whereJsonDoesntContain(column: \"event_properties->{$property}\", value: $value); \n + \n + return $this; \n + } \n }", "msg": "Adds query helpers for event properties."}
{"diff": "a / tests/EventSerializers/EventSerializerTest.php \n  b / tests/EventSerializers/EventSerializerTest.php \n@@ -66,15 +66,9 @@ class EventSerializerTest extends TestCase \n $array = json_decode($json, true); \n - $this->assertEquals([ \n - 'account' => [ \n - 'class' => get_class($account), \n - 'id' => 1, \n - 'relations' => [], \n - 'connection' => $this->dbDriver(), \n - ], \n - 'amount' => 1234, \n - ], $array); \n + $this->assertEquals(get_class($account), $array['account']['class'] ?? null); \n + $this->assertEquals(1, $array['account']['id'] ?? null); \n + $this->assertEquals(1234, $array['amount'] ?? null); \n } \n /** @test */", "msg": "Update assertsion in EventSerializerTest\nThis makes it more robust across multiple Laravel versions"}
{"diff": "a / src/Exception/OAuthServerException.php \n  b / src/Exception/OAuthServerException.php \n@@ -105,7 +105,10 @@ class OAuthServerException extends \\Exception \n public static function invalidScope($scope, $redirectUri = null) \n { \n $errorMessage = 'The requested scope is invalid, unknown, or malformed'; \n - $hint = sprintf('Check the `%s` scope', $scope); \n + $hint = sprintf( \n + 'Check the `%s` scope', \n + htmlspecialchars($scope, ENT_QUOTES, 'UTF-8', false) \n + ); \n return new static($errorMessage, 5, 'invalid_scope', 400, $hint, $redirectUri); \n }", "msg": "Escape scope parameter to reduce pontential XSS vector"}
{"diff": "a / src/CryptKey.php \n  b / src/CryptKey.php \n@@ -50,12 +50,13 @@ class CryptKey \n // Attempt to correct the permissions \n if (chmod($keyPath, 0600) === false) { \n // @codeCoverageIgnoreStart \n - throw new \\LogicException( \n + trigger_error( \n sprintf( \n 'Key file \"%s\" permissions are not correct, should be 600 instead of %s, unable to automatically resolve the issue', \n $keyPath, \n $keyPathPerms \n - ) \n + ), \n + E_USER_NOTICE \n ); \n // @codeCoverageIgnoreEnd \n }", "msg": "Trigger E_USER_NOTICE instead of throwing an exception if key cannot be chmod to 600"}
{"diff": "a / src/Exception/OAuthServerException.php \n  b / src/Exception/OAuthServerException.php \n@@ -195,6 +195,21 @@ class OAuthServerException extends \\Exception \n ); \n } \n + /** \n + * Missing scope error \n + * \n + * @param null|string $redirectUri A HTTP URI to redirect the user back to \n + * \n + * @return static \n + */ \n + public static function missingScope($redirectUri = null) \n + { \n + $errorMessage = 'No scope was specified for this request'; \n + $hint = 'Set a default scope on the server if no scopes are passed in the request'; \n + \n + return new static($errorMessage, 11, 'missing_scope', 400, $hint, $redirectUri); \n + } \n + \n /** \n * @return string \n */", "msg": "Add an exception for a missing scope"}
{"diff": "a / src/Grant/ImplicitGrant.php \n  b / src/Grant/ImplicitGrant.php \n@@ -26,12 +26,19 @@ class ImplicitGrant extends AbstractAuthorizeGrant \n */ \n private $accessTokenTTL; \n + /** \n + * @var string \n + */ \n + private $queryDelimiter; \n + \n /** \n * @param \\DateInterval $accessTokenTTL \n + * @param string $queryDelimiter \n */ \n - public function __construct(\\DateInterval $accessTokenTTL) \n + public function __construct(\\DateInterval $accessTokenTTL, $queryDelimiter = '#') \n { \n $this->accessTokenTTL = $accessTokenTTL; \n + $this->queryDelimiter = $queryDelimiter; \n } \n /** \n @@ -204,7 +211,7 @@ class ImplicitGrant extends AbstractAuthorizeGrant \n 'expires_in' => $accessToken->getExpiryDateTime()->getTimestamp() - (new \\DateTime())->getTimestamp(), \n 'state' => $authorizationRequest->getState(), \n ], \n - '#' \n + $this->queryDelimiter \n ) \n );", "msg": "Ability to specify query delimiter, such as `?` instead of the hard-coded `#`"}
{"diff": "a / examples/public/api.php \n  b / examples/public/api.php \n@@ -49,16 +49,18 @@ $app->get( \n ], \n ]; \n + $totalUsers = count($users); \n + \n // If the access token doesn't have the `basic` scope hide users' names \n if (in_array('basic', $request->getAttribute('oauth_scopes')) === false) { \n - for ($i = 0; $i < count($users); $i++) { \n + for ($i = 0; $i < $totalUsers; $i++) { \n unset($users[$i]['name']); \n } \n } \n // If the access token doesn't have the `email` scope hide users' email addresses \n if (in_array('email', $request->getAttribute('oauth_scopes')) === false) { \n - for ($i = 0; $i < count($users); $i++) { \n + for ($i = 0; $i < $totalUsers; $i++) { \n unset($users[$i]['email']); \n } \n }", "msg": "Fixed count placement to make code more efficient as per scrutinizer feedback"}
{"diff": "a / examples/public/implicit.php \n  b / examples/public/implicit.php \n@@ -41,7 +41,6 @@ $app = new App([ \n $privateKeyPath, \n 'lxZFUEsBCJ2Yb14IF2ygAHI5N4+ZAUXXaSeeJm6+twsUmIen' \n ); \n - $server->setEncryptionKey('lxZFUEsBCJ2Yb14IF2ygAHI5N4+ZAUXXaSeeJm6+twsUmIen'); \n // Enable the implicit grant on the server with a token TTL of 1 hour \n $server->enableGrantType(new ImplicitGrant(new \\DateInterval('PT1H')));", "msg": "Removing call to setEncryptionKey as no such function on the authorization server"}
{"diff": "a / tests/Grant/AuthCodeGrantTest.php \n  b / tests/Grant/AuthCodeGrantTest.php \n@@ -48,7 +48,7 @@ class AuthCodeGrantTest extends TestCase \n { \n $this->cryptStub = new CryptTraitStub; \n $this->codeVerifier = rtrim(strtr(base64_encode(random_bytes(32)), '+/', '-_'), '='); \n - $this->codeChallenge = rtrim(strtr(base64_encode(hash('sha256',$this->codeVerifier, true)), '+/', '-_'), '='); \n + $this->codeChallenge = hash('sha256', strtr(rtrim(base64_encode($this->codeVerifier), '='), '+/', '-_')); \n } \n public function testGetIdentifier()", "msg": "Update statement to generate codeChallenge in AuthCodeGrantTest"}
{"diff": "a / src/CryptKey.php \n  b / src/CryptKey.php \n@@ -48,7 +48,7 @@ class CryptKey \n if ($keyPermissionsCheck === true) { \n // Verify the permissions of the key \n $keyPathPerms = decoct(fileperms($keyPath) & 0777); \n - if (in_array($keyPathPerms, ['600', '660'], true) === false) { \n + if (in_array($keyPathPerms, ['400', '440', '600', '660'], true) === false) { \n trigger_error(sprintf( \n 'Key file \"%s\" permissions are not correct, should be 600 or 660 instead of %s', \n $keyPath,", "msg": "Allow some more secure options without tsk-tsk."}
{"diff": "a / src/Exception/OAuthServerException.php \n  b / src/Exception/OAuthServerException.php \n@@ -92,7 +92,7 @@ class OAuthServerException extends \\Exception \n public static function unsupportedGrantType() \n { \n $errorMessage = 'The authorization grant type is not supported by the authorization server.'; \n - $hint = 'Check the `grant_type` parameter'; \n + $hint = 'Check that all required parameters have been provided'; \n return new static($errorMessage, 2, 'unsupported_grant_type', 400, $hint); \n }", "msg": "Change hint so it applies to both the auth and access token requests"}
{"diff": "a / tests/ExceptionTest.php \n  b / tests/Exception/OAuthServerExceptionTest.php \n<?php \n -namespace LeagueTests\\Utils; \n +namespace LeagueTests\\Exception; \n use League\\OAuth2\\Server\\Exception\\OAuthServerException; \n +use PHPUnit\\Framework\\TestCase; \n -class ExceptionTest extends \\PHPUnit_Framework_TestCase \n +class OAuthServerExceptionTest extends TestCase \n { \n public function testHasRedirect() \n { \n - $exceptionWithoutRedirect = OAuthServerException::accessDenied('Some hint'); \n - $this->assertFalse($exceptionWithoutRedirect->hasRedirect()); \n - \n $exceptionWithRedirect = OAuthServerException::accessDenied('some hint', 'https://example.com/error'); \n + \n $this->assertTrue($exceptionWithRedirect->hasRedirect()); \n } \n + \n + public function testDoesNotHaveRedirect() \n + { \n + $exceptionWithoutRedirect = OAuthServerException::accessDenied('Some hint'); \n + \n + $this->assertFalse($exceptionWithoutRedirect->hasRedirect()); \n + } \n }", "msg": "Move OAuthServerExceptionTest to appropriate folder"}
{"diff": "a / src/Grant/AuthCodeGrant.php \n  b / src/Grant/AuthCodeGrant.php \n@@ -52,7 +52,7 @@ class AuthCodeGrant extends AbstractAuthorizeGrant \n /** \n * Disable the requirement for a code challenge for public clients. \n */ \n - public function disableCodeChallengeForPublicClients() \n + public function disableRequireCodeChallengeForPublicClients() \n { \n $this->requireCodeChallengeForPublicClients = false; \n }", "msg": "Change function name to be more explicit"}
{"diff": "a / src/Grant/AuthCodeGrant.php \n  b / src/Grant/AuthCodeGrant.php \n@@ -163,7 +163,7 @@ class AuthCodeGrant extends AbstractAuthorizeGrant \n /** \n * Validate the authorization code. \n * \n - * @param object $authCodePayload \n + * @param \\stdClass $authCodePayload \n * @param ClientEntityInterface $client \n * @param ServerRequestInterface $request \n */ \n @@ -198,7 +198,7 @@ class AuthCodeGrant extends AbstractAuthorizeGrant \n /** \n * Get scopes from the auth code payload. \n * \n - * @param object $authCodePayload \n + * @param \\stdClass $authCodePayload \n * \n * @return array \n */", "msg": "Chaneg param types to satisfy PHPStan"}
{"diff": "a / src/CryptKey.php \n  b / src/CryptKey.php \n@@ -80,12 +80,6 @@ class CryptKey \n return 'file://' . $keyPath; \n } \n - if (!touch($keyPath)) { \n - // @codeCoverageIgnoreStart \n - throw new RuntimeException(sprintf('\"%s\" key file could not be created', $keyPath)); \n - // @codeCoverageIgnoreEnd \n - } \n - \n if (file_put_contents($keyPath, $key) === false) { \n // @codeCoverageIgnoreStart \n throw new RuntimeException(sprintf('Unable to write key file to temporary directory \"%s\"', $tmpDir));", "msg": "Remove touch function as not required"}
{"diff": "a / Jackett/Jackett.php \n  b / Jackett/Jackett.php \n<?php namespace App\\SupportedApps\\Jackett; \n -class Jackett extends \\App\\SupportedApps { \n - \n +class Jackett extends \\App\\SupportedApps implements \\App\\SearchInterface { \n + public $type = 'external'; // Whether to go to the external site or display results locally \n + public function getResults($query, $provider) \n + { \n + $url = rtrim($provider->url, '/'); \n + $q = urlencode($query); \n + return redirect($url.'#search='.$q); \n + } \n }", "msg": "Improve Jackett as a Search Interface"}
{"diff": "a / qBittorrent/qBittorrent.php \n  b / qBittorrent/qBittorrent.php \n@@ -28,8 +28,8 @@ class qBittorrent extends \\App\\SupportedApps implements \\App\\EnhancedApps { \n public function login() \n { \n - $username = $this->config->username; \n - $password = $this->config->password; \n + $username = urlencode($this->config->username); \n + $password = urlencode($this->config->password); \n $attrs = [ \n 'body' => 'username='.$username.'&password='.$password, \n 'cookies' => $this->jar,", "msg": "urlencode qBittorrent login details\nThis fixes logins failing when using login credentials containing\nspecial special characters (such as a \" or /)."}
{"diff": "a / Plex/Plex.php \n  b / Plex/Plex.php \n@@ -45,8 +45,11 @@ class Plex extends \\App\\SupportedApps implements \\App\\EnhancedApps { \n public function url($endpoint) \n { \n $url = parse_url(parent::normaliseurl($this->config->url)); \n + $scheme = $url['scheme']; \n $domain = $url['host']; \n - $api_url = \"http://\".$domain.\":32400\".$endpoint.\"?X-Plex-Token=\".$this->config->token; \n + $port = isset($url['port']) ? $url['port'] : '32400'; \n + $api_url = $scheme.\"://\".$domain.\":\".$port.$endpoint.\"?X-Plex-Token=\".$this->config->token; \n return $api_url; \n + \n } \n }", "msg": "Allow scheme and port to be specified for Plex"}
{"diff": "a / Jellyfin/Jellyfin.php \n  b / Jellyfin/Jellyfin.php \n@@ -9,14 +9,14 @@ class Jellyfin extends \\App\\SupportedApps implements \\App\\EnhancedApps { \n public function test() \n { \n - $test = parent::appTest($this->url('System/Info'), $this->getAttrs()); \n + $test = parent::appTest($this->url('System/Info/Public'), $this->getAttrs()); \n echo $test->status; \n } \n public function livestats() \n { \n $status = 'inactive'; \n - $res = parent::execute($this->url('/emby/Items/Counts'), $this->getAttrs()); \n + $res = parent::execute($this->url('Items/Counts'), $this->getAttrs()); \n $result = json_decode($res->getBody()); \n $details = ['visiblestats'=>[]]; \n foreach($this->config->availablestats as $stat) {", "msg": "Jellyfin API Update\nAlso includes trailing slash fix from"}
{"diff": "a / Sonarr/Sonarr.php \n  b / Sonarr/Sonarr.php \n@@ -36,7 +36,7 @@ class Sonarr extends \\App\\SupportedApps implements \\App\\EnhancedApps { \n if($missing || $queue) { \n $data['missing'] = $missing->totalRecords ?? 0; \n - $data['queue'] = count($queue) ?? 0; \n + $data['queue'] = $queue->totalRecords ?? 0; \n } \n return parent::getLiveStats($status, $data); \n @@ -45,7 +45,7 @@ class Sonarr extends \\App\\SupportedApps implements \\App\\EnhancedApps { \n public function url($endpoint) \n { \n - $api_url = parent::normaliseurl($this->config->url).'api/'.$endpoint.'?apikey='.$this->config->apikey; \n + $api_url = parent::normaliseurl($this->config->url).'api/v3/'.$endpoint.'?apikey='.$this->config->apikey; \n return $api_url; \n } \n } \n \\ No newline at end of file", "msg": "Dropped legacy API endpoint and added support for v3 API"}
{"diff": "a / Sonarr/Sonarr.php \n  b / Sonarr/Sonarr.php \n@@ -45,7 +45,7 @@ class Sonarr extends \\App\\SupportedApps implements \\App\\EnhancedApps { \n public function url($endpoint) \n { \n - $api_url = parent::normaliseurl($this->config->url).'api/v3/'.$endpoint.'?apikey='.$this->config->apikey; \n + $api_url = parent::normaliseurl($this->config->url).'api/v3/'.$endpoint.'?sortKey=series.title&apikey='.$this->config->apikey; \n return $api_url; \n } \n } \n \\ No newline at end of file", "msg": "Adding sortKey parameter to URL call\nThis allows the API to return a results again instead of an error."}
{"diff": "a / None \n  b / src/EventListener/AccessToken/SHA256.php \n+<?php \n +/** \n + * This file is part of the Imbo package \n + * \n + * (c) Christer Edvartsen <cogo@starzinger.net> \n + * \n + * For the full copyright and license information, please view the LICENSE file that was \n + * distributed with this source code. \n + */ \n + \n +namespace Imbo\\EventListener\\AccessToken; \n + \n +/** \n + * Implementation of the default SHA256 access token generator \n + * \n + * @author Mats Lindh <mats@lindh.no> \n + * @package AccessToken \n + */ \n +class SHA256 extends AccessTokenGenerator { \n + public function generateSignature($data, $privateKey) { \n + return hash_hmac('sha256', $data, $privateKey); \n + } \n +} \n \\ No newline at end of file", "msg": "Implement default access token algorithm as an access token generator"}
{"diff": "a / src/EventListener/AccessToken/SHA256.php \n  b / src/EventListener/AccessToken/SHA256.php \nnamespace Imbo\\EventListener\\AccessToken; \n /** \n - * Implementation of the default SHA256 access token generator \n + * Implementation of the default SHA256 access token generator (HMAC-ed with the private key) \n * \n * @author Mats Lindh <mats@lindh.no> \n * @package AccessToken \n */ \n class SHA256 extends AccessTokenGenerator { \n - public function generateSignature($data, $privateKey) { \n + /** \n + * {@inheritdoc} \n + */ \n + public function generateSignature($argumentKey, $data, $privateKey) { \n return hash_hmac('sha256', $data, $privateKey); \n } \n } \n \\ No newline at end of file", "msg": "Update SHA256 generator with argumentKey parameter"}
{"diff": "a / src/EventListener/AccessToken/AccessTokenInterface.php \n  b / src/EventListener/AccessToken/AccessTokenInterface.php \nnamespace Imbo\\EventListener\\AccessToken; \n /** \n - * Abstract class for Access Token Generation \n + * Interface for Access Token Generation \n * \n * @author Mats Lindh <mats@lindh.no> \n * @package AccessToken \n */ \n interface AccessTokenInterface { \n - public function generateSignature($data, $privateKey); \n - public function getArgumentKey(); \n + /** \n + * @param $argumentKey string The URL argument used for key comparison \n + * @param $data string The data to be signed \n + * @param $privateKey string The private key used to sign the data \n + * @return string The generated signature from the parameters given \n + */ \n + public function generateSignature($argumentKey, $data, $privateKey); \n + \n + /** \n + * @return array<string> The defined argument keys handled by this generator \n + */ \n + public function getArgumentKeys(); \n }", "msg": "Add argument key name and pluralize get method in AccessToken interface"}
{"diff": "a / src/Image/LoaderManager.php \n  b / src/Image/LoaderManager.php \n@@ -23,7 +23,7 @@ use Imbo\\Exception\\InvalidArgumentException; \n * if the image is determined to be invalid or damaged. \n * \n * @author Mats Lindh <mats@lindh.no> \n - * @package Exceptions \n + * @package Image \n */ \n class LoaderManager { \n protected $loaders = [];", "msg": "Use correct package for LoaderManager"}
{"diff": "a / src/Image/ImagePreparation.php \n  b / src/Image/ImagePreparation.php \n@@ -91,10 +91,12 @@ class ImagePreparation implements ListenerInterface { \n throw $e; \n } \n + $outputConverterManager = $event->getOutputConverterManager(); \n + \n // Store relevant information in the image instance and attach it to the request \n $image = new Image(); \n $image->setMimeType($mime) \n - ->setExtension(Image::getFileExtension($mime)) \n + ->setExtension($outputConverterManager->getExtensionFromMimetype($mime)) \n ->setBlob($imageBlob) \n ->setWidth($size['width']) \n ->setHeight($size['height'])", "msg": "Use outputconverter to resolve extension from mimetype"}
{"diff": "a / src/Image/OutputConverter/Basic.php \n  b / src/Image/OutputConverter/Basic.php \n@@ -26,7 +26,7 @@ class Basic implements OutputConverterInterface { \n ], \n [ \n 'mime' => 'image/jpeg', \n - 'extension' => ['jpeg', 'jpg'], \n + 'extension' => ['jpg', 'jpeg'], \n 'callback' => [$this, 'convert'], \n ], \n [", "msg": "Change 'jpg' to be the default extension type for 'image/jpeg'"}
{"diff": "a / config/config.default.php \n  b / config/config.default.php \n@@ -344,6 +344,9 @@ $defaultConfig = [ \n // Imagick-specific event listener for the built in image transformations \n 'imagick' => 'Imbo\\EventListener\\Imagick', \n + \n + // Pluggable output conversion \n + 'outputConverter' => 'Imbo\\EventListener\\OutputConverterManagerImagick', \n ], \n /**", "msg": "Add the output converter as an eventlistener to receive imagick instance"}
{"diff": "a / src/Image/ImagePreparation.php \n  b / src/Image/ImagePreparation.php \n@@ -91,12 +91,10 @@ class ImagePreparation implements ListenerInterface { \n throw $e; \n } \n - $outputConverterManager = $event->getOutputConverterManager(); \n - \n // Store relevant information in the image instance and attach it to the request \n $image = new Image(); \n $image->setMimeType($mime) \n - ->setExtension($outputConverterManager->getExtensionFromMimetype($mime)) \n + ->setExtension($event->getLoaderManager()->getExtensionFromMimetype($mime)) \n ->setBlob($imageBlob) \n ->setWidth($size['width']) \n ->setHeight($size['height'])", "msg": "Resolve extension from loaders instead of output converters"}
{"diff": "a / src/Image/TransformationManager.php \n  b / src/Image/TransformationManager.php \n@@ -45,6 +45,11 @@ class TransformationManager implements ListenerInterface { \n */ \n protected $initializers = []; \n + /** \n + * Track if the manager has attempted to apply transformations. \n + */ \n + protected $transformationsApplied = false; \n + \n /** \n * {@inheritdoc} \n */ \n @@ -173,6 +178,8 @@ class TransformationManager implements ListenerInterface { \n ); \n } \n } \n + \n + $this->transformationsApplied = true; \n } \n /** \n @@ -351,4 +358,13 @@ class TransformationManager implements ListenerInterface { \n ->setEvent($event) \n ->transform($params); \n } \n + \n + /** \n + * Check whether the manager has attempted to apply transformations (i.e. transformations are present in the pipeline). \n + * \n + * @return boolean Whether transformations has been triggered \n + */ \n + public function hasAppliedTransformations() { \n + return $this->transformationsApplied; \n + } \n }", "msg": "Allow TransformationManager to track whether the pipeline has run"}
{"diff": "a / src/Image/OutputConverterManager.php \n  b / src/Image/OutputConverterManager.php \n@@ -135,6 +135,14 @@ class OutputConverterManager { \n return isset($this->mimetypeToExtension[$mimetype]) ? $this->mimetypeToExtension[$mimetype] : null; \n } \n + public function getMimetypeToExtensionMap() { \n + return $this->mimetypeToExtension; \n + } \n + \n + public function getExtensionToMimetypeMap() { \n + return $this->extensionToMimetype; \n + } \n + \n public function supportsExtension($extension) { \n return !empty($this->convertersByExtension[$extension]); \n }", "msg": "Add getter methods for extension/mimetype maps"}
{"diff": "a / src/EventListener/Imagick.php \n  b / src/EventListener/Imagick.php \n@@ -97,7 +97,7 @@ class Imagick implements ListenerInterface, ImagickAware { \n } \n // Inject the image blob \n - $this->imagick->readImageBlob($image->getBlob()); \n + $event->getLoaderManager()->load($image->getMimeType(), $image->getBlob()); \n // If we have specified a size hint, check if we have a different input size \n // than the original and set the ratio as an argument for any other listeners", "msg": "Use LoaderManager for Imagick eventlistener as well"}
{"diff": "a / src/Image/Loader/Basic.php \n  b / src/Image/Loader/Basic.php \n@@ -34,8 +34,7 @@ class Basic implements LoaderInterface { \n ]; \n } \n - public function load($blob) { \n - $imagick = new \\Imagick(); \n + public function load($imagick, $blob) { \n $imagick->readImageBlob($blob); \n return $imagick; \n }", "msg": "Use injected Imagick instance for loading"}
{"diff": "a / src/EventListener/ImageVariations.php \n  b / src/EventListener/ImageVariations.php \n@@ -276,9 +276,11 @@ class ImageVariations implements ListenerInterface { \n try { \n $this->storage->deleteImageVariations($user, $imageIdentifier, $width); \n + // @codeCoverageIgnoreStart \n } catch (StorageException $e) { \n trigger_error('Could not remove the stored variation', E_USER_WARNING); \n } \n + // @codeCoverageIgnoreEnd \n } \n } \n }", "msg": "Ignore statement that is never reached by PHPUnit"}
{"diff": "a / features/bootstrap/DatabaseTest/DoctrineMySQL.php \n  b / features/bootstrap/DatabaseTest/DoctrineMySQL.php \n@@ -54,7 +54,8 @@ class DoctrineMySQL implements AdapterTest { \n 'user' => $config['database.username'], \n 'password' => $config['database.password'], \n 'host' => $config['database.hostname'], \n - 'driver' => 'pdo_mysql' \n + 'port' => $config['database.port'], \n + 'driver' => 'pdo_mysql', \n ]); \n } \n }", "msg": "Need to inject port number when creating the adapter"}
{"diff": "a / src/Database/DatabaseInterface.php \n  b / src/Database/DatabaseInterface.php \n@@ -223,8 +223,12 @@ interface DatabaseInterface { \n * Fetch parameters for a short URL \n * \n * @param string $shortUrlId The ID of the short URL \n - * @return ?array<string, string> Returns an array with information regarding the short URL, or null if the \n - * short URL is not found \n + * @return ?array{ \n + * user: string, \n + * imageIdentifier: string, \n + * extension: string, \n + * query: array<string, string|string[]> \n + * } \n */ \n function getShortUrlParams(string $shortUrlId) : ?array;", "msg": "Be more precise with the phpdoc"}
{"diff": "a / tests/Behat/FeatureContextTest.php \n  b / tests/Behat/FeatureContextTest.php \n@@ -51,7 +51,7 @@ class FeatureContextTest extends TestCase { \n $this->cacheUtil = $this->createMock(CacheUtil::class); \n $this->context = new FeatureContext($this->cacheUtil); \n - $this->context->setClient($this->client); \n + $this->context->setClient($this->client, $this->baseUri); \n } \n /** \n @@ -83,11 +83,11 @@ class FeatureContextTest extends TestCase { \n ) \n ->willReturnOnConsecutiveCalls( \n $handlerStack, \n - 'http://localhost:8080', \n + $this->baseUri, \n ); \n $context = new FeatureContext(); \n - $this->assertSame($context, $context->setClient($client)); \n + $this->assertSame($context, $context->setClient($client, $this->baseUri)); \n } \n /**", "msg": "Specify base URI as well"}
{"diff": "a / src/EventListener/AccessToken.php \n  b / src/EventListener/AccessToken.php \n@@ -190,7 +190,7 @@ class AccessToken implements ListenerInterface \n }, $uris); \n } \n - foreach ($uris as $uri) { \n + foreach (array_filter($uris) as $uri) { \n foreach ($presentAccessTokenArgumentKeys as $argumentKey => $token) { \n // Remove the access token from the query string as it's not used to generate the signature \n $uriWithoutAccessToken = rtrim(preg_replace('/(?<=(\\?|&))' . $argumentKey . '=[^&]+&?/', '', $uri), '&?');", "msg": "Remove possible empty entries"}
{"diff": "a / field/class-kirki-field-spacing.php \n  b / field/class-kirki-field-spacing.php \n@@ -37,7 +37,7 @@ class Kirki_Field_Spacing extends Kirki_Field_Number { \n if ( ! empty( $this->sanitize_callback ) ) { \n return; \n } \n - $this->sanitize_callback = array( $this, 'sanitize' ); \n + $this->sanitize_callback = array( $this, 'sanitize_value' ); \n } \n @@ -48,7 +48,7 @@ class Kirki_Field_Spacing extends Kirki_Field_Number { \n * @param array $value The value. \n * @return array \n */ \n - public function sanitize( $value ) { \n + public function sanitize_value( $value ) { \n // Sanitize each sub-value separately. \n foreach ( $value as $key => $sub_value ) {", "msg": "Bugfix for spacing control sanitization."}
{"diff": "a / modules/custom-sections/sections/class-kirki-sections-nested-section.php \n  b / modules/custom-sections/sections/class-kirki-sections-nested-section.php \n@@ -58,10 +58,8 @@ class Kirki_Sections_Nested_Section extends WP_Customize_Section { \n $array['customizeAction'] = esc_attr__( 'Customizing', 'kirki' ); \n if ( $this->panel ) { \n - $array['customizeAction'] = sprintf( \n - esc_attr__( 'Customizing &#9656; %s', 'kirki' ), \n - esc_html( $this->manager->get_panel( $this->panel )->title ) \n - ); \n + /* translators: The title. */ \n + $array['customizeAction'] = sprintf( esc_attr__( 'Customizing &#9656; %s', 'kirki' ), esc_html( $this->manager->get_panel( $this->panel )->title ) ); \n } \n return $array; \n }", "msg": "Add inline comment for translators."}
{"diff": "a / field/class-kirki-field-image-array.php \n  b / field/class-kirki-field-image-array.php \n@@ -48,7 +48,11 @@ class Kirki_Field_Image_Array extends Kirki_Field { \n */ \n public function sanitize( $value ) { \n - return $value; \n - \n + return array( \n + 'id' => ( isset( $value['id'] && '' !== $value['id'] ) ) ? (int) $value['id'] : '', \n + 'url' => ( isset( $value['url'] && '' !== $value['url'] ) ) ? esc_url_raw( $value['url'] ) : '', \n + 'width' => ( isset( $value['width'] && '' !== $value['width'] ) ) ? (int) $value['width'] : '', \n + 'height' => ( isset( $value['height'] && '' !== $value['height'] ) ) ? (int) $value['height'] : '', \n + ) \n } \n }", "msg": "Sanitization for image-array control."}
{"diff": "a / core/class-kirki.php \n  b / core/class-kirki.php \n@@ -176,6 +176,10 @@ class Kirki extends Kirki_Init { \n */ \n public static function add_field( $config_id, $args ) { \n + if ( doing_action( 'customize_register' ) ) { \n + _doing_it_wrong( __METHOD__, esc_attr__( 'Kirki fields should not be added on customize_register. Please add them directly, or on init.', 'kirki' ), '3.1' ); \n + } \n + \n if ( isset( $args['type'] ) ) { \n $str = str_replace( array( '-', '_' ), ' ', $args['type'] ); \n $classname = 'Kirki_Field_' . str_replace( ' ', '_', ucwords( $str ) );", "msg": "Add error message when fields are added on customize_register."}
{"diff": "a / modules/webfonts/class-kirki-fonts-google.php \n  b / modules/webfonts/class-kirki-fonts-google.php \n@@ -80,6 +80,9 @@ final class Kirki_Fonts_Google { \n return; \n } \n + add_action( 'wp_ajax_kirki_fonts_google_all_get', array( $this, 'get_googlefonts_json' ) ); \n + add_action( 'wp_ajax_noprinv_kirki_fonts_google_all_get', array( $this, 'get_googlefonts_json' ) ); \n + \n // Populate the array of google fonts. \n $this->google_fonts = Kirki_Fonts::get_google_fonts(); \n @@ -252,4 +255,15 @@ final class Kirki_Fonts_Google { \n } \n $this->subsets = $valid_subsets; \n } \n + \n + /** \n + * Gets the googlefonts JSON file. \n + * \n + * @since 3.0.17 \n + * @return string \n + */ \n + public function get_googlefonts_json() { \n + echo file_get_contents( wp_normalize_path( dirname( __FILE__ ) . '/webfonts.json' ) ); // WPCS: XSS ok. \n + exit(); \n + } \n }", "msg": "Add ajax callback to get googlefonts"}
{"diff": "a / field/class-kirki-field-dimension.php \n  b / field/class-kirki-field-dimension.php \n@@ -24,4 +24,15 @@ class Kirki_Field_Dimension extends Kirki_Field { \n $this->type = 'kirki-dimension'; \n } \n + \n + /** \n + * Sanitizes the value. \n + * \n + * @access public \n + * @param string $value The value. \n + * @return string \n + */ \n + public function sanitize( $value ) { \n + return Kirki_Sanitize_Values::css_dimension( $value ); \n + } \n }", "msg": "Add sanitization for dimension control."}
{"diff": "a / core/deprecated.php \n  b / core/deprecated.php \n@@ -66,3 +66,21 @@ if ( ! function_exists( 'Kirki' ) ) { \n return kirki(); \n } \n } \n + \n +if ( ! class_exists( 'Kirki_Active_Callback' ) ) { \n + // Removed in https://github.com/aristath/kirki/pull/1682/files \n + class Kirki_Active_Callback { \n + public static function evaluate() { \n + _deprecated_function( __METHOD__, '3.0.17', null ); \n + return true; \n + } \n + private static function evaluate_requirement() { \n + _deprecated_function( __METHOD__, '3.0.17', null ); \n + return true; \n + } \n + public static function compare() { \n + _deprecated_function( __METHOD__, '3.0.17', null ); \n + return true; \n + } \n + } \n +}", "msg": "Add Kirki_Active_Callback to deprecated file."}
{"diff": "a / controls/views/select.php \n  b / controls/views/select.php \n@@ -29,6 +29,9 @@ if ( 1 < data.multiple && data.value && _.isString( data.value ) ) { \n data-multiple=\"{{ data.multiple }}\" multiple=\"multiple\" \n <# } #> \n > \n + <# if ( data.placeholder ) { #> \n + <option value=\"\"<# if ( '' === data.value ) { #> selected<# } #>></option> \n + <# } #> \n <# _.each( data.choices, function( optionLabel, optionKey ) { #> \n <# \n selected = ( data.value === optionKey );", "msg": "Add empty option if using a placeholder"}
{"diff": "a / modules/css-vars/class-kirki-modules-css-vars.php \n  b / modules/css-vars/class-kirki-modules-css-vars.php \n@@ -81,7 +81,11 @@ class Kirki_Modules_CSS_Vars { \n if ( is_string( $args['css_var'] ) ) { \n $args['css_var'] = array( $args['css_var'], '$' ); \n } \n - echo esc_attr( $args['css_var'][0] ) . ':' . esc_attr( str_replace( '$', Kirki_Values::get_value( $args['kirki_config'], $id ), $args['css_var'][1] ) ) . ';'; \n + $val = Kirki_Values::get_value( $args['kirki_config'], $id ); \n + if ( isset( $args['css_var'][2] ) && is_array( $val ) && isset( $val[ $args['css_var'][2] ] ) ) { \n + $val = $val[ $args['css_var'][2] ]; \n + } \n + echo esc_attr( $args['css_var'][0] ) . ':' . esc_attr( str_replace( '$', $val, $args['css_var'][1] ) ) . ';'; \n } \n echo '}'; \n echo '</style>';", "msg": "Add support for array values."}
{"diff": "a / controls/php/class-kirki-control-dimensions.php \n  b / controls/php/class-kirki-control-dimensions.php \n@@ -133,7 +133,6 @@ class Kirki_Control_Dimensions extends Kirki_Control_Base { \n 'right' => esc_attr__( 'Right', 'kirki' ), \n 'center' => esc_attr__( 'Center', 'kirki' ), \n 'size' => esc_attr__( 'Size', 'kirki' ), \n - 'height' => esc_attr__( 'Height', 'kirki' ), \n 'spacing' => esc_attr__( 'Spacing', 'kirki' ), \n 'width' => esc_attr__( 'Width', 'kirki' ), \n 'height' => esc_attr__( 'Height', 'kirki' ),", "msg": "Duplicate array key height\nIf multiple elements in the array declaration use the same key, only the last one will be used as all others are overwritten."}
{"diff": "a / src/Engines/CollectionEngine.php \n  b / src/Engines/CollectionEngine.php \n@@ -119,13 +119,17 @@ class CollectionEngine extends BaseEngine \n foreach ($this->request->orderableColumns() as $orderable) { \n $column = $this->getColumnName($orderable['column']); \n - $this->collection = $this->collection->sortBy( \n - function ($row) use ($column) { \n + \n + $options = SORT_REGULAR; \n + if ($this->isCaseInsensitive()) { \n + $options = SORT_REGULAR | SORT_FLAG_CASE; \n + } \n + \n + $this->collection = $this->collection->sortBy(function ($row) use ($column) { \n $data = $this->serialize($row); \n return Arr::get($data, $column); \n - } \n - ); \n + }, $options); \n if ($orderable['direction'] == 'desc') { \n $this->collection = $this->collection->reverse();", "msg": "Add SORT_FLAG_CASE when ordering collection.\nFix"}
{"diff": "a / src/Facades/DataTables.php \n  b / src/Facades/DataTables.php \n@@ -4,6 +4,12 @@ namespace Yajra\\DataTables\\Facades; \n use Illuminate\\Support\\Facades\\Facade; \n +/** \n + * @mixin \\Yajra\\DataTables\\Factory \n + * @method eloquent($builder) \n + * @method queryBuilder($builder) \n + * @method collection($collection) \n + */ \n class DataTables extends Facade \n { \n /**", "msg": "Add mixin and method annotation for better facade ide support."}
{"diff": "a / src/Utilities/Request.php \n  b / src/Utilities/Request.php \n@@ -7,6 +7,9 @@ namespace Yajra\\DataTables\\Utilities; \n * @method get($key, $default = null) \n * @method query($key, $default = null) \n * @method has($key) \n + * @method merge(array $values) \n + * @method wantsJson() \n + * @method ajax() \n * @method all() \n */ \n class Request", "msg": "Add method annotations for request proxy calls."}
{"diff": "a / src/EloquentDataTable.php \n  b / src/EloquentDataTable.php \n@@ -77,11 +77,7 @@ class EloquentDataTable extends QueryDataTable \n return $columnName; \n } \n - $parts = explode('.', $column); \n - $relationColumn = array_pop($parts); \n - $relation = implode('.', $parts); \n - \n - return $this->joinEagerLoadedColumn($relation, $relationColumn); \n + return $this->joinEagerLoadedColumn($relation, $columnName); \n } \n /** \n @@ -157,14 +153,4 @@ class EloquentDataTable extends QueryDataTable \n $this->getBaseQueryBuilder()->join($table, $foreign, '=', $other, $type); \n } \n } \n - \n - /** \n - * Get eager loads keys if eloquent. \n - * \n - * @return array \n - */ \n - protected function getEagerLoads() \n - { \n - return array_keys($this->query->getEagerLoads()); \n - } \n }", "msg": "Refactor duplicates and remove unused method."}
{"diff": "a / src/config/datatables.php \n  b / src/config/datatables.php \n@@ -46,12 +46,14 @@ return [ \n /** \n * DataTables accepted builder to engine mapping. \n + * This is where you can override which engine a builder should use \n + * Note, only change this if you know what you are doing! \n */ \n 'builders' => [ \n - Illuminate\\Database\\Eloquent\\Relations\\Relation::class => 'eloquent', \n - Illuminate\\Database\\Eloquent\\Builder::class => 'eloquent', \n - Illuminate\\Database\\Query\\Builder::class => 'query', \n - Illuminate\\Support\\Collection::class => 'collection', \n + //Illuminate\\Database\\Eloquent\\Relations\\Relation::class => 'eloquent', \n + //Illuminate\\Database\\Eloquent\\Builder::class => 'eloquent', \n + //Illuminate\\Database\\Query\\Builder::class => 'query', \n + //Illuminate\\Support\\Collection::class => 'collection', \n ], \n /**", "msg": "Mark datatables.builder an advanced option to override default behaviour"}
{"diff": "a / src/QueryDataTable.php \n  b / src/QueryDataTable.php \n@@ -161,7 +161,7 @@ class QueryDataTable extends DataTableAbstract \n */ \n protected function isComplexQuery($builder) \n { \n - return Str::contains(Str::lower($builder->toSql()), ['union', 'having', 'distinct', 'order by', 'group by']); \n + return Str::contains(Str::lower($builder->toSql()), ['union', 'having', 'distinct', 'order by', 'group by', 'join']); \n } \n /**", "msg": "Classify join statements as a complex query.\nFix"}
{"diff": "a / src/DataTableAbstract.php \n  b / src/DataTableAbstract.php \n@@ -340,7 +340,7 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable \n if (is_array($key)) { \n $this->appends = $key; \n } elseif (is_callable($value)) { \n - $this->appends[$key] = $value; \n + $this->appends[$key] = value($value); \n } else { \n $this->appends[$key] = value($value); \n } \n @@ -348,6 +348,19 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable \n return $this; \n } \n + /** \n + * Add with query callback value on response. \n + * \n + * @param string $key \n + * @param callable $value \n + * @return $this \n + */ \n + public function withQuery($key, callable $value) { \n + $this->appends[$key] = $value; \n + \n + return $this; \n + } \n + \n /** \n * Override default ordering method with a closure callback. \n *", "msg": "Add withQuery api for query callback.\nRevert with callback implementation since its BC."}
{"diff": "a / src/QueryDataTable.php \n  b / src/QueryDataTable.php \n@@ -280,7 +280,7 @@ class QueryDataTable extends DataTableAbstract \n foreach ($columns as $index => $column) { \n $column = $this->getColumnName($index); \n - if (! $this->request->isColumnSearchable($index) || $this->isBlacklisted($column)) { \n + if (! $this->request->isColumnSearchable($index) || $this->isBlacklisted($column) && ! $this->hasFilterColumn($column)) { \n continue; \n }", "msg": "Allow column search on blacklisted columns with custom filter.\nFix"}
{"diff": "a / src/DataTableAbstract.php \n  b / src/DataTableAbstract.php \n@@ -672,7 +672,7 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable \n */ \n protected function searchPanesSearch() \n { \n - $columns = $this->request->get('searchPanes'); \n + $columns = $this->request->get('searchPanes', []); \n foreach ($columns as $column => $values) { \n if ($this->isBlacklisted($column) && ! $this->hasFilterColumn($column)) {", "msg": "Set empty array as default searchPanes."}
{"diff": "a / src/Utilities/Request.php \n  b / src/Utilities/Request.php \n@@ -170,7 +170,7 @@ class Request \n */ \n public function columnKeyword($index) \n { \n - $keyword = $this->request->input(\"columns.$index.search.value\"); \n + $keyword = $this->request->input(\"columns.$index.search.value\") ?? ''; \n return $this->prepareKeyword($keyword); \n } \n @@ -197,7 +197,7 @@ class Request \n */ \n public function keyword() \n { \n - $keyword = $this->request->input('search.value'); \n + $keyword = $this->request->input('search.value') ?? ''; \n return $this->prepareKeyword($keyword); \n }", "msg": "Return empty string for null request keyword"}
{"diff": "a / src/Utilities/Helper.php \n  b / src/Utilities/Helper.php \n@@ -337,7 +337,7 @@ class Helper \n return str_replace($replacements, $values, $json); \n } \n - public static function isJavascript(string|array|object $value, string $key): bool \n + public static function isJavascript(string|array|object|null $value, string $key): bool \n { \n if (empty($value) || is_array($value) || is_object($value)) { \n return false;", "msg": "Added null parameter type as allowed to handle default Action column from laravel-datatables-html"}
{"diff": "a / src/Fieldset.php \n  b / src/Fieldset.php \n@@ -211,7 +211,7 @@ class Fieldset extends Element implements FieldsetInterface \n * Retrieve a named element or fieldset \n * \n * @param string $elementOrFieldset \n - * @return ElementInterface \n + * @return ElementInterface|FieldsetInterface \n */ \n public function get($elementOrFieldset) \n {", "msg": "Fieldset#get(): Update return type options"}
{"diff": "a / src/Form.php \n  b / src/Form.php \n@@ -361,7 +361,7 @@ class Form extends Fieldset implements FormInterface \n // If there is a base fieldset, only hydrate beginning from the base fieldset \n if ($this->baseFieldset !== null) { \n - $data = $data[$this->baseFieldset->getName()]; \n + $data = isset($data[$this->baseFieldset->getName()]) ? $data[$this->baseFieldset->getName()] : []; \n $this->object = $this->baseFieldset->bindValues($data, $validationGroup[$this->baseFieldset->getName()]); \n } else { \n $this->object = parent::bindValues($data, $validationGroup);", "msg": "Updated Form class, bindValues function to set  to empty array if no data to pass along for baseFieldset"}
{"diff": "a / src/Element/Collection.php \n  b / src/Element/Collection.php \n@@ -225,6 +225,7 @@ class Collection extends Fieldset \n } \n foreach ($data as $key => $value) { \n + $elementOrFieldset = null; \n if ($this->has($key)) { \n $elementOrFieldset = $this->get($key); \n } elseif ($this->targetElement) {", "msg": "fixed initial value not being present and causing issues"}
{"diff": "a / src/ElementFactory.php \n  b / src/ElementFactory.php \n@@ -37,6 +37,7 @@ final class ElementFactory implements FactoryInterface \n if (null === $creationOptions) { \n return; \n } \n + \n if ($creationOptions instanceof Traversable) { \n $creationOptions = iterator_to_array($creationOptions); \n } \n @@ -45,7 +46,7 @@ final class ElementFactory implements FactoryInterface \n throw new InvalidServiceException(sprintf( \n '%s cannot use non-array, non-traversable, non-null creation options; received %s', \n __CLASS__, \n - (is_object($creationOptions) ? get_class($creationOptions) : gettype($creationOptions)) \n + is_object($creationOptions) ? get_class($creationOptions) : gettype($creationOptions) \n )); \n }", "msg": "Formatting adjsutments\nAdded empty line between if statements\nRemoved redundant brackets"}
{"diff": "a / modules/admin/src/proxy/ClientTransfer.php \n  b / modules/admin/src/proxy/ClientTransfer.php \n@@ -75,7 +75,7 @@ class ClientTransfer extends Object \n if (!$curl->error) { \n if (FileHelper::writeFile($image->serverSource, $curl->response)) { \n - $this->build->command->outputInfo('[+] Image ' . $file->systemFileName.' downloaded.'); \n + $this->build->command->outputInfo('[+] Image ' . $image->systemFileName.' downloaded.'); \n } \n } \n }", "msg": "fixed image transfer proxy name"}
{"diff": "a / modules/admin/src/components/StorageContainer.php \n  b / modules/admin/src/components/StorageContainer.php \n@@ -727,6 +727,15 @@ class StorageContainer extends Component \n } \n } \n + // force auto fix \n + $this->autoFixMissingImageSources = true; \n + \n + foreach ($this->findImages() as $image) { \n + if (!empty($image->file) && !$image->file->isHidden && !$image->file->isDeleted) { \n + $image->toArray(); // which forces to recreate missing sources. \n + } \n + } \n + \n return true; \n } \n }", "msg": "improve process thumbnail process to regenerate image files."}
{"diff": "a / core/console/commands/HealthController.php \n  b / core/console/commands/HealthController.php \n@@ -5,6 +5,7 @@ namespace luya\\console\\commands; \n use Yii; \n use yii\\helpers\\FileHelper; \n use yii\\helpers\\Console; \n +use yii\\imagine\\Image; \n /** \n * Health/Status informations about the Application itself. \n @@ -83,6 +84,12 @@ class HealthController extends \\luya\\console\\Command \n } \n } \n + try { \n + Image::getImagine(); \n + } catch (\\Exception $e) { \n + $this->outputError('Imagine Error: ' . $e->getMessage()); \n + } \n + \n return ($error) ? $this->outputError('Health check found errors!') : $this->outputSuccess('O.K.'); \n }", "msg": "added missing imagine driver warning to health command closes"}
{"diff": "a / modules/cms/src/widgets/LangSwitcher.php \n  b / modules/cms/src/widgets/LangSwitcher.php \n@@ -42,6 +42,11 @@ use luya\\helpers\\ArrayHelper; \n * \n * This configure widget would output the following code: \n * \n + * ```html \n + * <ul class=\"langnav__list\"> \n + * <li class=\"langnav__item lang-element-item--active\"><a class=\"langnav__link lang-link-item--active\" href=\"/public_html/\">DE</a></li> \n + * <li class=\"langnav__item\"><a class=\"langnav__link\" href=\"/public_html/en\">EN</a></li> \n + * </ul> \n * ``` \n * \n * @author Basil Suter <basil@nadar.io>", "msg": "added html output for configured widget"}
{"diff": "a / core/traits/ApplicationTrait.php \n  b / core/traits/ApplicationTrait.php \n@@ -68,8 +68,8 @@ trait ApplicationTrait \n * \n * ```php \n * public $locales = [ \n - * 'de' => 'de_CH.utf8', \n - * 'en' => 'en_GB.utf8', \n + * 'de' => 'de_CH', \n + * 'en' => 'en_GB', \n * ]; \n * ``` \n */ \n @@ -124,8 +124,9 @@ trait ApplicationTrait \n */ \n public function setLocale($lang) \n { \n - $this->language = $lang; \n - setlocale(LC_ALL, $this->ensureLocale($lang).'.utf8', $this->ensureLocale($lang)); \n + $locale = $this->ensureLocale($lang); \n + $this->language = $locale; \n + setlocale(LC_ALL, $locale.'.utf8', $locale); \n } \n /**", "msg": "use language code for yii application."}
{"diff": "a / modules/admin/src/components/StorageContainer.php \n  b / modules/admin/src/components/StorageContainer.php \n@@ -736,7 +736,7 @@ class StorageContainer extends Component \n foreach ($this->findImages() as $image) { \n if (!empty($image->file) && !$image->file->isHidden && !$image->file->isDeleted) { \n - $image->toArray(); // which forces to recreate missing sources. \n + $image->source; // which forces to recreate missing sources. \n } \n }", "msg": "fixed storage importer on console application"}
{"diff": "a / modules/admin/src/ngrest/plugins/Sortable.php \n  b / modules/admin/src/ngrest/plugins/Sortable.php \n@@ -9,8 +9,8 @@ use luya\\admin\\ngrest\\base\\Plugin; \n * \n * Generates an arrow down/up ability to click direct in the CRUD list. \n * \n - * When using the Sortable Plugin make sure to use the {{luya\\admin\\traits\\SortableTrait}}. This will ensure the \n - * default ordering for your fields and disabled the sorting inside the grid. \n + * When using the Sortable Plugin make sure to use the {{luya\\admin\\traits\\SortableTrait}} within the Model. This will \n + * ensure the default ordering for your fields and disabled the sorting inside the grid. \n * \n * @author Basil Suter <basil@nadar.io> \n */", "msg": "improve phpdocs for Sortable Plugin and SortableTrait"}
{"diff": "a / modules/cms/src/admin/importers/CmslayoutImporter.php \n  b / modules/cms/src/admin/importers/CmslayoutImporter.php \n@@ -88,7 +88,8 @@ class CmslayoutImporter extends Importer \n if ($layoutItem) { \n $match = $this->comparePlaceholders($_placeholders, json_decode($layoutItem->json_config, true)); \n - if ($match) { \n + $matchRevert = $this->comparePlaceholders(json_decode($layoutItem->json_config, true), $_placeholders); \n + if ($match && $matchRevert) { \n $layoutItem->updateAttributes([ \n 'name' => $readableFileName, \n 'view_file' => $fileBaseName,", "msg": "cms layout import ensure revert way in order to support new placeholder\nlayouts."}
{"diff": "a / modules/admin/src/views/ngrest/crud.php \n  b / modules/admin/src/views/ngrest/crud.php \n@@ -11,8 +11,10 @@ $this->beginBody(); \n ?> \n <?php $this->registerAngularControllerScript(); ?> \n <div ng-controller=\"<?= $config->hash; ?>\" ng-init=\"init()\" class=\"crud\"> \n + \n <!-- This fake ui-view is used to render the detail item, which actuals uses the parent scope in the ui router controller. --> \n - <div style=\"visibility:hidden;\" ui-view></div> \n + <div style=\"display: none;\" ui-view></div> \n + \n <?php if (!$relationCall): ?> \n <?php if (!$isInline): ?> \n <div class=\"crud-header\">", "msg": "Changed visibility: hidden to display: none on fake crud ui-view"}
{"diff": "a / core/console/Application.php \n  b / core/console/Application.php \n@@ -53,7 +53,7 @@ class Application extends \\yii\\console\\Application \n { \n return array_merge($this->luyaCoreComponents(), [ \n 'errorHandler' => ['class' => 'luya\\console\\ErrorHandler'], \n - 'urlManager' => ['class' => 'yii\\web\\UrlManager'], // add for console commands with view files \n + 'urlManager' => ['class' => 'yii\\web\\UrlManager', 'enablePrettyUrl' => true, 'showScriptName' => false], // add for console commands with view files \n ]); \n } \n }", "msg": "change default url manager to allow pretty urls"}
{"diff": "a / core/traits/ErrorHandlerTrait.php \n  b / core/traits/ErrorHandlerTrait.php \n@@ -19,7 +19,7 @@ trait ErrorHandlerTrait \n * @var string The url of the error api without trailing slash. Make sure you have installed the error api \n * module on the requested api url (https://luya.io/guide/module/luyadev---luya-module-errorapi). \n */ \n - public $api = 'http://luya.io/errorapi'; \n + public $api = 'https://luya.io/errorapi'; \n /** \n * @var boolean Enable the transfer of exceptions to the defined `$api` server.", "msg": "default error api use https"}
{"diff": "a / modules/admin/src/views/layouts/main.php \n  b / modules/admin/src/views/layouts/main.php \n@@ -177,11 +177,14 @@ $this->beginPage() \n <div class=\"debug\" ng-show=\"showDebugBar\" ng-class=\"{'debug-toggled': isHover}\" ng-init=\"debugTab=1\"> \n <ul class=\"nav nav-tabs debug-tabs\"> \n + <li class=\"nav-item\" ng-click=\"showDebugBar=0\"> \n + <span class=\"nav-link\">x</span> \n + </li> \n <li class=\"nav-item\" ng-click=\"debugTab=1\"> \n - <span class=\"nav-link active\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==1}\">Network</span> \n + <span class=\"nav-link\" ng-class=\"{'active': debugTab==1}\">Network</span> \n </li> \n <li class=\"nav-item\" ng-click=\"debugTab=2\"> \n - <span class=\"nav-link\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==2}\">Infos</span> \n + <span class=\"nav-link\" ng-class=\"{'active': debugTab==2}\">Infos</span> \n </li> \n </ul>", "msg": "add ability to close debug bar"}
{"diff": "a / core/components/Mail.php \n  b / core/components/Mail.php \n@@ -67,6 +67,12 @@ class Mail extends \\yii\\base\\Component \n */ \n public $isSMTP = true; \n + /** \n + * @var boolean Whether the SMTP requires authentication or not, if {{Mail::$isSMTP}} is disabled \n + * this property has no effect. \n + */ \n + public $SMTPAuth = true; \n + \n /** \n * @var string alternate text message if email client doesn't support HTML \n */ \n @@ -127,7 +133,7 @@ class Mail extends \\yii\\base\\Component \n $this->_mailer->isSMTP(); \n $this->_mailer->SMTPSecure = $this->smtpSecure; \n $this->_mailer->Host = $this->host; \n - $this->_mailer->SMTPAuth = true; \n + $this->_mailer->SMTPAuth = $this->SMTPAuth; \n $this->_mailer->Username = $this->username; \n $this->_mailer->Password = $this->password; \n $this->_mailer->Port = $this->port;", "msg": "added ability to disable smpt auth."}
{"diff": "a / core/console/Application.php \n  b / core/console/Application.php \n@@ -53,7 +53,7 @@ class Application extends \\yii\\console\\Application \n { \n return array_merge($this->luyaCoreComponents(), [ \n 'errorHandler' => ['class' => 'luya\\console\\ErrorHandler'], \n - 'urlManager' => ['class' => 'yii\\web\\UrlManager'], // add for console commands with view files \n + 'urlManager' => ['class' => 'yii\\web\\UrlManager', 'enablePrettyUrl' => true, 'showScriptName' => false], // add for console commands with view files \n ]); \n } \n }", "msg": "change default url manager to allow pretty urls"}
{"diff": "a / modules/admin/src/views/layouts/main.php \n  b / modules/admin/src/views/layouts/main.php \n@@ -177,11 +177,14 @@ $this->beginPage() \n <div class=\"debug\" ng-show=\"showDebugBar\" ng-class=\"{'debug-toggled': isHover}\" ng-init=\"debugTab=1\"> \n <ul class=\"nav nav-tabs debug-tabs\"> \n + <li class=\"nav-item\" ng-click=\"showDebugBar=0\"> \n + <span class=\"nav-link\">x</span> \n + </li> \n <li class=\"nav-item\" ng-click=\"debugTab=1\"> \n - <span class=\"nav-link active\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==1}\">Network</span> \n + <span class=\"nav-link\" ng-class=\"{'active': debugTab==1}\">Network</span> \n </li> \n <li class=\"nav-item\" ng-click=\"debugTab=2\"> \n - <span class=\"nav-link\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==2}\">Infos</span> \n + <span class=\"nav-link\" ng-class=\"{'active': debugTab==2}\">Infos</span> \n </li> \n </ul>", "msg": "add ability to close debug bar"}
{"diff": "a / tests/core/console/CommandTest.php \n  b / tests/core/console/CommandTest.php \n@@ -23,14 +23,10 @@ class CommandTest extends LuyaConsoleTestCase \n $this->assertEquals('FooActiveWindow', $cmd->createClassName('FooActiveWindow', 'ActiveWindow')); \n $this->assertEquals('FooActiveWindow', $cmd->createClassName('foo-active-window', 'ActiveWindow')); \n $this->assertEquals('FooActiveWindow', $cmd->createClassName('foo', 'ActiveWindow')); \n - \n - $this->assertEquals(\\luya\\Boot::VERSION, $cmd->getLuyaVersion()); \n } \n public function testHelper() \n { \n $cmd = new SubCommand('myid', Yii::$app->getModule('unitmodule')); \n - \n - $this->assertEquals(\\luya\\Boot::VERSION, $cmd->getLuyaVersion()); \n } \n }", "msg": "remove deprecated method from tests."}
{"diff": "a / core/web/Request.php \n  b / core/web/Request.php \nnamespace luya\\web; \n -use Yii; \n - \n /** \n * Request Component. \n * \n @@ -37,6 +35,19 @@ class Request extends \\yii\\web\\Request \n 'application/json' => 'yii\\web\\JsonParser', \n ]; \n + /** \n + * @inheritdoc \n + */ \n + public function init() \n + { \n + parent::init(); \n + \n + // if an admin request is detected, change the csrf param. \n + if ($this->isAdmin) { \n + $this->csrfParam = '_csrf-admin'; \n + } \n + } \n + \n private $_isAdmin; \n /** \n @@ -62,9 +73,8 @@ class Request extends \\yii\\web\\Request \n if ($this->getIsConsoleRequest() && !$this->forceWebRequest) { \n $this->_isAdmin = false; \n } else { \n - $resolver = Yii::$app->composition->getResolvedPathInfo($this); \n - $pathInfo = $resolver['route']; \n - $parts = explode('/', $pathInfo); \n + $resolver = (new Composition($this))->getResolvedPathInfo($this); \n + $parts = explode('/', $resolver['route']); \n $first = reset($parts); \n if (preg_match('/admin/i', $first, $results)) {", "msg": "change csrf param name for admin requests"}
{"diff": "a / core/console/commands/ImportController.php \n  b / core/console/commands/ImportController.php \n@@ -128,7 +128,7 @@ class ImportController extends Command implements ImportControllerInterface \n // if there response is an array, the it will be added to the queue \n if (is_array($response)) { \n foreach ($response as $class) { \n - $object = new $class($this, $module); \n + $object = Yii::createObject($class, [$this, $module]); \n $position = $object->queueListPosition; \n while (true) { \n if (!array_key_exists($position, $queue)) {", "msg": "use create object method in order to support DI"}
{"diff": "a / core/console/commands/ImportController.php \n  b / core/console/commands/ImportController.php \n@@ -4,7 +4,6 @@ namespace luya\\console\\commands; \n use Yii; \n use yii\\console\\widgets\\Table; \n -use yii\\helpers\\VarDumper; \n use luya\\Boot; \n use luya\\admin\\models\\Config; \n use luya\\console\\Command; \n @@ -209,12 +208,8 @@ class ImportController extends Command implements ImportControllerInterface \n foreach ($logs as $key => $value) { \n if (is_array($value)) { \n foreach ($value as $kk => $kv) { \n - if (!is_scalar($kv)) { \n - $rows[] = [$kk, VarDumper::dumpAsString($kv)]; \n - } else { \n $rows[] = [$kk, $kv]; \n } \n - } \n } else { \n $rows[] = [$key, $value]; \n }", "msg": "use array table console output instead of dump"}
{"diff": "a / tests/core/web/ViewTest.php \n  b / tests/core/web/ViewTest.php \n@@ -18,21 +18,13 @@ class ViewTest extends \\luyatests\\LuyaWebTestCase \n $string = ' '; \n $resultString = $view->compress($string); \n - $this->assertEquals(1, strlen($resultString)); \n + $this->assertEquals(0, strlen($resultString)); \n $string = ' '; \n $resultString = $view->compress($string); \n - $this->assertEquals(1, strlen($resultString)); \n + $this->assertEquals(0, strlen($resultString)); \n - $string = '<test> \n - \n - </test>'; \n - $resultString = $view->compress($string); \n - $this->assertEquals(14, strlen($resultString)); \n - \n - $string = 'test test test'; \n - $resultString = $view->compress($string); \n - $this->assertEquals(14, strlen($resultString)); \n + $this->assertSame('<p> foo bar </p>', $view->compress(' <p> foo bar </p>')); \n } \n /*", "msg": "reduce compress tests as minify tests exists"}
{"diff": "a / src/API/Management/Tickets.php \n  b / src/API/Management/Tickets.php \n@@ -31,7 +31,7 @@ class Tickets extends GenericResource \n public function createPasswordChangeTicketByEmail($email, $new_password = null, $result_url = null, $connection_id = null) \n { \n - return $this->createPasswordChangeTicketRaw(null, $mail, $new_password, $result_url, $connection_id); \n + return $this->createPasswordChangeTicketRaw(null, $email, $new_password, $result_url, $connection_id); \n } \n public function createPasswordChangeTicketRaw($user_id = null, $email = null, $new_password = null, $result_url = null, $connection_id = null)", "msg": "[BUGFIX] Use proper argument for createPasswordChangeTicketRaw"}
{"diff": "a / src/Auth0.php \n  b / src/Auth0.php \n@@ -230,7 +230,7 @@ class Auth0 { \n $this->setStore(new SessionStore()); \n } \n - $this->authentication = new Authentication ($this->domain, $this->client_id, $this->client_secret, $this->guzzleOptions); \n + $this->authentication = new Authentication ($this->domain, $this->client_id, $this->client_secret, $this->audience, $this->scope, $this->guzzleOptions); \n $this->user = $this->store->get(\"user\"); \n $this->access_token = $this->store->get(\"access_token\");", "msg": "Fixing issue with Guzzle options being ignored."}
{"diff": "a / src/Auth0.php \n  b / src/Auth0.php \n@@ -158,7 +158,8 @@ class Auth0 { \n * - persist_id_token (Boolean) Optional. Indicates if you want to persist the id token, default false \n * - store (Mixed) Optional. Indicates how we store the persisting methods, default is session \n * store, you can pass false to avoid storing it or a class that \n - * implements a store (get, set, delete). TODO: add a proper interface \n + * implements the StorageInterface \n + * - state_handler (Mixed) Optional Indicates how to handle the state, default is SessionStateHandler using a newly opened session, you can pass false to avoid handling the state or a class that implements the StateHandler interface \n * - debug (Boolean) Optional. Default false \n * - guzzle_options (Object) Optional. Options forwarded to Guzzle \n *", "msg": "Auth0 class documentation fixed for store and state handler"}
{"diff": "a / src/API/Management/ClientGrants.php \n  b / src/API/Management/ClientGrants.php \n@@ -169,9 +169,16 @@ class ClientGrants extends GenericResource \n ->call(); \n } \n + /* \n + * Deprecated \n + */ \n + \n + // phpcs:disable \n + \n /** \n * Get a Client Grant. \n - * TODO: Deprecate, cannot get a Client Grant by ID. \n + * \n + * @deprecated 5.4.0, no such endpoint. \n * \n * @param string $id Client Grant ID. \n * @param null|string $audience Client Grant audience to filter by. \n @@ -179,6 +186,8 @@ class ClientGrants extends GenericResource \n * @return mixed \n * \n * @throws \\Exception Thrown by the HTTP client when there is a problem with the API call. \n + * \n + * @codeCoverageIgnore - Deprecated. \n */ \n public function get($id, $audience = null) \n { \n @@ -191,4 +200,6 @@ class ClientGrants extends GenericResource \n return $request->call(); \n } \n + \n + // phpcs:enable \n }", "msg": "Official deprecation of \\Auth0\\SDK\\API\\Management\\ClientGrants::get"}
{"diff": "a / src/API/Management/GenericResource.php \n  b / src/API/Management/GenericResource.php \n@@ -75,17 +75,15 @@ class GenericResource \n * \n * @return array \n */ \n - protected function normalizeIncludeTotals(array $params, $include_totals = null) \n + protected function normalizeIncludeTotals(array $params, $include_totals = false) \n { \n // User parameter include_totals if params does not have the key. \n if (! isset( $params['include_totals'] )) { \n $params['include_totals'] = $include_totals; \n } \n - // If include_totals is set (not null), then make sure we have a boolean. \n - if (isset( $params['include_totals'] )) { \n + // Make sure we have a boolean. \n $params['include_totals'] = boolval( $params['include_totals'] ); \n - } \n return $params; \n }", "msg": "Change normalizeIncludeTotals() in GenericResource to have sane defaults"}
{"diff": "a / src/Helpers/JWKFetcher.php \n  b / src/Helpers/JWKFetcher.php \n@@ -98,7 +98,7 @@ class JWKFetcher \n /** \n * Fetch x509 cert for RS256 token decoding. \n * \n - * TODO: Deprecate, use $this->getFormatted() \n + * @deprecated 5.6.0, use $this->getKeys(). \n * \n * @param string $jwks_url URL to the JWKS. \n * @param string|null $kid Key ID to use; returns first JWK if $kid is null or empty. \n @@ -151,7 +151,7 @@ class JWKFetcher \n /** \n * Get a JWK from a JWKS using a key ID, if provided. \n * \n - * TODO: Deprecate \n + * @deprecated 5.6.0, use $this->getKeys(). \n * \n * @param array $jwks JWKS to parse. \n * @param null|string $kid Key ID to return; returns first JWK if $kid is null or empty. \n @@ -182,7 +182,7 @@ class JWKFetcher \n /** \n * Check if an array within an array has a non-empty first item. \n * \n - * TODO: Deprecate \n + * @deprecated 5.6.0, not used. \n * \n * @param array|null $array Main array to check. \n * @param string $key Key pointing to a sub-array.", "msg": "Deprecated unused JWKFetcher methods"}
{"diff": "a / tests/bootstrap.php \n  b / tests/bootstrap.php \n@@ -3,6 +3,9 @@ $tests_dir = dirname(__FILE__).'/'; \n require_once $tests_dir.'../vendor/autoload.php'; \n +ini_set('session.use_cookies', false); \n +ini_set('session.cache_limiter', false); \n + \n define( 'AUTH0_PHP_TEST_INTEGRATION_SLEEP', 160000 ); \n if (! defined( 'AUTH0_PHP_TEST_JSON_DIR' )) {", "msg": "Add ini setting to avoid cookies in test env"}
{"diff": "a / src/Auth0.php \n  b / src/Auth0.php \n@@ -286,19 +286,13 @@ class Auth0 \n $this->dontPersist('id_token'); \n } \n - $session_base_name = ! empty( $config['session_base_name'] ) ? $config['session_base_name'] : SessionStore::BASE_NAME; \n + $session_base_name = $config['session_base_name'] ?? SessionStore::BASE_NAME; \n - if (isset($config['store'])) { \n - if ($config['store'] === false) { \n - $emptyStore = new EmptyStore(); \n - $this->setStore($emptyStore); \n - } else { \n - $this->setStore($config['store']); \n + $sessionStore = $config['store'] ?? new SessionStore($session_base_name); \n + if (! $sessionStore instanceof StoreInterface) { \n + $sessionStore = new EmptyStore(); \n } \n - } else { \n - $sessionStore = new SessionStore($session_base_name); \n $this->setStore($sessionStore); \n - } \n if (isset($config['state_handler'])) { \n if ($config['state_handler'] === false) {", "msg": "Simplify user session storage initialization"}
{"diff": "a / resources/views/enrollments/show.blade.php \n  b / resources/views/enrollments/show.blade.php \n@if(isset($enrollment->result)) \n <p> \n - <a href=\"/result/{{ $enrollment->result->id }}\" class=\"btn btn-xs btn-info\"> \n + <a href=\"/result/{{ $enrollment->id }}\" class=\"btn btn-xs btn-info\"> \n <i class=\"fa fa-eye\"></i> {{ $enrollment->result['result_name']['name'] }} \n </a> \n </p>", "msg": "enrollment result ref fix"}
{"diff": "a / app/Exceptions/Handler.php \n  b / app/Exceptions/Handler.php \n@@ -35,7 +35,7 @@ class Handler extends ExceptionHandler \n */ \n public function report(Exception $exception) \n { \n - if (app()->bound('sentry')) { \n + if (app()->bound('sentry') && $this->shouldReport($exception)) { \n app('sentry')->captureException($exception); \n } \n @@ -51,10 +51,6 @@ class Handler extends ExceptionHandler \n */ \n public function render($request, Exception $exception) \n { \n - if (app()->bound('sentry')) { \n - app('sentry')->captureException($exception); \n - } \n - \n return parent::render($request, $exception); \n } \n }", "msg": "restrict error reporting"}
{"diff": "a / app/Http/Controllers/AttendanceController.php \n  b / app/Http/Controllers/AttendanceController.php \n@@ -125,7 +125,8 @@ class AttendanceController extends Controller \n // if the course has any past events \n if($events->count() == 0 || $course->enrollments()->count() == 0) { \n - abort(404, 'The course has no attendance record'); \n + \\Alert::add('error', 'This course has no events.')->flash(); \n + return back(); \n } \n $enrollments = $course->enrollments()->with('student')->get();", "msg": "better error management for courses with no events"}
{"diff": "a / app/Http/Controllers/Admin/PaymentCrudController.php \n  b / app/Http/Controllers/Admin/PaymentCrudController.php \n@@ -104,18 +104,11 @@ class PaymentCrudController extends CrudController \n abort(403); \n } \n - if (! $payment->invoice || ! $payment->invoice->enrollment) \n + if (! $payment->invoice) \n { \n abort(404, 'No enrollment found for this payment'); \n } \n - return view('enrollments.show', [ \n - 'enrollment' => $payment->invoice->enrollment->load('invoice')->load('invoice.payments'), \n - 'products' => $payment->invoice()->with('invoiceDetails')->get(), \n - 'comments' => $payment->invoice->enrollment->comments, \n - 'scholarships' => Scholarship::all(), \n - 'availablePaymentMethods' => Paymentmethod::all(), \n - 'writeaccess' => $payment->invoice->enrollment->status_id !== 2 && backpack_user()->can('enrollments.edit'), \n - ]); \n + return \\Redirect::route('invoice.show', ['id' => $payment->invoice_id]); \n } \n }", "msg": "Make payment \"show\" action redirect to invoice instead of enrollment"}
{"diff": "a / app/Http/Controllers/EnrollmentController.php \n  b / app/Http/Controllers/EnrollmentController.php \n@@ -18,6 +18,7 @@ use App\\Models\\Student; \n use App\\Models\\Tax; \n use App\\Services\\AFSantiagoEnrollmentSheetService; \n use App\\Traits\\PeriodSelection; \n +use Carbon\\Carbon; \n use Illuminate\\Http\\Request; \n use Illuminate\\Support\\Facades\\App; \n use Illuminate\\Support\\Facades\\Gate; \n @@ -104,6 +105,15 @@ class EnrollmentController extends Controller \n // TODO delete grades and/or skills \n + // Create attendance in new course. \n + $events = $course->events->where('start', '<', (new Carbon())->toDateString()); \n + foreach ($events as $event) { \n + $event->attendance()->create([ \n + 'student_id' => $enrollment->student_id, \n + 'attendance_type_id' => 3, \n + ]); \n + } \n + \n // display a confirmation message and redirect to enrollment details \n Alert::success(__('The enrollment has been updated'))->flash();", "msg": "Apply default attendance when moving a student from a course to another"}
{"diff": "a / app/Http/Controllers/InvoiceController.php \n  b / app/Http/Controllers/InvoiceController.php \n@@ -251,7 +251,7 @@ class InvoiceController extends Controller \n } \n foreach ($invoice->enrollments as $enrollment) { \n - if ($invoice->totalPrice() == $invoice->paidTotal() && $enrollment->product->price == $enrollment->product->totalPaidPrice()) { \n + if ($invoice->totalPrice() == $invoice->paidTotal() && $enrollment->product->price <= $enrollment->product->totalPaidPrice()) { \n $enrollment->product->markAsPaid(); \n } \n }", "msg": "allow to mark enrollment as paid if invoice global price is greater than enrollment price"}
{"diff": "a / pkg/test/ClassExtensionTrait.php \n  b / pkg/test/ClassExtensionTrait.php \n@@ -10,7 +10,7 @@ trait ClassExtensionTrait \n $this->assertTrue( \n $rc->isSubclassOf($expected), \n - sprintf('Failed assert that class %s extends %s class.', $actual, $expected) \n + sprintf('Failed assert that class %s extends %s class', $actual, $expected) \n ); \n }", "msg": "test new release command. It releases only packages with changes."}
{"diff": "a / pkg/stomp/Tests/Functional/StompCommonUseCasesTest.php \n  b / pkg/stomp/Tests/Functional/StompCommonUseCasesTest.php \n@@ -48,7 +48,7 @@ class StompCommonUseCasesTest extends \\PHPUnit\\Framework\\TestCase \n $this->assertNull($message); \n $this->assertGreaterThan(1.5, $endAt - $startAt); \n - $this->assertLessThan(2.5, $endAt - $startAt); \n + $this->assertLessThan(3, $endAt - $startAt); \n } \n public function testReturnNullImmediatelyOnReceiveNoWait()", "msg": "[stomp] fix fragile test"}
{"diff": "a / pkg/enqueue-bundle/DependencyInjection/Compiler/BuildTopicMetaSubscribersPass.php \n  b / pkg/enqueue-bundle/DependencyInjection/Compiler/BuildTopicMetaSubscribersPass.php \n@@ -16,6 +16,10 @@ class BuildTopicMetaSubscribersPass implements CompilerPassInterface \n { \n $processorTagName = 'enqueue.client.processor'; \n + if (false == $container->hasDefinition('enqueue.client.meta.topic_meta_registry')) { \n + return; \n + } \n + \n $topicsSubscribers = []; \n foreach ($container->findTaggedServiceIds($processorTagName) as $serviceId => $tagAttributes) { \n $subscriptions = $this->extractSubscriptions($container, $serviceId, $tagAttributes);", "msg": "[bundle] do not use client's related stuff if it is disabled"}
{"diff": "a / pkg/redis/RedisConnectionFactory.php \n  b / pkg/redis/RedisConnectionFactory.php \n@@ -50,11 +50,7 @@ class RedisConnectionFactory implements PsrConnectionFactory \n } \n $this->config = array_replace($this->defaultConfig(), $config); \n - if (isset($this->config['vendor'])) { \n $vendor = $this->config['vendor']; \n - } else { \n - $vendor = \"\"; \n - } \n $supportedVendors = ['predis', 'phpredis', 'custom']; \n if (false == in_array($vendor, $supportedVendors, true)) {", "msg": "remove not required param check"}
{"diff": "a / pkg/stomp/Tests/StompConnectionFactoryConfigTest.php \n  b / pkg/stomp/Tests/StompConnectionFactoryConfigTest.php \n@@ -135,6 +135,22 @@ class StompConnectionFactoryConfigTest extends TestCase \n ], \n ]; \n + yield [ \n + ['dsn' => 'stomp:///%2f'], \n + [ \n + 'host' => 'localhost', \n + 'port' => 61613, \n + 'login' => 'guest', \n + 'password' => 'guest', \n + 'vhost' => '/', \n + 'buffer_size' => 1000, \n + 'connection_timeout' => 1, \n + 'sync' => false, \n + 'lazy' => true, \n + 'ssl_on' => false, \n + ], \n + ]; \n + \n yield [ \n ['host' => 'localhost', 'port' => 1234, 'foo' => 'bar'], \n [", "msg": "[stomp] Add test that ensure path is urldecoded."}
{"diff": "a / pkg/amqp-tools/ConnectionConfig.php \n  b / pkg/amqp-tools/ConnectionConfig.php \n@@ -107,9 +107,10 @@ class ConnectionConfig \n /** \n * @param string[] $extensions \n */ \n - public function addSupportedScheme(string $schema, array $extensions = []): self \n + public function addSupportedScheme(string $schema): self \n { \n - $this->supportedSchemes[$schema] = $extensions; \n + $this->supportedSchemes[] = $schema; \n + $this->supportedSchemes = array_unique($this->supportedSchemes); \n return $this; \n } \n @@ -380,7 +381,7 @@ class ConnectionConfig \n { \n $dsn = new Dsn($dsn); \n - $supportedSchemes = array_keys($this->supportedSchemes); \n + $supportedSchemes = $this->supportedSchemes; \n if (false == in_array($dsn->getSchemeProtocol(), $supportedSchemes, true)) { \n throw new \\LogicException(sprintf( \n 'The given scheme protocol \"%s\" is not supported. It must be one of \"%s\".',", "msg": "revert unrelevant changes"}
{"diff": "a / pkg/dbal/DbalConsumer.php \n  b / pkg/dbal/DbalConsumer.php \n@@ -144,8 +144,12 @@ class DbalConsumer implements Consumer \n $this->deleteMessage($message->getDeliveryId()); \n } \n - private function deleteMessage(?string $deliveryId): void \n + private function deleteMessage(string $deliveryId): void \n { \n + if (empty($deliveryId)) { \n + throw new \\LogicException(sprintf('Expected record was removed but it is not. Delivery id: \"%s\"', $deliveryId)); \n + } \n + \n $this->getConnection()->delete( \n $this->getContext()->getTableName(), \n ['delivery_id' => $deliveryId],", "msg": "Fixed message deleting in consumer"}
{"diff": "a / pkg/amqp-lib/AmqpConnectionFactory.php \n  b / pkg/amqp-lib/AmqpConnectionFactory.php \n@@ -94,6 +94,7 @@ class AmqpConnectionFactory implements InteropAmqpConnectionFactory, DelayStrate \n 'verify_peer' => $this->config->isSslVerify(), \n 'verify_peer_name' => $this->config->isSslVerify(), \n 'passphrase' => $this->getConfig()->getSslPassPhrase(), \n + 'ciphers' => $this->config->getOption('ciphers', ''), \n ], function ($value) { return '' !== $value; }); \n $con = new AMQPSSLConnection(", "msg": "Add 'ciphers' ssl option as defined in It can now be passed through driver_options"}
{"diff": "a / SessionGuard.php \n  b / SessionGuard.php \n@@ -91,7 +91,7 @@ class SessionGuard implements StatefulGuard, SupportsBasicAuth \n * @param string $name \n * @param \\Illuminate\\Contracts\\Auth\\UserProvider $provider \n * @param \\Illuminate\\Contracts\\Session\\Session $session \n - * @param \\Symfony\\Component\\HttpFoundation\\Request $request \n + * @param \\Symfony\\Component\\HttpFoundation\\Request|null $request \n * @return void \n */ \n public function __construct($name,", "msg": "Add null value to php doc in Illuminate/Auth/SessionGuard:__construct [$request] parameter.\n- Actually this class already used without last parameter in AuthManager."}
{"diff": "a / Middleware/EnsureEmailIsVerified.php \n  b / Middleware/EnsureEmailIsVerified.php \n@@ -23,6 +23,7 @@ class EnsureEmailIsVerified \n if ($request->expectsJson()) { \n abort(403, 'Your email address is not verified.'); \n } \n + \n return Redirect::route('verification.notice'); \n }", "msg": "Applied StyleCI fix"}
{"diff": "a / Access/Response.php \n  b / Access/Response.php \n@@ -35,10 +35,10 @@ class Response \n /** \n * Get the string representation of the message. \n * \n - * @return string|null \n + * @return string \n */ \n public function __toString() \n { \n - return $this->message(); \n + return (string) $this->message(); \n } \n }", "msg": "[5.7] Auth/Access/Response::__toString method always should return string.\n__toString should return string, in other case it will emit the FatalError."}
{"diff": "a / Access/Gate.php \n  b / Access/Gate.php \n@@ -332,7 +332,7 @@ class Gate implements GateContract \n * Determine whether the callback/method can be called with the given user. \n * \n * @param \\Illuminate\\Contracts\\Auth\\Authenticatable|null $user \n - * @param \\Closure|string $class \n + * @param \\Closure|string|array $class \n * @param string|null $method \n * @return bool \n */ \n @@ -346,6 +346,15 @@ class Gate implements GateContract \n return $this->methodAllowsGuests($class, $method); \n } \n + // If the \"class\" is actually a callable array, it may be either \n + // two strings (when using a static method), or it could be a \n + // concrete instance of an object, plus the method's name. \n + if (is_array($class)) { \n + $className = is_string($class[0]) ? $class[0] : get_class($class[0]); \n + \n + return $this->methodAllowsGuests($className, $class[1]); \n + } \n + \n return $this->callbackAllowsGuests($class); \n }", "msg": "Allow array callables to be passed to Gate::before()"}
{"diff": "a / Middleware/Authorize.php \n  b / Middleware/Authorize.php \n@@ -72,7 +72,12 @@ class Authorize \n */ \n protected function getModel($request, $model) \n { \n - return $this->isClassName($model) ? trim($model) : $request->route($model, $model); \n + if ($this->isClassName($model)) { \n + return trim($model); \n + } else { \n + return $request->route($model, null) ?: \n + ((preg_match(\"/^['\\\"](.*)['\\\"]$/\", trim($model), $matches)) ? $matches[1] : null); \n + } \n } \n /**", "msg": "Allow for explicit text parameters on Authorize middleware\nOtherwise the previous (before PR behaviour should take place\nand return a null value to the gate when there's no bind to the route\nwith that key."}
{"diff": "a / Notifications/VerifyEmail.php \n  b / Notifications/VerifyEmail.php \n@@ -59,7 +59,7 @@ class VerifyEmail extends Notification \n protected function verificationUrl($notifiable) \n { \n return URL::temporarySignedRoute( \n - 'verification.verify', Carbon::now()->addMinutes(60), ['id' => $notifiable->getKey()] \n + 'verification.verify', Carbon::now()->addMinutes(config('auth.verification.expire', 60)), ['id' => $notifiable->getKey()] \n ); \n }", "msg": "Use config for verification expiry time"}
{"diff": "a / AuthManager.php \n  b / AuthManager.php \n@@ -154,7 +154,9 @@ class AuthManager implements FactoryContract \n // user in the database or another persistence layer where users are. \n $guard = new TokenGuard( \n $this->createUserProvider($config['provider'] ?? null), \n - $this->app['request'] \n + $this->app['request'], \n + $config['input_key'] ?? 'api_token', \n + $config['storage_key'] ?? 'api_token' \n ); \n $this->app->refresh('request', $guard, 'setRequest');", "msg": "Allow configuration of token guard keys\nThis change allows users to configure the token guard input and storage keys in the auth guard configuration. It's useful they want something else than the default `api_token` name."}
{"diff": "a / Access/Gate.php \n  b / Access/Gate.php \n@@ -150,6 +150,7 @@ class Gate implements GateContract \n public function resource($name, $class, array $abilities = null) \n { \n $abilities = $abilities ?: [ \n + 'viewAny' => 'viewAny', \n 'view' => 'view', \n 'create' => 'create', \n 'update' => 'update',", "msg": "update Gate `resource` method\nthis goes along with PR"}
{"diff": "a / Access/HandlesAuthorization.php \n  b / Access/HandlesAuthorization.php \n@@ -32,8 +32,8 @@ trait HandlesAuthorization \n * Deny with a HTTP status code. \n * \n * @param int $status \n - * @param ?string $message \n - * @param ?int $code \n + * @param string|null $message \n + * @param int|null $code \n * @return \\Illuminate\\Auth\\Access\\Response \n */ \n public function denyWithStatus($status, $message = null, $code = null) \n @@ -44,8 +44,8 @@ trait HandlesAuthorization \n /** \n * Deny with a 404 HTTP status code. \n * \n - * @param ?string $message \n - * @param ?int $code \n + * @param string|null $message \n + * @param int|null $code \n * @return \\Illuminate\\Auth\\Access\\Response \n */ \n public function denyAsNotFound($message = null, $code = null)", "msg": "Use proper docblock types"}
{"diff": "a / src/ProxyManager/Generator/MethodGenerator.php \n  b / src/ProxyManager/Generator/MethodGenerator.php \n@@ -36,6 +36,7 @@ class MethodGenerator extends ZendMethodGenerator \n */ \n public static function fromReflection(MethodReflection $reflectionMethod) : self \n { \n + /* @var $method self */ \n $method = parent::fromReflection($reflectionMethod); \n $method->setInterface(false);", "msg": "Corrected instantiated type - we know that `parent::fromReflection()` returns `static`"}
{"diff": "a / src/ProxyManager/FileLocator/FileLocator.php \n  b / src/ProxyManager/FileLocator/FileLocator.php \n@@ -42,11 +42,13 @@ class FileLocator implements FileLocatorInterface \n */ \n public function __construct(string $proxiesDirectory) \n { \n - $this->proxiesDirectory = realpath($proxiesDirectory); \n + $absolutePath = realpath($proxiesDirectory); \n - if (false === $this->proxiesDirectory) { \n + if (false === $absolutePath) { \n throw InvalidProxyDirectoryException::proxyDirectoryNotFound($proxiesDirectory); \n } \n + \n + $this->proxiesDirectory = $absolutePath; \n } \n /**", "msg": "Avoiding overwriting an instance `string` property with a possible `string|bool`"}
{"diff": "a / tests/ProxyManagerTestAsset/ObjectTypeHintClass.php \n  b / tests/ProxyManagerTestAsset/ObjectTypeHintClass.php \n@@ -33,7 +33,7 @@ class ObjectTypeHintClass \n * \n * @return object \n */ \n - public function iterableTypeHintMethod(object $parameter) \n + public function objectTypeHintMethod(object $parameter) \n { \n return $parameter; \n }", "msg": "Test asset method name correction - method name was mismatching the purpose (using an `object` hint)"}
{"diff": "a / src/ProxyManager/Inflector/ClassNameInflector.php \n  b / src/ProxyManager/Inflector/ClassNameInflector.php \n@@ -16,6 +16,7 @@ use function substr; \n final class ClassNameInflector implements ClassNameInflectorInterface \n { \n protected string $proxyNamespace; \n + /** @var int @TODO annotation still needed for phpstan to understand this */ \n private int $proxyMarkerLength; \n private string $proxyMarker; \n private ParameterHasher $parameterHasher;", "msg": "Added type declaration to allow PHPStan to still understand property types"}
{"diff": "a / tests/static-analysis/null-object.php \n  b / tests/static-analysis/null-object.php \n@@ -10,7 +10,8 @@ require_once __DIR__ . '/../../vendor/autoload.php'; \n class MyProxiedClass \n { \n - public function sayHello() : ?string \n + /** @return string|null return type cannot be enforced on a null object - nothing is ever returned */ \n + public function sayHello() \n { \n return 'Hello!'; \n }", "msg": "Corrected null object original class return type"}
{"diff": "a / tests/ProxyManagerTest/ProxyGenerator/Util/PropertiesTest.php \n  b / tests/ProxyManagerTest/ProxyGenerator/Util/PropertiesTest.php \n@@ -126,7 +126,6 @@ final class PropertiesTest extends TestCase \n public function testOnlyPropertiesThatCanBeUnset(): void \n { \n $nonReferenceableProperties = Properties::fromReflectionClass(new ReflectionClass(ClassWithMixedTypedProperties::class)) \n - ->onlyPropertiesThatCanBeUnset() \n ->getInstanceProperties(); \n self::assertSame(", "msg": "Remove usage of deprecated method"}
{"diff": "a / tests/ProxyManagerTest/Factory/AbstractBaseFactoryTest.php \n  b / tests/ProxyManagerTest/Factory/AbstractBaseFactoryTest.php \n@@ -31,7 +31,7 @@ final class AbstractBaseFactoryTest extends TestCase \n /** \n * Note: we mock the class in order to assert on the abstract method usage \n * \n - * @var AbstractBaseFactory|MockObject \n + * @var AbstractBaseFactory&MockObject \n */ \n private AbstractBaseFactory $factory;", "msg": "corrected mock property type in `AbstractBaseFactoryTest`"}
{"diff": "a / src/IterableObject.php \n  b / src/IterableObject.php \nuse ArrayAccess; \n use Exception; \n use Illuminate\\Support\\Collection as BaseCollection; \n +use Illuminate\\Support\\HigherOrderCollectionProxy; \n class IterableObject extends BaseCollection implements ArrayAccess \n { \n public function __get($key) \n { \n + if (! $this->offsetExists($key) && in_array($key, static::$proxies)) { \n + return new HigherOrderCollectionProxy($this, $key); \n + } \n + \n return $this->get($key); \n }", "msg": "Add support for higher order collection messages from 5.4"}
{"diff": "a / tests/rebuild.php \n  b / tests/rebuild.php \n@@ -10,6 +10,10 @@ rename('tests/build-testing', 'tests/snapshots'); \n function removeDirectory($path) \n { \n + if (! $path) { \n + exit (\"Path to the 'tests/snapshots' directory is missing\"); \n + } \n + \n $files = glob($path . '/{,.}[!.,!..]*', GLOB_MARK|GLOB_BRACE); \n foreach ($files as $file) {", "msg": "Add safety check to prevent `removeDirectory` from doing bad things"}
{"diff": "a / src/Handlers/MarkdownHandler.php \n  b / src/Handlers/MarkdownHandler.php \n@@ -77,7 +77,7 @@ class MarkdownHandler \n { \n $replacements = [\"<?php\" => \"<{{'?php'}}\"]; \n - if ($file->getFullExtension() == 'md' || $file->getFullExtension() == 'mdown') { \n + if (in_array($file->getFullExtension(), ['markdown', 'md', 'mdown'])) { \n $replacements = array_merge([ \n \"@\" => \"{{'@'}}\", \n \"{{\" => \"@{{\",", "msg": "Include `markdown` as type requiring escaped content for Blade processing"}
{"diff": "a / src/PageVariable.php \n  b / src/PageVariable.php \n@@ -30,6 +30,11 @@ class PageVariable extends IterableObject \n return $this->_meta->path->get($key ?: $this->getExtending()); \n } \n + return (String) $this->_meta->path; \n + } \n + \n + public function getPaths() \n + { \n return $this->_meta->path; \n } \n @@ -39,6 +44,11 @@ class PageVariable extends IterableObject \n return $this->_meta->url->get($key ?: $this->getExtending()); \n } \n + return (String) $this->_meta->url; \n + } \n + \n + public function getUrls() \n + { \n return $this->_meta->url; \n }", "msg": "Add getPaths/getUrls to PageVariable to specifically get path/url arrays"}
{"diff": "a / src/File/InputFile.php \n  b / src/File/InputFile.php \n@@ -43,7 +43,12 @@ class InputFile \n return $this->isBladeFile() && in_array($this->getExtension(), $this->extraBladeExtensions) ? $this->getExtension() : ''; \n } \n - protected function isBladeFile() \n + public function getLastModifiedTime() \n + { \n + return $this->file->getMTime(); \n + } \n + \n + public function isBladeFile() \n { \n return strpos($this->getBasename(), '.blade.' . $this->getExtension()) > 0; \n }", "msg": "Add getLastModifiedTime to InputFile for cache validation"}
{"diff": "a / None \n  b / src/Scaffold/CustomInstaller.php \n+<?php \n + \n +namespace TightenCo\\Jigsaw\\Scaffold; \n + \n +class CustomInstaller \n +{ \n + public $ignore = []; \n + protected $builder; \n + \n + public function install(ScaffoldBuilder $builder) \n + { \n + $this->builder = $builder; \n + \n + return $this; \n + } \n + \n + public function ask() \n + { \n + // \n + } \n + \n + public function clean() \n + { \n + // \n + } \n + \n + public function copy() \n + { \n + // \n + } \n + \n + public function delete($files = null) \n + { \n + $this->builder->deleteSiteFiles($files); \n + } \n + \n + public function from() \n + { \n + // \n + } \n + \n + public function ignore($files) \n + { \n + $this->ignore = array_merge($this->ignore, collect($files)->toArray()); \n + } \n + \n + public function output() \n + { \n + // \n + } \n + \n + public function run($commands = null) \n + { \n + // \n + } \n +}", "msg": "Add CustomInstaller (prelim) to handle customized init.php install files"}
{"diff": "a / src/File/Filesystem.php \n  b / src/File/Filesystem.php \n@@ -19,7 +19,7 @@ class Filesystem extends BaseFilesystem \n { \n $directory_path = collect(explode('/', $file_path)); \n $directory_path->pop(); \n - $directory_path = trimPath($directory_path->implode('/')); \n + $directory_path = rightTrimPath($directory_path->implode('/')); \n if (! $this->isDirectory($directory_path)) { \n $this->makeDirectory($directory_path, 0755, true);", "msg": "Switch to righTrim directory path\nFixes"}
{"diff": "a / src/Parsers/JigsawMarkdownParser.php \n  b / src/Parsers/JigsawMarkdownParser.php \n@@ -6,6 +6,12 @@ use Michelf\\MarkdownExtra; \n class JigsawMarkdownParser extends MarkdownExtra \n { \n + public function __construct() \n + { \n + parent::__construct(); \n + $this->code_class_prefix = 'language_'; \n + } \n + \n public function text($text) \n { \n return $this->transform($text);", "msg": "Restore `language_` default prefix to class names for fenced code blocks"}
{"diff": "a / src/Parsers/JigsawMarkdownParser.php \n  b / src/Parsers/JigsawMarkdownParser.php \n@@ -10,6 +10,9 @@ class JigsawMarkdownParser extends MarkdownExtra \n { \n parent::__construct(); \n $this->code_class_prefix = 'language-'; \n + $this->url_filter_func = function ($url) { \n + return str_replace(\"{{'@'}}\", '@', $url); \n + }; \n } \n public function text($text)", "msg": "Restore `@` in mailto links that have been converted by MarkdownHandler"}
{"diff": "a / src/Collection/Collection.php \n  b / src/Collection/Collection.php \n@@ -26,6 +26,7 @@ class Collection extends BaseCollection \n $sortedItems = $this \n ->defaultSort($items) \n ->filter($this->getFilter()) \n + ->map($this->getMap()) \n ->keyBy(function ($item) { \n return $item->getFilename(); \n }); \n @@ -67,6 +68,19 @@ class Collection extends BaseCollection \n }; \n } \n + private function getMap() \n + { \n + $map = Arr::get($this->settings, 'map'); \n + \n + if ($map) { \n + return $map; \n + } \n + \n + return function ($item) { \n + return $item; \n + }; \n + } \n + \n private function defaultSort($items) \n { \n $sortSettings = collect(Arr::get($this->settings, 'sort'))->map(function ($setting) {", "msg": "Add support for mapping over collection inside of config"}
{"diff": "a / tests/SnapshotTest.php \n  b / tests/SnapshotTest.php \n@@ -25,7 +25,7 @@ class SnapshotTest extends SnapshotTestCase \n */ \n public function ds_store_files_are_not_built() \n { \n - $this->assertFileDoesNotExist('tests/build-testing/.DS_Store', 'DS_Store was built'); \n + $this->assertFileNotExists('tests/build-testing/.DS_Store', 'DS_Store was built'); \n } \n /**", "msg": "use assertFileNotExists for backwards compatability"}
{"diff": "a / src/Console/BuildCommand.php \n  b / src/Console/BuildCommand.php \n@@ -75,9 +75,21 @@ class BuildCommand extends Command \n $environmentConfigPath = $this->getAbsolutePath(\"config.{$env}.php\"); \n $environmentConfig = (new ConfigFile($environmentConfigPath))->config; \n - $this->app->config = collect( \n - ConfigFile::mergeConfigs($this->app->config, $environmentConfig) \n - ); \n + $baseConfig = $this->app->config; \n + \n + $this->app->config = collect($baseConfig) \n + ->merge(collect($environmentConfig)) \n + ->filter(function ($item) { \n + return $item !== null; \n + }); \n + \n + if ($this->app->config['merge_collections']) { \n + $this->app->config->put('collections', $this->app->config->get('collections')->map( \n + function ($envConfig, $key) use ($baseConfig) { \n + return array_merge($baseConfig->get('collections')->get($key), $envConfig); \n + } \n + )); \n + } \n } \n private function updateBuildPaths($env)", "msg": "Simplify merge and hide behind config flag"}
{"diff": "a / src/Annotator/ModelAnnotator.php \n  b / src/Annotator/ModelAnnotator.php \n@@ -3,6 +3,7 @@ namespace IdeHelper\\Annotator; \n use Cake\\Core\\App; \n use Cake\\Database\\Schema\\TableSchema; \n +use Cake\\ORM\\Association\\HasMany; \n use Cake\\ORM\\AssociationCollection; \n use Cake\\ORM\\Association\\BelongsToMany; \n use Cake\\ORM\\Table; \n @@ -217,6 +218,7 @@ class ModelAnnotator extends AbstractAnnotator { \n $className = App::className($through, 'Model/Table', 'Table') ?: static::CLASS_TABLE; \n + $type = HasMany::class; \n $associations[$type][$through] = $className; \n }", "msg": "Fix belongsToMany join table relation to be hasMany."}
{"diff": "a / src/Generator/Task/TableFinderTask.php \n  b / src/Generator/Task/TableFinderTask.php \n@@ -7,7 +7,7 @@ use Cake\\ORM\\Association; \n use Cake\\ORM\\Query; \n use Cake\\ORM\\Table; \n use Cake\\ORM\\TableRegistry; \n -use Exception; \n +use Throwable; \n use ReflectionClass; \n class TableFinderTask extends ModelTask { \n @@ -75,7 +75,7 @@ class TableFinderTask extends ModelTask { \n $finderMap = $this->invokeProperty($behaviors, '_finderMap'); \n $customFinders = array_merge($customFinders, array_keys($finderMap)); \n - } catch (Exception $exception) { \n + } catch (Throwable $exception) { \n } \n $allFinders = array_merge($allFinders, $customFinders);", "msg": "Allow TableFinderTask to work with abstract models"}
{"diff": "a / src/LinkPager.php \n  b / src/LinkPager.php \n@@ -18,6 +18,16 @@ use yii\\helpers\\ArrayHelper; \n * LinkPager works with a [[\\yii\\widget\\Pagination]] object which specifies the total number \n * of pages and the current page number. \n * \n + * To apply LinkPager globally e.g. in all GridViews, set in configuration DI: \n + * \n + * ```php \n + * 'container' => [ \n + * 'definitions' => [ \n + * \\yii\\widgets\\LinkPager::class => \\yii\\bootstrap4\\LinkPager::class, \n + * ], \n + * ], \n + * ``` \n + * \n * @see https://getbootstrap.com/docs/4.1/components/pagination/ \n * @author Simon Karlen <simi.albi@outlook.com> \n * @since 2.0.2", "msg": "Documentation - added example of how to apply LinkPager globally"}
{"diff": "a / src/ActiveForm.php \n  b / src/ActiveForm.php \n@@ -130,7 +130,7 @@ class ActiveForm extends \\yii\\widgets\\ActiveForm \n /** \n * {@inheritdoc} \n - * @return \\yii\\widgets\\ActiveField \n + * @return \\yii\\bootstrap4\\ActiveField \n */ \n public function field($model, $attribute, $options = []) \n {", "msg": "Update docblock with proper return type on field()"}
{"diff": "a / src/Patches.php \n  b / src/Patches.php \n@@ -88,10 +88,27 @@ class Patches implements PluginInterface, EventSubscriberInterface { \n public static function getSubscribedEvents() { \n return array( \n PackageEvents::POST_PACKAGE_UNINSTALL => \"removePatches\", \n + PackageEvents::PRE_PACKAGE_INSTALL => \"resetAppliedPatches\", \n + PackageEvents::PRE_PACKAGE_UPDATE => \"resetAppliedPatches\", \n ScriptEvents::PRE_AUTOLOAD_DUMP => \"postInstall\" \n ); \n } \n + public function resetAppliedPatches(\\Composer\\Installer\\PackageEvent $event) { \n + foreach ($event->getOperations() as $operation) { \n + if ($operation->getJobType() != 'install') { \n + continue; \n + } \n + \n + $package = $this->getPackageFromOperation($operation); \n + $extra = $package->getExtra(); \n + \n + unset($extra['patches_applied']); \n + \n + $package->setExtra($extra); \n + } \n + } \n + \n protected function preparePatchDefinitions($patches, $ownerPackage = null) { \n $_patches = array();", "msg": "Re-introduced a reset mechanism to make sure that when package is installed, all patches are re-applied"}
{"diff": "a / src/Package/Collector.php \n  b / src/Package/Collector.php \n@@ -33,6 +33,7 @@ class Collector \n { \n $targets = array(); \n + /** @var \\Composer\\Package\\CompletePackageInterface[] $packages */ \n $packages = $repository->getPackages(); \n foreach ($packages as $package) {", "msg": "Added type comment to enable IDE auto-complete"}
{"diff": "a / src/Repository/PatchesApplier.php \n  b / src/Repository/PatchesApplier.php \n@@ -181,9 +181,6 @@ class PatchesApplier \n ); \n $this->installationManager->install($repository->getSource(), $operation); \n - \n -// \\Composer\\Script\\ScriptEvents::POST_INSTALL_CMD \n -// $resetTarget->getDeployStrategy()->deploy(); \n } finally { \n OutputUtils::resetVerbosity($output, $verbosityLevel); \n }", "msg": "remove tmp added code while gathering information on how certain post-install events trigger deploy"}
{"diff": "a / src/Composer/Commands/ValidateCommand.php \n  b / src/Composer/Commands/ValidateCommand.php \n@@ -149,16 +149,16 @@ class ValidateCommand extends \\Composer\\Command\\BaseCommand \n } \n if ($groups = array_filter($groups)) { \n - $output->writeln('<error>Orphans found!</error>'); \n - \n foreach ($groups as $packageName => $paths) { \n - $output->writeln(sprintf('<info>%s</info>', $packageName)); \n + $output->writeln(sprintf('- <info>%s</info>', $packageName)); \n foreach ($paths as $path) { \n - $output->writeln(sprintf('- %s', $path)); \n + $output->writeln(sprintf(' ~ %s', $path)); \n } \n } \n + $output->writeln('<error>Orphans found!</error>'); \n + \n exit(1); \n } else { \n $output->writeln('<info>Done</info>');", "msg": "moved error message as the last message before exit"}
{"diff": "a / src/Factories/ConfigFactory.php \n  b / src/Factories/ConfigFactory.php \n@@ -97,6 +97,13 @@ class ConfigFactory \n $defaults \n ); \n + $config = $this->establishValidSubOperations($config, $subConfigKeys); \n + \n + return new PluginConfig($config); \n + } \n + \n + private function establishValidSubOperations(array $config, array $subConfigKeys) \n + { \n $subOperationKeys = array_merge( \n array_filter($subConfigKeys), \n array(PluginConfig::OS_DEFAULT) \n @@ -133,6 +140,6 @@ class ConfigFactory \n } \n } \n - return new PluginConfig($config); \n + return $config; \n } \n }", "msg": "increase code readability by moving subOperation resolver to separate private function of a class"}
{"diff": "a / src/Utils/FileSystemUtils.php \n  b / src/Utils/FileSystemUtils.php \n@@ -29,12 +29,13 @@ class FileSystemUtils \n $files[substr($path, strlen($rootPath) + 1)] = $path; \n } \n - array_multisort( \n - array_keys($files), \n - SORT_NATURAL | SORT_FLAG_CASE, \n + $sequence = array_keys($files); \n + \n + natsort($sequence); \n + \n + return array_replace( \n + array_flip($sequence), \n $files \n ); \n - \n - return $files; \n } \n }", "msg": "switch file list sorting to use basic natsort() due to certain multisort operation flags not being available on 5.3"}
{"diff": "a / app/Modules/System/Events.php \n  b / app/Modules/System/Events.php \n@@ -29,7 +29,7 @@ Event::listen('backend.menu', function($user) \n ), \n array( \n 'uri' => 'admin/roles', \n - 'title' => __d('users', 'User Roles'), \n + 'title' => __d('system', 'User Roles'), \n 'label' => '', \n 'weight' => 1, \n ),", "msg": "small fix - ranslated message back with Domain."}
{"diff": "a / app/Controllers/BaseController.php \n  b / app/Controllers/BaseController.php \n@@ -9,6 +9,7 @@ use Nova\\Routing\\Controller; \n use Nova\\Support\\Contracts\\RenderableInterface; \n use Nova\\Support\\Facades\\App; \n use Nova\\Support\\Facades\\Config; \n +use Nova\\Support\\Facades\\Language; \n use Nova\\Support\\Facades\\View; \n use Nova\\Support\\Str; \n @@ -127,7 +128,17 @@ class BaseController extends Controller \n } \n if ($this->autoLayout() && ($response instanceof RenderableInterface)) { \n + $direction = Language::direction(); \n + \n + if ($direction === 'ltr') { \n + $view = $this->getLayoutName(); \n + } else { \n + $layout = 'RTL/' .$this->layout; \n + \n + if (! View::exists($view = $this->getLayoutName($layout))) { \n $view = $this->getLayoutName(); \n + } \n + } \n return View::make($view, $this->viewData)->with('content', $response); \n }", "msg": "Implement the RTL support for Layouts"}
{"diff": "a / src/WebAssert.php \n  b / src/WebAssert.php \n@@ -319,10 +319,9 @@ class WebAssert \n public function responseContains($text) \n { \n $actual = $this->session->getPage()->getContent(); \n - $regex = '/'.preg_quote($text, '/').'/ui'; \n $message = sprintf('The string \"%s\" was not found anywhere in the HTML response of the current page.', $text); \n - $this->assert((bool) preg_match($regex, $actual), $message); \n + $this->assert(strpos($actual, $text) !== FALSE, $message); \n } \n /** \n @@ -335,10 +334,9 @@ class WebAssert \n public function responseNotContains($text) \n { \n $actual = $this->session->getPage()->getContent(); \n - $regex = '/'.preg_quote($text, '/').'/ui'; \n $message = sprintf('The string \"%s\" appears in the HTML response of this page, but it should not.', $text); \n - $this->assert(!preg_match($regex, $actual), $message); \n + $this->assert(strpos($actual, $text) === FALSE, $message); \n } \n /**", "msg": "Modify response[Contains|NotContains] to use strpos vs preg_match\nThis has a distinct performance benefit although probably quite minor in most cases."}
{"diff": "a / Attribute/EventListener.php \n  b / Attribute/EventListener.php \n@@ -22,7 +22,8 @@ class EventListener \n public function __construct( \n public ?string $event = null, \n public ?string $method = null, \n - public int $priority = 0 \n + public int $priority = 0, \n + public ?string $dispatcher = null, \n ) { \n } \n }", "msg": "[EventDispatcher] add missing \"dispatcher\" property on #[EventListener]"}
{"diff": "a / addons/default/visiosoft/advs-module/src/Http/Controller/Admin/AdvsController.php \n  b / addons/default/visiosoft/advs-module/src/Http/Controller/Admin/AdvsController.php \n@@ -83,8 +83,14 @@ class AdvsController extends AdminController \n $table->setColumns([ \n 'cover_photo' => [ \n - 'wrapper' => '<img width=\"64\" src=\"{value.cover_photo}\">', \n - 'value' => ['cover_photo' => 'entry.cover_photo'] \n + 'wrapper' => function (EntryInterface $entry, Request $request) { \n + if (strpos($entry->cover_photo, 'http') === 0) { \n + $wrapper = '<img width=\"64\" src=\"'.$entry->cover_photo.'\">'; \n + } else { \n + $wrapper = '<img width=\"64\" src=\"'.$request->root().$entry->cover_photo.'\">'; \n + } \n + return $wrapper; \n + }, \n ], \n 'entry.id', \n 'name' => [", "msg": "Show ad cover photo, Fixed cover photo not showing if it was saved localy."}
{"diff": "a / resources/streams/config/currencies.php \n  b / resources/streams/config/currencies.php \n@@ -77,7 +77,7 @@ return [ \n 'separator' => ',', \n 'point' => '.', \n 'decimals' => 2, \n - 'symbol' => 'L', \n + 'symbol' => 'Leke', \n ], \n 'AMD' => [ \n 'name' => 'Armenian Dram',", "msg": "change currency symbol & fix trans"}
{"diff": "a / addons/default/visiosoft/advs-module/migrations/2020_10_16_124151_visiosoft.module.advs__create_option_configuration_stream.php \n  b / addons/default/visiosoft/advs-module/migrations/2020_10_16_124151_visiosoft.module.advs__create_option_configuration_stream.php \n@@ -52,7 +52,6 @@ class VisiosoftModuleAdvsCreateOptionConfigurationStream extends Migration \n ], \n 'option_json' => [ \n 'required' => true, \n - 'unique' => true, \n ], \n ];", "msg": "oc product options error fixed"}
{"diff": "a / addons/default/visiosoft/cats-module/src/Category/CategoryModel.php \n  b / addons/default/visiosoft/cats-module/src/Category/CategoryModel.php \n@@ -15,7 +15,7 @@ class CategoryModel extends CatsCategoryEntryModel implements CategoryInterface \n ->first(); \n } \n - public function getParentCats($id, $type = null) \n + public function getParentCats($id, $type = null, $noMainCat = true) \n { \n $cat = $this->getCat($id); \n $catNames = array(); \n @@ -30,8 +30,10 @@ class CategoryModel extends CatsCategoryEntryModel implements CategoryInterface \n if ($parCat->parent_category_id == \"\") { \n if ($type == \"add_main\") \n $catNames[] = $parCat->name; \n + if ($noMainCat) { \n break; \n } \n + } \n $catNames[] = $parCat->name; \n $cat_ids[] = $parCat->id; \n $subCat = $parCat->parent_category_id;", "msg": "Advanced Package ad limit is required"}
{"diff": "a / addons/default/visiosoft/profile-module/src/Http/Controller/CacheController.php \n  b / addons/default/visiosoft/profile-module/src/Http/Controller/CacheController.php \n@@ -12,7 +12,7 @@ class CacheController extends PublicController \n $profile_img = $user ? $this->dispatch( \n new MakeImageInstance($user->file ?: 'theme::images/no_profile.svg', 'img') \n )->url() : $user; \n - $user = $user ? $user->first_name . ' ' . $user->last_name : $user; \n + $user = $user ? $user->name() : $user; \n $getAddBlockHtml = new addBlock('navigation/dropdown', []); \n $addBlockHtml = $getAddBlockHtml->handle();", "msg": "Subscriptions Sentry Error -Trying to get property 'name' of non-object"}
{"diff": "a / addons/default/visiosoft/advs-module/src/Http/Controller/AdvsController.php \n  b / addons/default/visiosoft/advs-module/src/Http/Controller/AdvsController.php \n@@ -715,6 +715,7 @@ class AdvsController extends PublicController \n if ($ad->created_by_id != Auth::id()) { \n $this->messages->error(trans('visiosoft.module.advs::message.delete_author_error')); \n + return back(); \n } \n $ad->delete();", "msg": "Deleting adv that doesnt belong to the user"}
{"diff": "a / src/Generator/DocBlock/Tag/VarTag.php \n  b / src/Generator/DocBlock/Tag/VarTag.php \n@@ -33,7 +33,7 @@ class VarTag extends AbstractTypeableTag implements TagInterface \n /** \n * {@inheritDoc} \n */ \n - public function getName() \n + public function getName() : string \n { \n return 'var'; \n } \n @@ -50,10 +50,7 @@ class VarTag extends AbstractTypeableTag implements TagInterface \n } \n } \n - /** \n - * @return string|null \n - */ \n - public function getVariableName() \n + public function getVariableName() : ?string \n { \n return $this->variableName; \n }", "msg": "adding return hints to applicable methods"}
{"diff": "a / src/Generator/AbstractMemberGenerator.php \n  b / src/Generator/AbstractMemberGenerator.php \n@@ -36,7 +36,7 @@ abstract class AbstractMemberGenerator extends AbstractGenerator \n /**#@-*/ \n /** \n - * @var DocBlockGenerator \n + * @var DocBlockGenerator|null \n */ \n protected $docBlock; \n @@ -237,7 +237,7 @@ abstract class AbstractMemberGenerator extends AbstractGenerator \n } \n /** \n - * @return DocBlockGenerator \n + * @return DocBlockGenerator|null \n */ \n public function getDocBlock() \n {", "msg": "Align the type of $docBlock with reality"}
{"diff": "a / src/Generator/TypeGenerator.php \n  b / src/Generator/TypeGenerator.php \n@@ -133,7 +133,10 @@ final class TypeGenerator implements GeneratorInterface \n if ($nullable) { \n $types[0]->assertCanBeStandaloneNullable(); \n } \n - } else { \n + \n + return new self($types, $nullable); \n + } \n + \n if ($nullable) { \n throw new InvalidArgumentException(sprintf( \n 'Type \"%s\" is a union type, and therefore cannot be also marked nullable with the \"?\" prefix', \n @@ -148,7 +151,6 @@ final class TypeGenerator implements GeneratorInterface \n $atomicType->assertCanUnionWith($otherTypes); \n } \n - } \n return new self($types, $nullable); \n }", "msg": "Reduced method nesting level as suggested by\nRef:"}
{"diff": "a / src/Reflection/ParameterReflection.php \n  b / src/Reflection/ParameterReflection.php \nnamespace Laminas\\Code\\Reflection; \n +use Laminas\\Code\\Reflection\\DocBlock\\Tag\\ParamTag; \n use ReflectionClass; \n use ReflectionMethod; \n use ReflectionParameter; \n @@ -92,10 +93,19 @@ class ParameterReflection extends ReflectionParameter implements ReflectionInter \n return null; \n } \n + /** @var ParamTag[] $params */ \n $params = $docBlock->getTags('param'); \n + $paramTag = $params[$this->getPosition()] ?? null; \n + $variableName = '$' . $this->getName(); \n - if (isset($params[$this->getPosition()])) { \n - return $params[$this->getPosition()]->getType(); \n + if ($paramTag && ('' === $paramTag->getVariableName() || $variableName === $paramTag->getVariableName())) { \n + return $paramTag->getTypes()[0] ?? ''; \n + } \n + \n + foreach ($params as $param) { \n + if ($param->getVariableName() === $variableName) { \n + return $param->getTypes()[0] ?? ''; \n + } \n } \n return null;", "msg": "Incorrect argument type\nFix the issue"}
{"diff": "a / src/Generator/ClassGenerator.php \n  b / src/Generator/ClassGenerator.php \n@@ -446,10 +446,6 @@ class ClassGenerator extends AbstractGenerator implements TraitUsageInterface \n */ \n public function setImplementedInterfaces(array $implementedInterfaces) \n { \n - // This loop is just validating that the given `$implementedInterfaces` contains valid syntax/symbols \n - array_map(static fn($implementedInterface) => \n - TypeGenerator::fromTypeString($implementedInterface), $implementedInterfaces); \n - \n $this->implementedInterfaces = $implementedInterfaces; \n return $this; \n }", "msg": "drop validating that the given `$implementedInterfaces` contains valid syntax/symbols"}
{"diff": "a / src/Reflection/DocBlock/Tag/ThrowsTag.php \n  b / src/Reflection/DocBlock/Tag/ThrowsTag.php \n@@ -14,7 +14,7 @@ class ThrowsTag implements TagInterface, PhpDocTypedTagInterface \n */ \n protected $types = []; \n - /** @var string */ \n + /** @var string|null */ \n protected $description; \n /** \n @@ -57,7 +57,7 @@ class ThrowsTag implements TagInterface, PhpDocTypedTagInterface \n } \n /** \n - * @return string \n + * @return string|null \n */ \n public function getDescription() \n {", "msg": "More precise definition of `ThrowsTag#$description` state"}
{"diff": "a / test/Generator/ValueGeneratorTest.php \n  b / test/Generator/ValueGeneratorTest.php \n@@ -479,7 +479,7 @@ EOS; \n public function invalidValue(): Generator \n { \n yield 'object' => [new DateTime(), DateTime::class]; \n - yield 'resource' => [fopen('php://input', 'r'), 'resource']; \n + yield 'resource' => [fopen('php://input', 'r'), 'resource (stream)']; \n } \n /**", "msg": "Since we now use `get_debug_type()` for some errors, adjusting associated test expectations"}
{"diff": "a / src/Generator/FileGenerator.php \n  b / src/Generator/FileGenerator.php \n@@ -37,6 +37,18 @@ use const T_DOC_COMMENT; \n use const T_OPEN_TAG; \n use const T_WHITESPACE; \n +/** \n + * @psalm-type InputUses = array< \n + * string|int, \n + * array{ \n + * 'use': non-empty-string, \n + * 'as': non-empty-string|null \n + * }|array{ \n + * non-empty-string, \n + * non-empty-string|null \n + * }|non-empty-string \n + * > \n + */ \n class FileGenerator extends AbstractGenerator \n { \n protected string $filename = ''; \n @@ -219,16 +231,7 @@ class FileGenerator extends AbstractGenerator \n } \n /** \n - * @param array< \n - * string|int, \n - * array{ \n - * 'use': non-empty-string, \n - * 'as': non-empty-string|null \n - * }|array{ \n - * non-empty-string, \n - * non-empty-string|null \n - * }|non-empty-string \n - * > $uses \n + * @param InputUses $uses \n * @return FileGenerator \n */ \n public function setUses(array $uses)", "msg": "Moved complex array shape docblock to the class definition, to avoid PHPCS crashing on it"}
{"diff": "a / src/Reflection/MethodReflection.php \n  b / src/Reflection/MethodReflection.php \n@@ -368,7 +368,7 @@ class MethodReflection extends PhpReflectionMethod implements ReflectionInterfac \n * \n * @param array $haystack \n * @param int $position \n - * @return bool|void \n + * @return bool|null \n */ \n protected function isEndingBrace($haystack, $position) \n { \n @@ -428,6 +428,8 @@ class MethodReflection extends PhpReflectionMethod implements ReflectionInterfac \n return false; \n } \n } \n + \n + return null; \n } \n /**", "msg": "Added a default execution branch that returns `null` in `MethodReflection#isEndingBrace()`\nRef:"}
{"diff": "a / src/Oci8/Oci8Connection.php \n  b / src/Oci8/Oci8Connection.php \n@@ -218,7 +218,7 @@ class Oci8Connection extends Connection \n * @param int $returnType (PDO::PARAM_*) \n * @return mixed $returnType \n */ \n - public function executeFunction($sql, array $bindings = [], $returnType = PDO::PARAM_STR) \n + public function executeFunction($sql, array $bindings = [], $returnType = PDO::PARAM_STR, $length = null) \n { \n $query = $this->getPdo()->prepare('begin :result := ' . $sql . '; end;'); \n @@ -230,7 +230,7 @@ class Oci8Connection extends Connection \n $query->bindParam($key, $value); \n } \n - $query->bindParam(':result', $result, $returnType); \n + $query->bindParam(':result', $result, $returnType, $length); \n $query->execute(); \n return $result;", "msg": "Added parameter length in executeFunction\nparameter length purpose for custom length in result bindParam"}
{"diff": "a / src/Oci8/Oci8Connection.php \n  b / src/Oci8/Oci8Connection.php \n@@ -343,19 +343,6 @@ class Oci8Connection extends Connection \n return $this->getPdo()->prepare($sql); \n } \n - /** \n - * Bind values to their parameters in the given statement. \n - * \n - * @param PDOStatement $statement \n - * @param array $bindings \n - */ \n - public function bindValues($statement, $bindings) \n - { \n - foreach ($bindings as $key => $value) { \n - $statement->bindParam($key, $bindings[$key]); \n - } \n - } \n - \n /** \n * Get the default query grammar instance. \n *", "msg": "Use bindValues from base Connection.\nFix in relation to"}
{"diff": "a / src/Oci8/Connectors/OracleConnector.php \n  b / src/Oci8/Connectors/OracleConnector.php \n@@ -183,8 +183,11 @@ class OracleConnector extends Connector implements ConnectorInterface \n $address .= '(ADDRESS = (PROTOCOL = ' . $config['protocol'] . ')(HOST = ' . trim($host[$i]) . ')(PORT = ' . $config['port'] . '))'; \n } \n + // backwards compatibility for users dont have this field in their php config \n + $loadBalance = $config['load_balance'] ?? 'yes'; \n + \n // create a tns with multiple address connection \n - $config['tns'] = \"(DESCRIPTION = {$address} (LOAD_BALANCE = {$config['load_balance']}) (FAILOVER = on) (CONNECT_DATA = (SERVER = DEDICATED) ({$config['service']})))\"; \n + $config['tns'] = \"(DESCRIPTION = {$address} (LOAD_BALANCE = {$loadBalance}) (FAILOVER = on) (CONNECT_DATA = (SERVER = DEDICATED) ({$config['service']})))\"; \n } \n return $config;", "msg": "add backwards compatibility for load balance"}
{"diff": "a / packages/NodeTypeResolver/src/NodeVisitor/NamespaceResolver.php \n  b / packages/NodeTypeResolver/src/NodeVisitor/NamespaceResolver.php \n@@ -32,7 +32,7 @@ final class NamespaceResolver extends NodeVisitorAbstract \n public function enterNode(Node $node): void \n { \n if ($node instanceof Namespace_) { \n - $this->namespace = $node->name->toString(); \n + $this->namespace = $node->name ? $node->name->toString() : ''; \n } \n if ($node instanceof Use_) {", "msg": "NamespaceResolver: fix empty namespace"}
{"diff": "a / src/Rector/Contrib/Nette/Bootstrap/RemoveConfiguratorConstantsRector.php \n  b / src/Rector/Contrib/Nette/Bootstrap/RemoveConfiguratorConstantsRector.php \n@@ -4,6 +4,7 @@ namespace Rector\\Rector\\Contrib\\Nette\\Bootstrap; \n use PhpParser\\Node; \n use PhpParser\\Node\\Expr\\ClassConstFetch; \n +use PhpParser\\Node\\Expr\\Variable; \n use PhpParser\\Node\\Scalar\\String_; \n use Rector\\Node\\Attribute; \n use Rector\\Rector\\AbstractRector; \n @@ -42,6 +43,10 @@ final class RemoveConfiguratorConstantsRector extends AbstractRector \n /** @var Node\\Name\\FullyQualified $fqnName */ \n $fqnName = $classConstFetchNode->class->getAttribute(Attribute::RESOLVED_NAME); \n + if ($fqnName === null && $classConstFetchNode->class instanceof Variable) { \n + return (string) $classConstFetchNode->class->name; \n + } \n + \n return $fqnName->toString(); \n }", "msg": "RemoveConfiguratorConstantsRector: fix for var"}
{"diff": "a / packages/NodeTypeResolver/src/NodeVisitor/MethodResolver.php \n  b / packages/NodeTypeResolver/src/NodeVisitor/MethodResolver.php \n@@ -4,6 +4,7 @@ namespace Rector\\NodeTypeResolver\\NodeVisitor; \n use PhpParser\\Node; \n use PhpParser\\Node\\Expr\\MethodCall; \n +use PhpParser\\Node\\Identifier; \n use PhpParser\\Node\\Stmt\\ClassMethod; \n use PhpParser\\Node\\Stmt\\Expression; \n use PhpParser\\NodeVisitorAbstract; \n @@ -40,8 +41,10 @@ final class MethodResolver extends NodeVisitorAbstract \n } \n if ($node instanceof MethodCall) { \n + if ($node->name instanceof Identifier) { \n $this->methodCall = $node->name->toString(); \n } \n + } \n $node->setAttribute(Attribute::METHOD_NAME, $this->methodName); \n $node->setAttribute(Attribute::METHOD_CALL, $this->methodCall);", "msg": "MethodResolver: fix for non-Identifier"}
{"diff": "a / src/Printer/BetterStandardPrinter.php \n  b / src/Printer/BetterStandardPrinter.php \n@@ -7,11 +7,16 @@ use PhpParser\\PrettyPrinter\\Standard; \n final class BetterStandardPrinter extends Standard \n { \n /** \n - * Do not preslash slashes. \n - * Was causing `Vendor\\Class` => `Vendor\\\\Class`. \n + * Do not preslash all slashes (parent behavior), but only those: \n + * \n + * - followed by \"\\\" \n + * - by \"'\" \n + * - or the end of the string \n + * \n + * Prevents `Vendor\\Class` => `Vendor\\\\Class`. \n */ \n protected function pSingleQuotedString(string $string): string \n { \n - return '\\'' . addcslashes($string, '\\'') . '\\''; \n + return '\\'' . preg_replace(\"/'|\\\\\\\\(?=[\\\\\\\\']|$)/\", '\\\\\\\\$0', $string) . '\\''; \n } \n }", "msg": "Slashing - use better recommended regex and add explanation"}
{"diff": "a / src/Rector/Contrib/Nette/Utils/MagicMethodRector.php \n  b / src/Rector/Contrib/Nette/Utils/MagicMethodRector.php \n@@ -18,11 +18,6 @@ use Rector\\Regex\\MagicMethodMatcher; \n */ \n final class MagicMethodRector extends AbstractRector \n { \n - /** \n - * @var string \n - */ \n - private const NETTE_OBJECT_CLASS = 'Nette\\Object'; \n - \n /** \n * @var mixed[] \n */ \n @@ -121,12 +116,6 @@ final class MagicMethodRector extends AbstractRector \n private function isNetteObjectChild(Class_ $classNode): bool \n { \n - if ($classNode->extends === null) { \n - return false; \n - } \n - \n - $parentClassName = (string) $classNode->extends->getAttribute(Attribute::RESOLVED_NAME); \n - \n - return $parentClassName === self::NETTE_OBJECT_CLASS; \n + return in_array('Nette\\Object', (array) $classNode->getAttribute(Attribute::TYPES), true); \n } \n }", "msg": "MagicMethodRector - simplify class type analysis"}
{"diff": "a / packages/NodeTypeResolver/src/Contract/PerNodeTypeResolver/PerNodeTypeResolverInterface.php \n  b / packages/NodeTypeResolver/src/Contract/PerNodeTypeResolver/PerNodeTypeResolverInterface.php \n@@ -12,4 +12,10 @@ interface PerNodeTypeResolverInterface \n * @return string[] \n */ \n public function resolve(Node $node): array; \n + \n + /** \n + * If this resolves is subscribed to element that bears the type. \n + * E.g. name itself does not, bug object, new instance, property and method does. \n + */ \n + public function isPrimary(): bool; \n }", "msg": "PerNodeTypeResolverInterface - add isPrimary() method, to separate helper resolvers and actually type bearers"}
{"diff": "a / src/NodeChanger/MethodNameChanger.php \n  b / src/NodeChanger/MethodNameChanger.php \nnamespace Rector\\NodeChanger; \n -use PhpParser\\Node\\Expr\\MethodCall; \n +use PhpParser\\Node\\Expr; \n use PhpParser\\Node\\Identifier; \n final class MethodNameChanger \n { \n - public function renameNode(MethodCall $node, $oldToNewMethods): void \n + public function renameNode(Expr $node, $oldToNewMethods): void \n { \n if (is_array($oldToNewMethods)) { \n $oldNodeMethodName = $node->name->toString();", "msg": "Change Type of $node in MethodNameChanger to support Expr"}
{"diff": "a / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertCompareToSpecificMethodRector.php \n  b / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertCompareToSpecificMethodRector.php \n@@ -89,7 +89,7 @@ final class AssertCompareToSpecificMethodRector extends AbstractRector \n return false; \n } \n - $methodName = $secondArgumentValue->name->getFirst(); \n + $methodName = $secondArgumentValue->name->toString(); \n if (! isset($this->defaultOldToNewMethods[$methodName])) { \n return false; \n }", "msg": "Use toString instead of getFirst when getting the $methodName"}
{"diff": "a / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertIssetToSpecificMethodRector.php \n  b / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertIssetToSpecificMethodRector.php \n@@ -68,13 +68,9 @@ final class AssertIssetToSpecificMethodRector extends AbstractRector \n return false; \n } \n - /** @var Isset_ $issetNode */ \n - $issetNode = $firstArgumentValue; \n + $variableNodeClass = get_class($firstArgumentValue->vars[0]); \n - return in_array(get_class($issetNode->vars[0]), [ \n - ArrayDimFetch::class, \n - PropertyFetch::class, \n - ], true); \n + return in_array($variableNodeClass, [ArrayDimFetch::class, PropertyFetch::class], true); \n } \n /**", "msg": "Reduce complexity while checking instances"}
{"diff": "a / src/Rector/Dynamic/FluentReplaceRector.php \n  b / src/Rector/Dynamic/FluentReplaceRector.php \n@@ -41,6 +41,7 @@ final class FluentReplaceRector extends AbstractRector \n public function isCandidate(Node $node): bool \n { \n + // @todo this run has to be first, dual run? \n if ($node instanceof Return_) { \n if (! $node->expr instanceof Variable) { \n return false; \n @@ -76,17 +77,8 @@ final class FluentReplaceRector extends AbstractRector \n // method call to prepend \n $this->decoupleMethodCall($node); \n - /** @var MethodCall $previousMethodNodeCall */ \n - $previousMethodNodeCall = $node->var; \n - \n - // move method call one up \n - $node->name = $previousMethodNodeCall->name; \n - $node->var = $previousMethodNodeCall->var; \n - \n - // to clear indent \n - $node->setAttribute(Attribute::ORIGINAL_NODE, null); \n - \n - return $node; \n + /** @var MethodCall $node->var */ \n + return $node->var; \n } \n return $node;", "msg": "FluentReplaceRector: simplify inner return call"}
{"diff": "a / packages/BetterReflection/src/Reflector/SmartClassReflector.php \n  b / packages/BetterReflection/src/Reflector/SmartClassReflector.php \n@@ -167,6 +167,10 @@ final class SmartClassReflector \n private function isValidClassName(string $className): bool \n { \n + if (empty($className)) { \n + return false; \n + } \n + \n // invalid class types \n if (in_array($className, ['this', 'static', 'self', 'null', 'array', 'string', 'bool'], true)) { \n return false;", "msg": "SmartClassReflector - skip empty class names [closes"}
{"diff": "a / tests/Environment.php \n  b / tests/Environment.php \n@@ -31,15 +31,16 @@ trait Environment \n parent::setUp(); \n /* Install application */ \n - $this->artisan('db:wipe'); \n $this->loadLaravelMigrations(); \n $this->loadMigrationsFrom(realpath('./database/migrations')); \n $this->artisan('orchid:install'); \n /* Refresh application for route/breadcrumbs/orchid provider */ \n + if (!$this->app['router']->has('platform.main')) { \n $this->refreshApplication(); \n $this->loadLaravelMigrations(); \n $this->loadMigrationsFrom(realpath('./database/migrations')); \n + } \n $this->withFactories(Dashboard::path('database/factories'));", "msg": "Test execution optimization"}
{"diff": "a / resources/views/partials/layouts/th.blade.php \n  b / resources/views/partials/layouts/th.blade.php \n<th width=\"{{$width}}\" class=\"text-{{$align}}\" data-column=\"{{ $slug }}\"> \n - <div class=\"text-truncate\"> \n + <div> \n @if($sort) \n <a href=\"{{ $sortUrl }}\" \n class=\"@if(!is_sort($column)) text-muted @endif\">", "msg": "Fixed display filter in table"}
{"diff": "a / src/Filters/Filter.php \n  b / src/Filters/Filter.php \n@@ -55,7 +55,7 @@ abstract class Filter \n */ \n public function filter(Builder $builder): Builder \n { \n - $when = $this->parameters === null || $this->request->hasAny($this->parameters); \n + $when = empty($this->parameters) || $this->request->hasAny($this->parameters); \n return $builder->when($when, function (Builder $builder) { \n return $this->run($builder);", "msg": "Fixed launch of filters with empty parameter"}
{"diff": "a / resources/views/layouts/columns.blade.php \n  b / resources/views/layouts/columns.blade.php \n<div class=\"hbox hbox-auto-xs\"> \n @foreach($manyForms as $key => $column) \n <div class=\"hbox-col\"> \n - <div class=\"vbox py-3 @if(!$loop->first) pl-2 @endif @if(!$loop->last) pr-2 @endif\"> \n + <div class=\"vbox py-3 @if(!$loop->first) pl-md-2 @endif @if(!$loop->last) pr-md-2 @endif\"> \n @foreach($column as $item) \n {!! $item ?? '' !!} \n @endforeach", "msg": "Disable padding columns for mobile"}
{"diff": "a / database/migrations/2015_04_12_000000_create_orchid_users_table.php \n  b / database/migrations/2015_04_12_000000_create_orchid_users_table.php \n@@ -22,19 +22,8 @@ class CreateOrchidUsersTable extends Migration \n */ \n public function down() \n { \n - $connection = config('database.default'); \n - $driver = config(\"database.connections.{$connection}.driver\"); \n - \n - // Fallback for sqlite \n - if ($driver === 'sqlite') { \n - Schema::dropIfExists('users'); \n - \n - return; \n - } \n - \n Schema::table('users', function (Blueprint $table) { \n - $table->dropColumn('last_login'); \n - $table->dropColumn('permissions'); \n + $table->dropColumn(['last_login', 'permissions']); \n }); \n } \n }", "msg": "Fixed removal method. This can be done through dbal."}
{"diff": "a / resources/views/dummy/block.blade.php \n  b / resources/views/dummy/block.blade.php \n<div class=\"rounded bg-white mb-3 p-3\"> \n - <div class=\"border-dashed d-flex align-items-center w-100 rounded\" style=\"min-height: 250px;\"> \n + <div class=\"border-dashed d-flex align-items-center w-100 rounded overflow-hidden\" style=\"min-height: 250px;\"> \n <h2 class=\"text-muted center fw-light\">Dummy <small class=\"d-block text-center\">{{ Str::random(8) }}</small></h2> \n </div> \n </div>", "msg": "Added overflow-hidden for dummy block"}
{"diff": "a / routes/systems.php \n  b / routes/systems.php \n@@ -18,9 +18,6 @@ Route::post('files/sort', [AttachmentController::class, 'sort']) \n Route::delete('files/{id}', [AttachmentController::class, 'destroy']) \n ->name('systems.files.destroy'); \n -Route::post('files/get', [AttachmentController::class, 'getFilesByIds']) \n - ->name('systems.files.getFilesByIds'); \n - \n Route::put('files/post/{id}', [AttachmentController::class, 'update']) \n ->name('systems.files.update');", "msg": "refs Remove unusage route"}
{"diff": "a / resources/views/fields/radiobutton.blade.php \n  b / resources/views/fields/radiobutton.blade.php \n<label class=\"btn btn-default @if($active($key, $value)) active @endif\" \n data-action=\"click->radiobutton#checked\" \n > \n - <input {{ $attributes }} \n + <input {{ $attributes->except('id') }} \n @if($active($key, $value)) checked @endif \n - value=\"{{ $key }}\" \n + value=\"{{ $key }}\" id=\"{{ $key }}-{{$id}}\" \n >{{ $option }}</label> \n @endforeach \n </div>", "msg": "Solve Radio buttons id duplicated"}
{"diff": "a / resources/views/layouts/modal.blade.php \n  b / resources/views/layouts/modal.blade.php \ndata-form-button-text=\"{{ __('Loading...') }}\" \n > \n <div class=\"modal-header\"> \n - <h4 class=\"modal-title text-black fw-light\" data-target=\"modal.title\">{{$title}}</h4> \n + <h4 class=\"modal-title text-black fw-light\" data-modal-target=\"title\">{{$title}}</h4> \n <button type=\"button\" class=\"btn-close\" title=\"Close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"> \n </button> \n </div>", "msg": "data-target attribute is deprecated\nThis notification will appear when you open the modal:\nPlease replace data-target=\"modal.title\" with data-modal-target=\"title\". The data-target attribute is deprecated and will be removed in a future version of Stimulus."}
{"diff": "a / resources/views/partials/welcome.blade.php \n  b / resources/views/partials/welcome.blade.php \n</div> \n </div> \n - <div class=\"row bg-light m-0 p-4 border-top rounded-bottom\"> \n + <div class=\"row bg-light m-0 p-md-4 p-3 border-top rounded-bottom\"> \n <div class=\"col-md-6 my-2\"> \n <h3 class=\"text-muted fw-light\">", "msg": "Better welcome paddings"}
{"diff": "a / src/Filters/Filterable.php \n  b / src/Filters/Filterable.php \n@@ -33,16 +33,14 @@ trait Filterable \n * Apply the filter to the given selection. \n * \n * @param Builder $query \n - * @param string|Selection $selection \n - * \n - * @throws \\Illuminate\\Contracts\\Container\\BindingResolutionException \n + * @param string|Selection $class \n * \n * @return Builder \n */ \n - public function scopeFiltersApplySelection(Builder $query, $selection): Builder \n + public function scopeFiltersApplySelection(Builder $query, $class): Builder \n { \n /** @var Selection $selection */ \n - $selection = is_object($selection) ? $selection : resolve($selection); \n + $selection = is_object($class) ? $class : resolve($class); \n $filters = $selection->filters(); \n @@ -66,8 +64,8 @@ trait Filterable \n } \n return is_iterable($kit) \n - ? $this->filtersApply($kit) \n - : $this->filtersApplySelection($kit); \n + ? $this->scopeFiltersApply($builder, $kit) \n + : $this->scopeFiltersApplySelection($builder, $kit); \n } \n /**", "msg": "refs Fixed using filters with parameters"}
{"diff": "a / stubs/app/Orchid/Screens/Examples/ExampleScreen.php \n  b / stubs/app/Orchid/Screens/Examples/ExampleScreen.php \n@@ -169,9 +169,9 @@ class ExampleScreen extends Screen \n ->width('150') \n ->render(function (Repository $model) { \n // Please use view('path') \n - return \"<img src='https://picsum.photos/450/200?random={$model->get('id')}' \n + return \"<img src='https://loremflickr.com/500/300?random={$model->get('id')}' \n alt='sample' \n - class='mw-100 d-block img-fluid'> \n + class='mw-100 d-block img-fluid rounded-1 w-100'> \n <span class='small text-muted mt-1 mb-0'># {$model->get('id')}</span>\"; \n }),", "msg": "Replaced picsum.photos to loremflickr.com due to inaccessibility for some users"}
{"diff": "a / src/Discord/Parts/User/Member.php \n  b / src/Discord/Parts/User/Member.php \n@@ -55,6 +55,7 @@ class Member extends Part \n /** \n * Updates the member from a new presence update object. \n + * This is an internal function and is not meant to be used by a public application. \n * \n * @param PresenceUpdate $presence \n *", "msg": "Added disclaimer to update presence function"}
{"diff": "a / src/Discord/Parts/Guild/Role.php \n  b / src/Discord/Parts/Guild/Role.php \n@@ -119,6 +119,7 @@ class Role extends Part \n 'hoist' => $this->hoist, \n 'color' => $this->color, \n 'permissions' => $this->permissions->bitwise, \n + 'mentionable' => $this->mentionable, \n ]; \n }", "msg": "Allow roles to update mentionability, close"}
{"diff": "a / src/Discord/Discord.php \n  b / src/Discord/Discord.php \n@@ -956,7 +956,13 @@ class Discord \n } \n $this->logger->info('client is ready'); \n + \n + try { \n $this->emit('ready', [$this]); \n + } catch (\\Throwable $e) { \n + $this->emit('exception', [$e, $this]); \n + $this->logger->error('exception caught in ready callback', ['type' => get_class($e), 'message' => $e->getMessage()]); \n + } \n foreach ($this->unparsedPackets as $parser) { \n $parser();", "msg": "Added try/catch around ready event,\nException is logged with `error` level\nException is emitted with `exception` event"}
{"diff": "a / src/Discord/Discord.php \n  b / src/Discord/Discord.php \n@@ -295,7 +295,7 @@ class Discord \n * \n * @array HTML Color Table. \n */ \n - protected $colorTable = [ \n + public $colorTable = [ \n 'indianred' => 'cd5c5c', 'lightcoral' => 'f08080', 'salmon' => 'fa8072', 'darksalmon' => 'e9967a', \n 'lightsalmon' => 'ffa07a', 'crimson' => 'dc143c', 'red' => 'ff0000', 'firebrick' => 'b22222', \n 'darkred' => '8b0000', 'pink' => 'ffc0cb', 'lightpink' => 'ffb6c1', 'hotpink' => 'ff69b4',", "msg": "make colorTable public so users can insert their custom colors"}
{"diff": "a / src/Discord/Discord.php \n  b / src/Discord/Discord.php \n@@ -860,7 +860,7 @@ class Discord \n 'd' => $this->seq, \n ]; \n - $this->send($payload); \n + $this->send($payload, true); \n $this->heartbeatTime = microtime(true); \n $this->emit('heartbeat', [$this->seq, $this]); \n @@ -986,10 +986,11 @@ class Discord \n * \n * @param array $data Packet data. \n */ \n - protected function send(array $data): void \n + protected function send(array $data, bool $force = false): void \n { \n // Wait until payload count has been reset \n - if ($this->payloadCount >= 120) { \n + // Keep 5 payloads for heartbeats as required \n + if ($this->payloadCount >= 115 && ! $force) { \n $this->logger->debug('payload not sent, waiting', ['payload' => $data]); \n $this->once('payload_count_reset', function () use ($data) { \n $this->send($data);", "msg": "Keep a 5 payload buffer for any heartbeats that may need to go through"}
{"diff": "a / src/Discord/WebSockets/Events/GuildDelete.php \n  b / src/Discord/WebSockets/Events/GuildDelete.php \n@@ -22,10 +22,14 @@ class GuildDelete extends Event \n */ \n public function handle(Deferred &$deferred, $data): void \n { \n + $guild = $this->discord->guilds->get('id', $data->id); \n + \n + if (! $guild) { \n $guild = $this->factory->create(Guild::class, $data, true); \n + } \n $this->discord->guilds->pull($guild->id); \n - $deferred->resolve($guild); \n + $deferred->resolve([$guild, $data->unavailable ?? false]); \n } \n }", "msg": "Guild delete will now provide a guild object and the unavailable value"}
{"diff": "a / src/Discord/Repository/AbstractRepository.php \n  b / src/Discord/Repository/AbstractRepository.php \n@@ -283,7 +283,7 @@ abstract class AbstractRepository extends Collection \n str_replace(':id', $id, $this->endpoints['get']) \n ) \n )->done(function ($response) use ($deferred) { \n - $part = $this->factory->create($this->class, $response, true); \n + $part = $this->factory->create($this->class, array_merge($this->vars, (array) $response), true); \n $deferred->resolve($part); \n }, function ($e) use ($deferred) {", "msg": "When fetching from repository, merge response with repository attributes"}
{"diff": "a / src/Discord/Parts/Channel/Message.php \n  b / src/Discord/Parts/Channel/Message.php \n@@ -37,6 +37,7 @@ use function React\\Partial\\bind as Bind; \n * @property int $type The type of message. \n * @property Collection|User[] $mentions A collection of the users mentioned in the message. \n * @property Member|User $author The author of the message. \n + * @property string $user_id The user id of the author. \n * @property bool $mention_everyone Whether the message contained an @everyone mention. \n * @property Carbon $timestamp A timestamp of when the message was sent. \n * @property Carbon|null $edited_timestamp A timestamp of when the message was edited, or null. \n @@ -272,6 +273,16 @@ class Message extends Part \n return $users; \n } \n + /** \n + * Returns the `user_id` attribute. \n + * \n + * @return string \n + */ \n + protected function getUserIdAttribute(): ?string \n + { \n + return $this->attributes['author']->id ?? null; \n + } \n + \n /** \n * Returns the author attribute. \n *", "msg": "Message: added user_id attribute as a shortcut for author->id"}
{"diff": "a / src/Discord/Helpers/Collection.php \n  b / src/Discord/Helpers/Collection.php \n@@ -73,6 +73,19 @@ class Collection implements ArrayAccess, Serializable, JsonSerializable, Iterato \n return new static($items, $discrim, $class); \n } \n + /** \n + * Creates a collection for a class. \n + * \n + * @param string $class \n + * @param string $discrim \n + * \n + * @return Collection \n + */ \n + public static function for(string $class, ?string $discrim = 'id') \n + { \n + return new static([], $discrim, $class); \n + } \n + \n /** \n * Gets an item from the collection. \n *", "msg": "Collection: added Collection::for to create a collection for a class"}
{"diff": "a / src/Discord/Parts/Channel/Channel.php \n  b / src/Discord/Parts/Channel/Channel.php \n@@ -920,24 +920,6 @@ class Channel extends Part \n return $deferred->promise(); \n } \n - /** \n - * Returns the channel type. \n - * \n - * @return string Either 'text' or 'voice'. \n - */ \n - public function getChannelType(): string \n - { \n - switch ($this->type) { \n - case self::TYPE_TEXT: \n - case self::TYPE_VOICE: \n - return $this->type; \n - break; \n - default: \n - return self::TYPE_TEXT; \n - break; \n - } \n - } \n - \n /** \n * Returns if allow text. \n * \n @@ -965,7 +947,7 @@ class Channel extends Part \n { \n return [ \n 'name' => $this->name, \n - 'type' => $this->getChannelType(), \n + 'type' => $this->type, \n 'bitrate' => $this->bitrate, \n 'permission_overwrites' => $this->permission_overwrites, \n 'topic' => $this->topic,", "msg": "Channel: fixed creating channels other than text and voice"}
{"diff": "a / src/Discord/CommandClient/Command.php \n  b / src/Discord/CommandClient/Command.php \n@@ -228,7 +228,7 @@ class Command \n */ \n public function handle(Message $message, array $args) \n { \n - $subCommand = array_shift($args); \n + $subCommand = $originalSubCommand = array_shift($args); \n if ($subCommand !== null && $this->client->getCommandClientOptions()['caseInsensitiveCommands']) { \n $subCommand = strtolower($subCommand); \n @@ -241,7 +241,7 @@ class Command \n } \n if (! is_null($subCommand)) { \n - array_unshift($args, $subCommand); \n + array_unshift($args, $originalSubCommand); \n } \n $currentTime = round(microtime(true) * 1000);", "msg": "Don't re-add it to the arguments as lowercase if case sensitive option is set"}
{"diff": "a / src/Discord/Repository/Guild/BanRepository.php \n  b / src/Discord/Repository/Guild/BanRepository.php \n@@ -41,6 +41,7 @@ class BanRepository extends AbstractRepository \n */ \n protected $endpoints = [ \n 'all' => Endpoint::GUILD_BANS, \n + 'get' => Endpoint::GUILD_BAN, \n 'delete' => Endpoint::GUILD_BAN, \n ];", "msg": "Add get endpoint for single ban\nIt is possible:"}
{"diff": "a / src/Discord/functions.php \n  b / src/Discord/functions.php \n@@ -196,9 +196,9 @@ function imageToBase64(string $filepath): string \n * Takes a snowflake and calculates the time that the snowflake \n * was generated. \n * \n - * @param string|int $snowflake \n + * @param string|float $snowflake \n * \n - * @return int \n + * @return float \n */ \n function getSnowflakeTimestamp(string $snowflake) \n {", "msg": "getSnowflakeTimestamp documentation and build docs\nCalculated in ms precision, thus returns a float rather than an int."}
{"diff": "a / src/Discord/Parts/User/Member.php \n  b / src/Discord/Parts/User/Member.php \n@@ -652,6 +652,18 @@ class Member extends Part \n return Carbon::parse($this->attributes['communication_disabled_until']); \n } \n + /** \n + * Returns the voicechannel of the member. \n + * \n + * @return Channel|null \n + */ \n + public function getVoiceChannel(): ?Channel \n + { \n + return $this->guild->channels->find(function (Channel $channel) { \n + return $channel->allowVoice() && $channel->members->has($this->id); \n + }); \n + } \n + \n /** \n * @inheritdoc \n */", "msg": "add $member->getVoiceChannel()\nReturns the voicechannel of the member"}
{"diff": "a / src/Discord/Helpers/CacheWrapper.php \n  b / src/Discord/Helpers/CacheWrapper.php \n@@ -86,10 +86,6 @@ class CacheWrapper \n { \n return $this->interface->delete($key)->then(function ($success) use ($key) { \n if ($success) { \n - if (isset($this->items[$key])) { \n - $cache = $this->items[$key]->get(); \n - unset($cache); \n - } \n unset($this->items[$key]); \n } \n @@ -141,10 +137,6 @@ class CacheWrapper \n return $this->interface->deleteMultiple($keys)->then(function ($success) use ($keys) { \n if ($success) { \n foreach ($keys as $key) { \n - if (isset($this->items[$key])) { \n - $cache = $this->items[$key]->get(); \n - unset($cache); \n - } \n unset($this->items[$key]); \n } \n }", "msg": "revert last commit and fix deleteMultiple"}
{"diff": "a / src/Discord/Discord.php \n  b / src/Discord/Discord.php \n@@ -1302,6 +1302,9 @@ class Discord \n if (is_null($gateway)) { \n $this->http->get(Endpoint::GATEWAY_BOT)->done(function ($response) use ($buildParams) { \n + if ($response->shards > 1) { \n + $this->logger->warning('Please contact the DiscordPHP devs if you are interrested in working with us on sharding support.'); \n + } \n $buildParams($this->resume_gateway_url ?? $response->url, $response->session_start_limit); \n }, function ($e) use ($buildParams) { \n // Can't access the API server so we will use the default gateway.", "msg": "Attract rabbits\nWe are looking for people that use DiscordPHP that reached the point where the bot recommends sharding."}
{"diff": "a / src/Discord/Parts/Channel/StageInstance.php \n  b / src/Discord/Parts/Channel/StageInstance.php \n@@ -33,8 +33,6 @@ use Discord\\Parts\\Part; \n */ \n class StageInstance extends Part \n { \n - /** @deprecated 7.0.0 */ \n - public const PRIVACY_LEVEL_PUBLIC = 1; \n public const PRIVACY_LEVEL_GROUP_ONLY = 2; \n /**", "msg": "Remove deprecated stage instance constant"}
{"diff": "a / src/Discord/Parts/Channel/Channel.php \n  b / src/Discord/Parts/Channel/Channel.php \n@@ -1399,10 +1399,13 @@ class Channel extends Part \n $attr['default_thread_rate_limit_per_user'] = $this->default_thread_rate_limit_per_user; \n } elseif ($this->type == self::TYPE_GUILD_VOICE) { \n $attr['nsfw'] = $this->nsfw; \n + $attr['rate_limit_per_user'] = $this->rate_limit_per_user; \n $attr['bitrate'] = $this->bitrate; \n $attr['user_limit'] = $this->user_limit; \n $attr['rtc_region'] = $this->rtc_region; \n $attr['video_quality_mode'] = $this->video_quality_mode; \n + } elseif ($this->type == self::TYPE_GROUP_DM) { \n + $attr['icon'] = $this->icon; \n } elseif ($this->type == self::TYPE_GUILD_ANNOUNCEMENT) { \n $attr['type'] = $this->type; \n $attr['topic'] = $this->topic;", "msg": "slow mode voice, group dm icon updateable"}
{"diff": "a / src/Discord/Parts/Channel/Invite.php \n  b / src/Discord/Parts/Channel/Invite.php \n@@ -64,7 +64,6 @@ class Invite extends Part \n 'approximate_presence_count', \n 'approximate_member_count', \n 'expires_at', \n - 'stage_instance', // deprecated \n 'guild_scheduled_event', \n // Extra metadata", "msg": "remove deprecated invite stage_instances always null"}
{"diff": "a / src/Discord/Repository/AbstractRepository.php \n  b / src/Discord/Repository/AbstractRepository.php \n@@ -225,6 +225,10 @@ abstract class AbstractRepository extends Collection \n */ \n public function delete($part, ?string $reason = null): ExtendedPromiseInterface \n { \n + if (! isset($part)) { \n + return reject(new \\Exception('You cannot delete a non-existant part.')); \n + } \n + \n if (! ($part instanceof Part)) { \n $part = $this->factory->part($this->class, [$this->discrim => $part], true); \n }", "msg": "throw error if part is null"}
{"diff": "a / lib/Braintree/Transaction.php \n  b / lib/Braintree/Transaction.php \n@@ -135,7 +135,7 @@ namespace Braintree; \n * \n * <b>== More information ==</b> \n * \n - * For more detailed information on Transactions, see {@link http://www.braintreepayments.com/gateway/transaction-api http://www.braintreepaymentsolutions.com/gateway/transaction-api} \n + * For more detailed information on Transactions, see {@link https://developers.braintreepayments.com/reference/response/transaction/php https://developers.braintreepayments.com/reference/response/transaction/php} \n * \n * @package Braintree \n * @category Resources", "msg": "Update link to transaction api documentation."}
{"diff": "a / tests/integration/TransactionAdvancedSearchTest.php \n  b / tests/integration/TransactionAdvancedSearchTest.php \n@@ -1513,7 +1513,7 @@ class TransactionAdvancedSearchTest extends Setup \n $collection = Braintree\\Transaction::search([ \n Braintree\\TransactionSearch::creditCardNumber()->startsWith(\"411111\") \n ]); \n - $this->assertTrue($collection->maximumCount() > 100); \n + $this->assertGreaterThan(100, $collection->maximumCount()); \n $arr = []; \n foreach($collection as $transaction) {", "msg": "Use assertGreaterThan for better assertion message"}
{"diff": "a / lib/Braintree/Customer.php \n  b / lib/Braintree/Customer.php \n@@ -49,7 +49,7 @@ class Customer extends Base \n /** \n * \n - * @param string $query \n + * @param array $query \n * @param int[] $ids \n * @return Customer|Customer[] \n */ \n @@ -148,7 +148,7 @@ class Customer extends Base \n /** \n * \n * @throws InvalidArgumentException \n - * @param string $query \n + * @param array $query \n * @return ResourceCollection \n */ \n public static function search($query)", "msg": "Fixed type hints on query parameters\nUpdated type hints for query parameters from string to array."}
{"diff": "a / lib/Braintree/Error/Codes.php \n  b / lib/Braintree/Error/Codes.php \n@@ -698,6 +698,7 @@ class Codes \n const MERCHANT_ACOUNT_DOES_NOT_MATCH3_D_SECURE_MERCHANT_ACCOUNT = \"94284\"; \n const AMOUNT_DOES_NOT_MATCH3_D_SECURE_AMOUNT = \"94285\"; \n + # NEXT_MAJOR_VERSION Remove CustomerBrowserIsTooLong code as it is no longer applied \n const RISK_DATA_CUSTOMER_BROWSER_IS_TOO_LONG = \"94701\"; \n const RISK_DATA_CUSTOMER_DEVICE_ID_IS_TOO_LONG = \"94702\"; \n const RISK_DATA_CUSTOMER_LOCATION_ZIP_INVALID_CHARACTERS = \"94703\";", "msg": "DTBTCRDEXP add note to remove CustomerBrowserTooLong error code"}
{"diff": "a / src/functions.php \n  b / src/functions.php \n@@ -331,7 +331,7 @@ function run($command) \n * @return Result Output of command. \n * @throws \\RuntimeException \n */ \n -function runLocally($command, $timeout = 60) \n +function runLocally($command, $timeout = 300) \n { \n $command = parse($command);", "msg": "Raise timeout for runLocally to 300 seconds\nSimilar to other locations this is now also raised to 5 minutes."}
{"diff": "a / src/functions.php \n  b / src/functions.php \n@@ -447,6 +447,7 @@ function download($local, $remote) \n $local = parse($local); \n $remote = parse($remote); \n + writeln(\"Download file <info>$remote</info> to <info>$local</info>\"); \n $server->download($local, $remote); \n }", "msg": "Show message on file download\nSimilar to upload() a message should be shown for file downloads."}
{"diff": "a / recipe/deploy/lock.php \n  b / recipe/deploy/lock.php \n@@ -14,9 +14,11 @@ task('deploy:lock', function () { \n $locked = run(\"if [ -f {{deploy_path}}/.dep/deploy.lock ]; then echo 'true'; fi\")->toBool(); \n if ($locked) { \n + $stage = input()->hasArgument('stage') ? ' ' . input()->getArgument('stage') : ''; \n + \n throw new GracefulShutdownException( \n \"Deploy locked.\\n\" . \n - \"Run deploy:unlock command to unlock.\" \n + sprintf('Execute \"dep deploy:unlock%s\" to unlock.', $stage) \n ); \n } else { \n run(\"touch {{deploy_path}}/.dep/deploy.lock\");", "msg": "Improve lock message\nPrefix launcher script and append current stage."}
{"diff": "a / recipe/laravel.php \n  b / recipe/laravel.php \n@@ -38,7 +38,7 @@ set('writable_dirs', [ \n set('laravel_version', function () { \n $result = run('{{bin/php}} {{release_path}}/artisan --version'); \n - preg_match_all('/([0-9\\.])$/', $result, $matches); \n + preg_match_all('/([0-9]\\.*[0-9]*)/', $result, $matches); \n $version = $matches[1][0] ?? 5.4;", "msg": "Fix a parsing of laravel version in output \"php artisan --version\""}
{"diff": "a / recipe/laravel.php \n  b / recipe/laravel.php \n@@ -38,9 +38,9 @@ set('writable_dirs', [ \n set('laravel_version', function () { \n $result = run('{{bin/php}} {{release_path}}/artisan --version'); \n - preg_match_all('/([0-9]\\.*[0-9]*)/', $result, $matches); \n + preg_match_all('/(\\d+\\.?)+/', $result, $matches); \n - $version = $matches[1][0] ?? 5.4; \n + $version = $matches[0][0] ?? 5.4; \n return $version; \n });", "msg": "Parsing of laravel version. More universal regex"}
{"diff": "a / src/Host/Storage.php \n  b / src/Host/Storage.php \n@@ -102,7 +102,7 @@ class Storage \n // use the system temporary folder and the current pid as default \n // persistent storage in case we can't use the configured value \n // or we can't create the default location \n - $tmp = sys_get_temp_dir() . '/' . posix_getpid(); \n + $tmp = sys_get_temp_dir() . '/' . (function_exists('posix_getpid') ? posix_getpid() : getmypid()); \n // use the home dir of the current user \n // and the repository name", "msg": "Using getmypid on non posix compatible systems to get the PID of the running process."}
{"diff": "a / src/Executor/ParallelExecutor.php \n  b / src/Executor/ParallelExecutor.php \n@@ -252,7 +252,7 @@ class ParallelExecutor implements ExecutorInterface \n foreach (['log'] as $option) { \n $value = $this->input->getOption($option); \n if ($value) { \n - $input .= \" --$option $value\"; \n + $input .= \" --$option=$value\"; \n } \n } \n @@ -268,7 +268,7 @@ class ParallelExecutor implements ExecutorInterface \n foreach ($this->console->getUserDefinition()->getOptions() as $option) { \n $value = $this->input->getOption($option->getName()); \n if ($value) { \n - $input .= \" --{$option->getName()} $value\"; \n + $input .= \" --{$option->getName()}=$value\"; \n } \n }", "msg": "Handle option value with equal sign\noption should be handled with an equal sign."}
{"diff": "a / src/Task/Task.php \n  b / src/Task/Task.php \n@@ -261,18 +261,24 @@ class Task \n /** \n * @param string $task \n + * \n + * @return $this \n */ \n public function addBefore(string $task) \n { \n array_unshift($this->before, $task); \n + return $this; \n } \n /** \n * @param string $task \n + * \n + * @return $this \n */ \n public function addAfter(string $task) \n { \n array_push($this->after, $task); \n + return $this; \n } \n /**", "msg": "Return self in addBefore and addAfter methods to follow builder pattern\n* Update Task.php\naddBefore and addAfter methods should follow builder pattern\n* Update Task.php"}
{"diff": "a / recipe/deploy/vendors.php \n  b / recipe/deploy/vendors.php \n@@ -18,7 +18,7 @@ set('bin/composer', function () { \n return '{{bin/php}} {{deploy_path}}/.dep/composer.phar'; \n } \n - warning(\"Composer binary didn't found. Installing latest composer to \\\"{{deploy_path}}/.dep/composer.phar\\\".\"); \n + warning(\"Composer binary wasn't found. Installing latest composer to \\\"{{deploy_path}}/.dep/composer.phar\\\".\"); \n run(\"cd {{deploy_path}} && curl -sS https://getcomposer.org/installer | {{bin/php}}\"); \n run('mv {{deploy_path}}/composer.phar {{deploy_path}}/.dep/composer.phar'); \n return '{{bin/php}} {{deploy_path}}/.dep/composer.phar';", "msg": "Warning message sentence correction\nCorrected warning message to read a little better."}
{"diff": "a / recipe/deploy/release.php \n  b / recipe/deploy/release.php \n@@ -104,7 +104,16 @@ task('deploy:release', function () { \n // Check what there is no such release path. \n if (test(\"[ -d $releasePath ]\")) { \n - throw new Exception(\"Release name \\\"$releaseName\\\" already exists.\\nRelease name can be overridden via:\\n dep deploy -o release_name=$releaseName\"); \n + $freeReleaseName = '...'; \n + // Check what $releaseName is integer. \n + if (ctype_digit($releaseName)) { \n + $freeReleaseName = intval($releaseName); \n + // Find free release name. \n + while (test(\"[ -d releases/$freeReleaseName ]\")) { \n + $freeReleaseName++; \n + } \n + } \n + throw new Exception(\"Release name \\\"$releaseName\\\" already exists.\\nRelease name can be overridden via:\\n dep deploy -o release_name=$freeReleaseName\"); \n } \n // Save release_name.", "msg": "Improve error message: show next free release"}
{"diff": "a / Helper/Security/Acl/Permission/PermissionAdmin.php \n  b / Helper/Security/Acl/Permission/PermissionAdmin.php \n@@ -233,7 +233,7 @@ class PermissionAdmin \n $user = $this->tokenStorage->getToken()->getUser(); \n $this->createAclChangeSet($this->resource, $changes, $user); \n - $cmd = 'php ' . $this->kernel->getRootDir() . '/console kuma:acl:apply'; \n + $cmd = 'php bin/console kuma:acl:apply'; \n $cmd .= ' --env=' . $this->kernel->getEnvironment(); \n $this->shellHelper->runInBackground($cmd);", "msg": "[AdminBundle]: fix permissionadmin for sf3"}
{"diff": "a / Entity/BaseUser.php \n  b / Entity/BaseUser.php \n@@ -64,7 +64,7 @@ abstract class BaseUser extends AbstractUser \n * \n * @param int $id \n * \n - * @return User \n + * @return BaseUser \n */ \n public function setId($id) \n { \n @@ -118,7 +118,7 @@ abstract class BaseUser extends AbstractUser \n * \n * @param string $adminLocale \n * \n - * @return User \n + * @return BaseUser \n */ \n public function setAdminLocale($adminLocale) \n { \n @@ -192,4 +192,13 @@ abstract class BaseUser extends AbstractUser \n * @return string \n */ \n abstract public function getFormTypeClass(); \n + \n + /** \n + * {@inheritdoc} \n + */ \n + public function isAccountNonLocked() \n + { \n + return $this->isEnabled(); \n + } \n + \n }", "msg": "[AdminBundle]: fix fos user enabled state"}
{"diff": "a / Helper/VersionCheck/VersionChecker.php \n  b / Helper/VersionCheck/VersionChecker.php \n@@ -103,7 +103,7 @@ class VersionChecker \n $console = realpath($this->container->get('kernel')->getRootDir().'/../bin/console'); \n $installed = filectime($console); \n $bundles = $this->parseComposer(); \n - $title = $this->container->getParameter('websitetitle'); \n + $title = $this->container->getParameter('kunstmaan_admin.website_title'); \n $jsonData = json_encode(array( \n 'host' => $host,", "msg": "[AdminBundle] Use correct parameter to retrieve website title"}
{"diff": "a / Tests/unit/Helper/Security/Acl/AclHelperTest.php \n  b / Tests/unit/Helper/Security/Acl/AclHelperTest.php \n@@ -322,7 +322,7 @@ class AclHelperTest extends TestCase \n public function testGetAllowedEntityIdsNoEntity() \n { \n - $this->setExpectedException('InvalidArgumentException'); \n + $this->expectException('InvalidArgumentException'); \n $this->object->getAllowedEntityIds(new PermissionDefinition(array('view'))); \n }", "msg": "[AdminBundle] fixed phpunit deprecation"}
{"diff": "a / DependencyInjection/Configuration.php \n  b / DependencyInjection/Configuration.php \n@@ -20,8 +20,13 @@ class Configuration implements ConfigurationInterface \n */ \n public function getConfigTreeBuilder() \n { \n - $treeBuilder = new TreeBuilder(); \n + $treeBuilder = new TreeBuilder('kunstmaan_admin'); \n + if (method_exists($treeBuilder, 'getRootNode')) { \n + $rootNode = $treeBuilder->getRootNode(); \n + } else { \n + // BC layer for symfony/config 4.1 and older \n $rootNode = $treeBuilder->root('kunstmaan_admin'); \n + } \n $rootNode \n ->fixXmlConfig('admin_locale')", "msg": "[AllBundles] Fix sf4 rootNode deprecation"}
{"diff": "a / Helper/VersionCheck/VersionChecker.php \n  b / Helper/VersionCheck/VersionChecker.php \n@@ -100,7 +100,7 @@ class VersionChecker \n } \n $host = $this->container->get('request_stack')->getCurrentRequest()->getHttpHost(); \n - $console = realpath($this->container->get('kernel')->getRootDir().'/../bin/console'); \n + $console = realpath($this->container->get('kernel')->getProjectDir().'/bin/console'); \n $installed = filectime($console); \n $bundles = $this->parseComposer(); \n $title = $this->container->getParameter('kunstmaan_admin.website_title'); \n @@ -160,8 +160,7 @@ class VersionChecker \n protected function getLockPath() \n { \n $kernel = $this->container->get('kernel'); \n - $dir = $kernel->getRootDir(); \n - $rootPath = dirname($dir); \n + $rootPath = $kernel->getProjectDir(); \n return $rootPath.'/composer.lock'; \n }", "msg": "[AllBundles] Replace deprecated getRootDir calls"}
{"diff": "a / Composer/ScriptHandler.php \n  b / Composer/ScriptHandler.php \n@@ -7,6 +7,11 @@ use Symfony\\Component\\Filesystem\\Exception\\IOException; \n use Symfony\\Component\\Filesystem\\Filesystem; \n use Symfony\\Component\\Yaml\\Parser; \n +@trigger_error(sprintf('The composer script class \"%s\" is deprecated in KunstmaanAdminBundle 5.4 and will be removed in KunstmaanAdminBundle 6.0. If you use this script handler, remove it from your composer.json scripts section.', __CLASS__), E_USER_DEPRECATED); \n + \n +/** \n + * NEXT_MAJOR remove the symfony/filesystem and symfony/yaml as direct dependency of the admin-bundle (if unused in other classes) \n + */ \n class ScriptHandler \n { \n protected static $options = array(", "msg": "[AdminBundle] Deprecate unused composer script class"}
{"diff": "a / DependencyInjection/KunstmaanAdminExtension.php \n  b / DependencyInjection/KunstmaanAdminExtension.php \n@@ -119,8 +119,6 @@ class KunstmaanAdminExtension extends Extension implements PrependExtensionInter \n $container->prependExtensionConfig('twig', $twigConfig); \n // NEXT_MAJOR: Remove templating dependency \n - $frameworkConfig['templating']['engines'] = ['twig']; \n - $container->prependExtensionConfig('framework', $frameworkConfig); \n $configs = $container->getExtensionConfig($this->getAlias()); \n $this->processConfiguration(new Configuration(), $configs);", "msg": "[NodeSearchBundle] Introduce SearchViewRenderer service to deprecate/remove remaining templating usages"}
{"diff": "a / EventListener/ConsoleExceptionListener.php \n  b / EventListener/ConsoleExceptionListener.php \n@@ -7,8 +7,6 @@ use Symfony\\Component\\Console\\Event\\ConsoleErrorEvent; \n use Symfony\\Component\\Console\\Event\\ConsoleExceptionEvent; \n /** \n - * Class ConsoleExceptionListener. \n - * \n * @deprecated in KunstmaanAdminBundle 5.1 and will be removed in KunstmaanNodeBundle 6.0. \n */ \n class ConsoleExceptionListener \n @@ -16,9 +14,6 @@ class ConsoleExceptionListener \n /** @var LoggerInterface */ \n private $logger; \n - /** \n - * ConsoleExceptionListener constructor. \n - */ \n public function __construct(LoggerInterface $logger) \n { \n $this->logger = $logger; \n @@ -37,10 +32,6 @@ class ConsoleExceptionListener \n $this->logCommandError($command, $exception); \n } \n - /** \n - * @param $command \n - * @param $error \n - */ \n private function logCommandError($command, $error) \n { \n $message = sprintf(", "msg": "[AdminBundle] Enhancement: Remove useless PHPDoc"}
{"diff": "a / Entity/BaseUser.php \n  b / Entity/BaseUser.php \n@@ -7,13 +7,15 @@ use Doctrine\\ORM\\Mapping as ORM; \n use FOS\\UserBundle\\Model\\GroupInterface; \n use Kunstmaan\\AdminBundle\\Validator\\Constraints\\PasswordRestrictions; \n use Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity; \n -use Symfony\\Component\\Security\\Core\\User\\EquatableInterface; \n use Symfony\\Component\\Security\\Core\\User\\UserInterface as BaseUserInterface; \n use Symfony\\Component\\Validator\\Constraints\\Email; \n use Symfony\\Component\\Validator\\Constraints\\NotBlank; \n use Symfony\\Component\\Validator\\Mapping\\ClassMetadata; \n -abstract class BaseUser implements UserInterface, EquatableInterface \n +/** \n + * NEXT_MAJOR implement EquatableInterface \n + */ \n +abstract class BaseUser implements UserInterface \n { \n /** \n * @ORM\\Id", "msg": "[AdminBundle] Fix User incompatibility after new authentication changes"}
{"diff": "a / lib/Doctrine/DBAL/Types/Type.php \n  b / lib/Doctrine/DBAL/Types/Type.php \n@@ -338,7 +338,7 @@ abstract class Type \n /** \n * If this Doctrine Type maps to an already mapped database type, \n - * reverse schema engineering can't take them apart. You need to mark \n + * reverse schema engineering can't tell them apart. You need to mark \n * one of those types as commented, which will have Doctrine use an SQL \n * comment to typehint the actual Doctrine Type. \n *", "msg": "Use intended semantics\nI think distinguish was the intended meaning here, not dismantle."}
{"diff": "a / lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php \n  b / lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php \n@@ -127,7 +127,7 @@ abstract class AbstractMySQLDriver implements Driver, ExceptionConverterDriver, \n /** \n * {@inheritdoc} \n * \n - * @return AbstractPlatform|MariaDb1027Platform|MySQL57Platform|MySqlPlatform \n + * @return AbstractPlatform \n * @throws DBALException \n */ \n public function createDatabasePlatformForVersion($version)", "msg": "morozov removed type doc: AbstractPlatform cover everything"}
{"diff": "a / lib/Doctrine/DBAL/Connection.php \n  b / lib/Doctrine/DBAL/Connection.php \n@@ -82,14 +82,14 @@ class Connection implements DriverConnection \n * \n * @var int \n */ \n - const PARAM_INT_ARRAY = 101; \n + const PARAM_INT_ARRAY = ParameterType::INTEGER + self::ARRAY_PARAM_OFFSET; \n /** \n * Represents an array of strings to be expanded by Doctrine SQL parsing. \n * \n * @var int \n */ \n - const PARAM_STR_ARRAY = 102; \n + const PARAM_STR_ARRAY = ParameterType::STRING + self::ARRAY_PARAM_OFFSET; \n /** \n * Offset by which PARAM_* constants are detected as arrays of the param type.", "msg": "Expressed PARAM_*_ARRAY through other constants to eliminate the dependency on the actual constant values"}
{"diff": "a / lib/Doctrine/DBAL/Query/Expression/ExpressionBuilder.php \n  b / lib/Doctrine/DBAL/Query/Expression/ExpressionBuilder.php \nnamespace Doctrine\\DBAL\\Query\\Expression; \n use Doctrine\\DBAL\\Connection; \n +use function func_get_args; \n +use function func_num_args; \n +use function sprintf; \n /** \n * ExpressionBuilder class is responsible to dynamically create SQL query parts. \n @@ -256,7 +259,8 @@ class ExpressionBuilder \n */ \n public function like($x, $y) \n { \n - return $this->comparison($x, 'LIKE', $y); \n + return $this->comparison($x, 'LIKE', $y) . \n + (func_num_args() >= 3 ? sprintf(\" ESCAPE '%s'\", func_get_args()[2]) : ''); \n } \n /** \n @@ -269,7 +273,8 @@ class ExpressionBuilder \n */ \n public function notLike($x, $y) \n { \n - return $this->comparison($x, 'NOT LIKE', $y); \n + return $this->comparison($x, 'NOT LIKE', $y) . \n + (func_num_args() >= 3 ? sprintf(\" ESCAPE '%s'\", func_get_args()[2]) : ''); \n } \n /**", "msg": "Make building LIKE expression with escaping easier\nIt was possible to provide escaping through the second argument but that\nwas more like a hack."}
{"diff": "a / lib/Doctrine/DBAL/Driver/SQLSrv/SQLSrvConnection.php \n  b / lib/Doctrine/DBAL/Driver/SQLSrv/SQLSrvConnection.php \n@@ -136,11 +136,11 @@ class SQLSrvConnection implements Connection, ServerInfoAwareConnection \n if ($name !== null) { \n $stmt = $this->prepare('SELECT CONVERT(VARCHAR(MAX), current_value) FROM sys.sequences WHERE name = ?'); \n $stmt->execute([$name]); \n - \n - return $stmt->fetchColumn(); \n + } else { \n + $stmt = $this->query('SELECT @@IDENTITY'); \n } \n - return $this->lastInsertId->getId(); \n + return $stmt->fetchColumn(); \n } \n /**", "msg": "Fixed fetching last inserted ID from a SQL Server connection"}
{"diff": "a / lib/Doctrine/DBAL/Platforms/SQLServerPlatform.php \n  b / lib/Doctrine/DBAL/Platforms/SQLServerPlatform.php \n@@ -1278,7 +1278,7 @@ SQL \n // Even if the TOP n is very large, the use of a CTE will \n // allow the SQL Server query planner to optimize it so it doesn't \n // actually scan the entire range covered by the TOP clause. \n - if (! preg_match('/^(\\s*SELECT\\s+(?:DISTINCT\\s+)?)(.*)$/im', $query, $matches)) { \n + if (! preg_match('/^(\\s*SELECT\\s+(?:DISTINCT\\s+)?)(.*)$/is', $query, $matches)) { \n return $query; \n }", "msg": "Fixed regression on SQL Server introduced by a recent rework"}
{"diff": "a / lib/Doctrine/DBAL/Driver/StatementIterator.php \n  b / lib/Doctrine/DBAL/Driver/StatementIterator.php \n@@ -6,10 +6,10 @@ use IteratorAggregate; \n class StatementIterator implements IteratorAggregate \n { \n - /** @var Statement */ \n + /** @var ResultStatement */ \n private $statement; \n - public function __construct(Statement $statement) \n + public function __construct(ResultStatement $statement) \n { \n $this->statement = $statement; \n }", "msg": "Relax statement type declaration\nfetch() is part of the ResultStatement interface. Using Statement as a\ntype declaration needlessly constrains people to use this class only\nwith implementations of Statement."}
{"diff": "a / lib/Doctrine/DBAL/Tools/Dumper.php \n  b / lib/Doctrine/DBAL/Tools/Dumper.php \n@@ -17,7 +17,6 @@ use function explode; \n use function extension_loaded; \n use function get_class; \n use function html_entity_decode; \n -use function ini_get; \n use function ini_set; \n use function is_array; \n use function is_object; \n @@ -55,14 +54,11 @@ final class Dumper \n */ \n public static function dump($var, int $maxDepth = 2) : string \n { \n - $html = ini_get('html_errors'); \n - \n - if ($html !== true) { \n - ini_set('html_errors', true); \n - } \n + $html = ini_set('html_errors', '1'); \n + assert(is_string($html)); \n if (extension_loaded('xdebug')) { \n - ini_set('xdebug.var_display_max_depth', $maxDepth); \n + ini_set('xdebug.var_display_max_depth', (string) $maxDepth); \n } \n $var = self::export($var, $maxDepth);", "msg": "Use strings to work with ini_get() and ini_set()\nAdditionally, set the new value and get the old one in one ini_set() call."}
{"diff": "a / tests/Doctrine/Tests/DBAL/DriverManagerTest.php \n  b / tests/Doctrine/Tests/DBAL/DriverManagerTest.php \n@@ -242,7 +242,7 @@ class DriverManagerTest extends DbalTestCase \n } \n /** \n - * @return array<string, array<int, mixed>> \n + * @return array<string, list<mixed>> \n */ \n public function databaseUrls() : iterable \n {", "msg": "Use list\nIt is more simple and more accurate"}
{"diff": "a / tests/Doctrine/Tests/DBAL/Schema/ComparatorTest.php \n  b / tests/Doctrine/Tests/DBAL/Schema/ComparatorTest.php \n@@ -872,6 +872,7 @@ class ComparatorTest extends TestCase \n /** \n * @group DBAL-106 \n + * @psalm-suppress NullArgument \n */ \n public function testDiffDecimalWithNullPrecision() : void \n {", "msg": "Suppress deliberate error\nWe are testing what happens when providing the wrong type."}
{"diff": "a / tests/Doctrine/Tests/DBAL/DriverManagerTest.php \n  b / tests/Doctrine/Tests/DBAL/DriverManagerTest.php \n@@ -107,6 +107,7 @@ class DriverManagerTest extends DbalTestCase \n /** \n * @requires extension pdo_sqlite \n + * @psalm-suppress InvalidArgument \n */ \n public function testInvalidWrapperClass() : void \n {", "msg": "Suppress InvalidArgument error\nThis is precisely what we are testing here."}
{"diff": "a / lib/Doctrine/DBAL/Driver/PDOConnection.php \n  b / lib/Doctrine/DBAL/Driver/PDOConnection.php \n@@ -38,7 +38,10 @@ class PDOConnection extends PDO implements Connection, ServerInfoAwareConnection \n public function exec($statement) \n { \n try { \n - return parent::exec($statement); \n + $result = parent::exec($statement); \n + assert($result !== false); \n + \n + return $result; \n } catch (\\PDOException $exception) { \n throw new PDOException($exception); \n }", "msg": "PDO APIs need additional assertions due to the existing error suppression mode"}
{"diff": "a / tests/Doctrine/Tests/TestUtil.php \n  b / tests/Doctrine/Tests/TestUtil.php \n@@ -175,6 +175,11 @@ class TestUtil \n 'dbname', \n 'port', \n 'server', \n + 'ssl_key', \n + 'ssl_cert', \n + 'ssl_ca', \n + 'ssl_capath', \n + 'ssl_cipher', \n 'unix_socket', \n ] as $parameter \n ) {", "msg": "Add the possibility to specify SSL-related parameters in test configuration"}
{"diff": "a / tests/Doctrine/Tests/DBAL/Functional/ResultCacheTest.php \n  b / tests/Doctrine/Tests/DBAL/Functional/ResultCacheTest.php \n@@ -243,7 +243,7 @@ class ResultCacheTest extends DbalFunctionalTestCase \n } \n /** \n - * @param array<int, array<int, int|string>>|list<int> $expectedResult \n + * @param list<mixed> $expectedResult \n */ \n private function assertCacheNonCacheSelectSameFetchModeAreEqual(array $expectedResult, int $fetchMode): void \n {", "msg": "Loosen an unnecessarily strict type"}
{"diff": "a / lib/Doctrine/DBAL/Driver/PDOOracle/Driver.php \n  b / lib/Doctrine/DBAL/Driver/PDOOracle/Driver.php \n@@ -10,10 +10,6 @@ use PDOException; \n /** \n * PDO Oracle driver. \n * \n - * WARNING: PDO Oracle is not maintained by Oracle or anyone in the PHP community, \n - * which leads us to the recommendation to use the \"oci8\" driver to connect \n - * to Oracle instead. \n - * \n * @deprecated Use {@link PDO\\OCI\\Driver} instead. \n */ \n class Driver extends AbstractOracleDriver", "msg": "Remove no longer valid comment - pdo_oci is maintaned by php people"}
{"diff": "a / lib/Doctrine/DBAL/Logging/EchoSQLLogger.php \n  b / lib/Doctrine/DBAL/Logging/EchoSQLLogger.php \nnamespace Doctrine\\DBAL\\Logging; \n +use Doctrine\\Deprecations\\Deprecation; \n + \n use function var_dump; \n use const PHP_EOL; \n @@ -13,6 +15,15 @@ use const PHP_EOL; \n */ \n class EchoSQLLogger implements SQLLogger \n { \n + public function __construct() \n + { \n + Deprecation::trigger( \n + 'doctrine/dbal', \n + 'https://github.com/doctrine/dbal/pull/3935', \n + 'EchoSQLLogger is deprecated without replacement, move the code into your project if you rely on it.' \n + ); \n + } \n + \n /** \n * {@inheritdoc} \n */", "msg": "Add deprecation trigger for EchoSQLLogger."}
{"diff": "a / lib/Doctrine/DBAL/DriverManager.php \n  b / lib/Doctrine/DBAL/DriverManager.php \n@@ -10,6 +10,7 @@ use Doctrine\\DBAL\\Driver\\OCI8; \n use Doctrine\\DBAL\\Driver\\PDO; \n use Doctrine\\DBAL\\Driver\\SQLAnywhere; \n use Doctrine\\DBAL\\Driver\\SQLSrv; \n +use Doctrine\\Deprecations\\Deprecation; \n use function array_keys; \n use function array_merge; \n @@ -217,6 +218,12 @@ final class DriverManager \n } \n if (isset($params['pdo'])) { \n + Deprecation::trigger( \n + 'doctrine/dbal', \n + 'https://github.com/doctrine/dbal/pull/3554', \n + 'Passing a user provided PDO instance directly to Doctrine is deprecated.' \n + ); \n + \n $params['pdo']->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION); \n $params['driver'] = 'pdo_' . $params['pdo']->getAttribute(\\PDO::ATTR_DRIVER_NAME); \n }", "msg": "Trigger deprecation for passing user provided PDO instance."}
{"diff": "a / src/Driver/Mysqli/Statement.php \n  b / src/Driver/Mysqli/Statement.php \n@@ -205,13 +205,8 @@ final class Statement implements StatementInterface \n */ \n private function bindUntypedValues(array $values): bool \n { \n - $params = []; \n $types = str_repeat('s', count($values)); \n - foreach ($values as &$v) { \n - $params[] =& $v; \n - } \n - \n - return $this->stmt->bind_param($types, ...$params); \n + return $this->stmt->bind_param($types, ...$values); \n } \n }", "msg": "Remove rudandant reference assignment"}
{"diff": "a / src/Connection.php \n  b / src/Connection.php \n@@ -119,7 +119,6 @@ class Connection \n * The parameters used during creation of the Connection instance. \n * \n * @var array<string,mixed> \n - * @phpstan-var array<string,mixed> \n * @psalm-var Params \n */ \n private $params; \n @@ -215,7 +214,6 @@ class Connection \n * \n * @return array<string,mixed> \n * @psalm-return Params \n - * @phpstan-return array<string,mixed> \n */ \n public function getParams() \n {", "msg": "Lift restriction on PHPStan\nIt seems clever enough to understand this now."}
{"diff": "a / tests/Functional/Platform/DateExpressionTest.php \n  b / tests/Functional/Platform/DateExpressionTest.php \n@@ -30,7 +30,7 @@ class DateExpressionTest extends FunctionalTestCase \n self::assertEquals($expected, $diff); \n } \n - /** @return string[][]|int[][] */ \n + /** @return array<string, array{string, string, int}> */ \n public static function differenceProvider(): iterable \n { \n $date1 = new DateTimeImmutable();", "msg": "Improve data provider phpdoc"}
{"diff": "a / src/Jikan.php \n  b / src/Jikan.php \n@@ -63,6 +63,16 @@ class Jikan \n return $this->myanimelist->getManga($request); \n } \n + /** \n + * @param Request\\Character $request \n + * \n + * @return Model\\Character \n + */ \n + public function Character(Request\\Character $request): Model\\Character \n + { \n + return $this->myanimelist->getCharacter($request); \n + } \n + \n /** \n * @param Request\\Seasonal $request \n *", "msg": "add character - possibly was removed due to conflict"}
{"diff": "a / src/Model/UserProfile.php \n  b / src/Model/UserProfile.php \n@@ -52,17 +52,6 @@ class UserProfile \n */ \n private $joined; \n - /** \n - * @var string \n - */ \n - private $animeListUrl; \n - \n - /** \n - * @var string \n - */ \n - private $mangaListUrl; \n - \n - \n /** \n * @var \\Jikan\\Model\\AnimeStats \n */ \n @@ -142,20 +131,6 @@ class UserProfile \n return $this->joined; \n } \n - /** \n - * @return string \n - */ \n - public function getAnimeListUrl() : string { \n - return $this->animeListUrl; \n - } \n - \n - /** \n - * @return string \n - */ \n - public function getMangaListUrl() : string { \n - return $this->mangaListUrl; \n - } \n - \n /** \n * @return \\Jikan\\Model\\AnimeStats \n */", "msg": "remove animeListUrl & mangaListUrl - unnecessary"}
{"diff": "a / src/Model/Common/DateRange.php \n  b / src/Model/Common/DateRange.php \n@@ -26,6 +26,11 @@ class DateRange \n $this->aired = $aired; \n } \n + public function __toString() \n + { \n + return $this->aired; \n + } \n + \n /** \n * @return \\DateTimeImmutable|null \n */ \n @@ -55,12 +60,4 @@ class DateRange \n return Parser::parseDate($aired); \n } \n - \n - /** \n - * @return string \n - */ \n - public function getAiredString(): string \n - { \n - return $this->aired; \n - } \n }", "msg": "add __toString method to DateRange\nRemove getAiringString"}
{"diff": "a / src/Model/Common/MalUrl.php \n  b / src/Model/Common/MalUrl.php \n@@ -44,6 +44,10 @@ class MalUrl \n */ \n public function getMalId(): int \n { \n + if (preg_match('~^https://myanimelist.net/\\w+/(\\d+)$~', $this->url, $id)) { \n + return (int) $id[1]; \n + } \n + \n return \n ctype_digit( \n preg_replace('#https://myanimelist.net/\\w+/(\\d+|\\w+/(\\d+))/.*#', '$1', $this->url)", "msg": "MalUrl: add support to parse URLs from UserHistory"}
{"diff": "a / src/Monolog/Handler/SlackHandler.php \n  b / src/Monolog/Handler/SlackHandler.php \n@@ -144,6 +144,17 @@ class SlackHandler extends SocketHandler \n protected function write(array $record) \n { \n parent::write($record); \n + $this->finalizeWrite(); \n + } \n + \n + /** \n + * Finalizes the request by reading some bytes and then closing the socket \n + * \n + * If we do not read some but close the socket too early, slack sometimes \n + * drops the request entirely. \n + */ \n + protected function finalizeWrite() \n + { \n $res = $this->getResource(); \n if (is_resource($res)) { \n @fread($res, 2048);", "msg": "Split off work into a new method to facilitate extension, fixes"}
{"diff": "a / src/Monolog/Handler/ErrorLogHandler.php \n  b / src/Monolog/Handler/ErrorLogHandler.php \n@@ -71,13 +71,14 @@ class ErrorLogHandler extends AbstractProcessingHandler \n */ \n protected function write(array $record) \n { \n - if ($this->expandNewlines) { \n + if (!$this->expandNewlines) { \n + error_log((string) $record['formatted'], $this->messageType); \n + return; \n + } \n + \n $lines = preg_split('{[\\r\\n]+}', (string) $record['formatted']); \n foreach ($lines as $line) { \n error_log($line, $this->messageType); \n } \n - } else { \n - error_log((string) $record['formatted'], $this->messageType); \n - } \n } \n }", "msg": "Minor code cleanup on Handler/ErrorLogHandler.php\nJust some cleanup for readability."}
{"diff": "a / src/Monolog/Logger.php \n  b / src/Monolog/Logger.php \n@@ -87,8 +87,6 @@ class Logger implements LoggerInterface \n const API = 2; \n /** \n - * Logging levels from syslog protocol defined in RFC 5424 \n - * \n * This is a static variable and not a constant to serve as an extension point for custom levels \n * \n * @var string[] $levels Logging levels with the levels as key", "msg": "Remove misleading reference to RFC 5424 standard"}
{"diff": "a / src/Monolog/ErrorHandler.php \n  b / src/Monolog/ErrorHandler.php \n@@ -166,6 +166,10 @@ class ErrorHandler \n call_user_func($this->previousExceptionHandler, $e); \n } \n + if (!headers_sent() && ini_get('display_errors') === 0) { \n + http_response_code(500); \n + } \n + \n exit(255); \n }", "msg": "Set HTTP response code to 500 in case of exceptions\nResolves Seldaek/monolog#1096."}
{"diff": "a / src/Monolog/Registry.php \n  b / src/Monolog/Registry.php \n@@ -131,14 +131,4 @@ class Registry \n { \n return self::getInstance($name); \n } \n - \n - /** \n - * @internal \n - */ \n - public function getClass($object) \n - { \n - $class = \\get_class($object); \n - \n - return 'c' === $class[0] && 0 === strpos($class, \"class@anonymous\\0\") ? get_parent_class($class).'@anonymous' : $class; \n - } \n }", "msg": "Remove getClass func from Registry as it was moved to Utils class"}
{"diff": "a / src/Monolog/Handler/ChromePHPHandler.php \n  b / src/Monolog/Handler/ChromePHPHandler.php \n@@ -43,7 +43,7 @@ class ChromePHPHandler extends AbstractProcessingHandler \n /** \n * Tracks whether we sent too much data \n * \n - * Chrome limits the headers to 256KB, so when we sent 240KB we stop sending \n + * Chrome limits the headers to 4KB, so when we sent 3KB we stop sending \n * \n * @var bool \n */ \n @@ -136,7 +136,7 @@ class ChromePHPHandler extends AbstractProcessingHandler \n $json = @json_encode(self::$json); \n $data = base64_encode(utf8_encode($json)); \n - if (strlen($data) > 240 * 1024) { \n + if (strlen($data) > 3 * 1024) { \n self::$overflowed = true; \n $record = array(", "msg": "Change chrome header size limit\nDue to change in chromium header size support, the size limit enforced by the handler must be decreased."}
